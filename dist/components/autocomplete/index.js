/*! For license information please see index.js.LICENSE.txt */
(()=>{var e,t,r,n,o,s,i,a={"./components/autocomplete/index.js":(e,t,r)=>{"use strict";r.r(t);r("./components/autocomplete/index.scss");$(".saif-autocomplete").autocomplete({lookup:["Baker","Benton","Clackamas","Clatsop","Columbia","Coos","Crook","Curry","Deschutes","Douglas","Gilliam"],autoSelectFirst:!0,maxHeight:110,onSelect:function(e){console.log(e)}})},"./node_modules/is-plain-obj/index.js":e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var r;return"[object Object]"===t.call(e)&&(null===(r=Object.getPrototypeOf(e))||r===Object.getPrototypeOf({}))}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var n=r("./node_modules/mini-css-extract-plugin/node_modules/normalize-url/index.js"),o=Object.create(null),s="undefined"==typeof document,i=Array.prototype.forEach;function a(){}function c(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(h(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.addEventListener("error",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){var t=document.querySelectorAll("link"),r=!1;return i.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);h(o)&&!0!==t.visited&&o&&(c(t,o),r=!0)}})),r}function l(){var e=document.querySelectorAll("link");i.call(e,(function(e){!0!==e.visited&&c(e)}))}function h(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(s)return console.log("no window.document found, will not HMR CSS"),a;var r,i,c,h=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),s=r[r.length-1];s&&(t=s.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")),{stripWWW:!1})})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void l();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),l())},i=50,c=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(c),c=setTimeout(n,i)}}},"./components/autocomplete/index.scss":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},"./node_modules/mini-css-extract-plugin/node_modules/normalize-url/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/url.js"),o=r("./node_modules/punycode/punycode.es6.js"),s=r("./node_modules/query-string/index.js"),i=r("./node_modules/prepend-http/index.js"),a=r("./node_modules/sort-keys/index.js"),c=r("./node_modules/object-assign/index.js"),u={"http:":80,"https:":443,"ftp:":21},l={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function h(e,t){return t.some((function(t){return t instanceof RegExp?t.test(e):t===e}))}e.exports=function(e,t){if(t=c({normalizeProtocol:!0,normalizeHttps:!1,stripFragment:!0,stripWWW:!0,removeQueryParameters:[/^utm_\w+/i],removeTrailingSlash:!0,removeDirectoryIndex:!1},t),"string"!=typeof e)throw new TypeError("Expected a string");var r=0===e.indexOf("//");e=i(e.trim()).replace(/^\/\//,"http://");var d=n.parse(e);if(t.normalizeHttps&&"https:"===d.protocol&&(d.protocol="http:"),!d.hostname&&!d.pathname)throw new Error("Invalid URL");delete d.host,delete d.query,t.stripFragment&&delete d.hash;var p=u[d.protocol];if(Number(d.port)===p&&delete d.port,d.pathname&&(d.pathname=d.pathname.replace(/\/{2,}/g,"/")),d.pathname&&(d.pathname=decodeURI(d.pathname)),!0===t.removeDirectoryIndex&&(t.removeDirectoryIndex=[/^index\.[a-z]+$/]),Array.isArray(t.removeDirectoryIndex)&&t.removeDirectoryIndex.length){var f=d.pathname.split("/");h(f[f.length-1],t.removeDirectoryIndex)&&(f=f.slice(0,f.length-1),d.pathname=f.slice(1).join("/")+"/")}if(l[d.protocol]){var m=d.protocol+"//"+d.hostname,v=n.resolve(m,d.pathname);d.pathname=v.replace(m,"")}d.hostname&&(d.hostname=o.toUnicode(d.hostname).toLowerCase(),d.hostname=d.hostname.replace(/\.$/,""),t.stripWWW&&(d.hostname=d.hostname.replace(/^www\./,""))),"?"===d.search&&delete d.search;var g=s.parse(d.search);if(Array.isArray(t.removeQueryParameters))for(var y in g)h(y,t.removeQueryParameters)&&delete g[y];return d.search=s.stringify(a(g)),d.search=decodeURIComponent(d.search),e=n.format(d),(t.removeTrailingSlash||"/"===d.pathname)&&(e=e.replace(/\/$/,"")),r&&!t.normalizeProtocol&&(e=e.replace(/^http:\/\//,"//")),e}},"./node_modules/object-assign/index.js":e=>{"use strict";var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,s){for(var i,a,c=o(e),u=1;u<arguments.length;u++){for(var l in i=Object(arguments[u]))r.call(i,l)&&(c[l]=i[l]);if(t){a=t(i);for(var h=0;h<a.length;h++)n.call(i,a[h])&&(c[a[h]]=i[a[h]])}}return c}},"./node_modules/prepend-http/index.js":e=>{"use strict";e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected a string, got "+typeof e);return e=e.trim(),/^\.*\/|^(?!localhost)\w+:/.test(e)?e:e.replace(/^(?!(?:\w+:)?\/\/)/,"http://")}},"./node_modules/punycode/punycode.es6.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ucs2decode:()=>p,ucs2encode:()=>f,decode:()=>g,encode:()=>y,toASCII:()=>j,toUnicode:()=>b,default:()=>x});const n=2147483647,o=36,s=/^xn--/,i=/[^\0-\x7E]/,a=/[\x2E\u3002\uFF0E\uFF61]/g,c={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},u=Math.floor,l=String.fromCharCode;function h(e){throw new RangeError(c[e])}function d(e,t){const r=e.split("@");let n="";r.length>1&&(n=r[0]+"@",e=r[1]);const o=function(e,t){const r=[];let n=e.length;for(;n--;)r[n]=t(e[n]);return r}((e=e.replace(a,".")).split("."),t).join(".");return n+o}function p(e){const t=[];let r=0;const n=e.length;for(;r<n;){const o=e.charCodeAt(r++);if(o>=55296&&o<=56319&&r<n){const n=e.charCodeAt(r++);56320==(64512&n)?t.push(((1023&o)<<10)+(1023&n)+65536):(t.push(o),r--)}else t.push(o)}return t}const f=e=>String.fromCodePoint(...e),m=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},v=function(e,t,r){let n=0;for(e=r?u(e/700):e>>1,e+=u(e/t);e>455;n+=o)e=u(e/35);return u(n+36*e/(e+38))},g=function(e){const t=[],r=e.length;let s=0,i=128,a=72,c=e.lastIndexOf("-");c<0&&(c=0);for(let r=0;r<c;++r)e.charCodeAt(r)>=128&&h("not-basic"),t.push(e.charCodeAt(r));for(let d=c>0?c+1:0;d<r;){let c=s;for(let t=1,i=o;;i+=o){d>=r&&h("invalid-input");const c=(l=e.charCodeAt(d++))-48<10?l-22:l-65<26?l-65:l-97<26?l-97:o;(c>=o||c>u((n-s)/t))&&h("overflow"),s+=c*t;const p=i<=a?1:i>=a+26?26:i-a;if(c<p)break;const f=o-p;t>u(n/f)&&h("overflow"),t*=f}const p=t.length+1;a=v(s-c,p,0==c),u(s/p)>n-i&&h("overflow"),i+=u(s/p),s%=p,t.splice(s++,0,i)}var l;return String.fromCodePoint(...t)},y=function(e){const t=[];let r=(e=p(e)).length,s=128,i=0,a=72;for(const r of e)r<128&&t.push(l(r));let c=t.length,d=c;for(c&&t.push("-");d<r;){let r=n;for(const t of e)t>=s&&t<r&&(r=t);const p=d+1;r-s>u((n-i)/p)&&h("overflow"),i+=(r-s)*p,s=r;for(const r of e)if(r<s&&++i>n&&h("overflow"),r==s){let e=i;for(let r=o;;r+=o){const n=r<=a?1:r>=a+26?26:r-a;if(e<n)break;const s=e-n,i=o-n;t.push(l(m(n+s%i,0))),e=u(s/i)}t.push(l(m(e,0))),a=v(i,p,d==c),i=0,++d}++i,++s}return t.join("")},b=function(e){return d(e,(function(e){return s.test(e)?g(e.slice(4).toLowerCase()):e}))},j=function(e){return d(e,(function(e){return i.test(e)?"xn--"+y(e):e}))},x={version:"2.1.0",ucs2:{decode:p,encode:f},decode:g,encode:y,toASCII:j,toUnicode:b}},"./node_modules/query-string/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/strict-uri-encode/index.js"),o=r("./node_modules/object-assign/index.js");function s(e,t){return t.encode?t.strict?n(e):encodeURIComponent(e):e}function i(e){return Array.isArray(e)?e.sort():"object"==typeof e?i(Object.keys(e)).sort((function(e,t){return Number(e)-Number(t)})).map((function(t){return e[t]})):e}t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e,t){var r=function(e){var t;switch(e.arrayFormat){case"index":return function(e,r,n){t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===n[e]&&(n[e]={}),n[e][t[1]]=r):n[e]=r};case"bracket":return function(e,r,n){t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==n[e]?n[e]=[].concat(n[e],r):n[e]=[r]:n[e]=r};default:return function(e,t,r){void 0!==r[e]?r[e]=[].concat(r[e],t):r[e]=t}}}(t=o({arrayFormat:"none"},t)),n=Object.create(null);return"string"!=typeof e?n:(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=t.shift(),s=t.length>0?t.join("="):void 0;s=void 0===s?null:decodeURIComponent(s),r(decodeURIComponent(o),s,n)})),Object.keys(n).sort().reduce((function(e,t){var r=n[t];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?e[t]=i(r):e[t]=r,e}),Object.create(null))):n},t.stringify=function(e,t){var r=function(e){switch(e.arrayFormat){case"index":return function(t,r,n){return null===r?[s(t,e),"[",n,"]"].join(""):[s(t,e),"[",s(n,e),"]=",s(r,e)].join("")};case"bracket":return function(t,r){return null===r?s(t,e):[s(t,e),"[]=",s(r,e)].join("")};default:return function(t,r){return null===r?s(t,e):[s(t,e),"=",s(r,e)].join("")}}}(t=o({encode:!0,strict:!0,arrayFormat:"none"},t));return e?Object.keys(e).sort().map((function(n){var o=e[n];if(void 0===o)return"";if(null===o)return s(n,t);if(Array.isArray(o)){var i=[];return o.slice().forEach((function(e){void 0!==e&&i.push(r(n,e,i.length))})),i.join("&")}return s(n,t)+"="+s(o,t)})).filter((function(e){return e.length>0})).join("&"):""}},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,o){r=r||"&",n=n||"=";var s={};if("string"!=typeof e||0===e.length)return s;var i=/\+/g;e=e.split(r);var a=1e3;o&&"number"==typeof o.maxKeys&&(a=o.maxKeys);var c=e.length;a>0&&c>a&&(c=a);for(var u=0;u<c;++u){var l,h,d,p,f=e[u].replace(i,"%20"),m=f.indexOf(n);m>=0?(l=f.substr(0,m),h=f.substr(m+1)):(l=f,h=""),d=decodeURIComponent(l),p=decodeURIComponent(h),t(s,d)?Array.isArray(s[d])?s[d].push(p):s[d]=[s[d],p]:s[d]=p}return s}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,o){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(o){var s=encodeURIComponent(t(o))+n;return Array.isArray(e[o])?e[o].map((function(e){return s+encodeURIComponent(t(e))})).join(r):s+encodeURIComponent(t(e[o]))})).join(r):o?encodeURIComponent(t(o))+n+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,r)=>{"use strict";t.decode=t.parse=r("./node_modules/querystring/decode.js"),t.encode=t.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/sort-keys/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/is-plain-obj/index.js");e.exports=function(e,t){if(!n(e))throw new TypeError("Expected a plain object");"function"==typeof(t=t||{})&&(t={compare:t});var r=t.deep,o=[],s=[],i=function(e){var a=o.indexOf(e);if(-1!==a)return s[a];var c={},u=Object.keys(e).sort(t.compare);o.push(e),s.push(c);for(var l=0;l<u.length;l++){var h=u[l],d=e[h];c[h]=r&&n(d)?i(d):d}return c};return i(e)}},"./node_modules/strict-uri-encode/index.js":e=>{"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(o){t&&t.nodeType,e&&e.nodeType;var s="object"==typeof r.g&&r.g;s.global!==s&&s.window!==s&&s.self;var i,a=2147483647,c=36,u=/^xn--/,l=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(e){throw RangeError(d[e])}function v(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function g(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+v((e=e.replace(h,".")).split("."),t).join(".")}function y(e){for(var t,r,n=[],o=0,s=e.length;o<s;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<s?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function b(e){return v(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function j(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=c)e=p(e/35);return p(n+36*e/(e+38))}function w(e){var t,r,n,o,s,i,u,l,h,d,f,v=[],g=e.length,y=0,j=128,w=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&m("not-basic"),v.push(e.charCodeAt(n));for(o=r>0?r+1:0;o<g;){for(s=y,i=1,u=c;o>=g&&m("invalid-input"),((l=(f=e.charCodeAt(o++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:c)>=c||l>p((a-y)/i))&&m("overflow"),y+=l*i,!(l<(h=u<=w?1:u>=w+26?26:u-w));u+=c)i>p(a/(d=c-h))&&m("overflow"),i*=d;w=x(y-s,t=v.length+1,0==s),p(y/t)>a-j&&m("overflow"),j+=p(y/t),y%=t,v.splice(y++,0,j)}return b(v)}function O(e){var t,r,n,o,s,i,u,l,h,d,v,g,b,w,O,_=[];for(g=(e=y(e)).length,t=128,r=0,s=72,i=0;i<g;++i)(v=e[i])<128&&_.push(f(v));for(n=o=_.length,o&&_.push("-");n<g;){for(u=a,i=0;i<g;++i)(v=e[i])>=t&&v<u&&(u=v);for(u-t>p((a-r)/(b=n+1))&&m("overflow"),r+=(u-t)*b,t=u,i=0;i<g;++i)if((v=e[i])<t&&++r>a&&m("overflow"),v==t){for(l=r,h=c;!(l<(d=h<=s?1:h>=s+26?26:h-s));h+=c)O=l-d,w=c-d,_.push(f(j(d+O%w,0))),l=p(O/w);_.push(f(j(l,0))),s=x(r,b,n==o),r=0,++n}++r,++t}return _.join("")}i={version:"1.3.2",ucs2:{decode:y,encode:b},decode:w,encode:O,toASCII:function(e){return g(e,(function(e){return l.test(e)?"xn--"+O(e):e}))},toUnicode:function(e){return g(e,(function(e){return u.test(e)?w(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return i}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/url/url.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/node_modules/punycode/punycode.js"),o=r("./node_modules/url/util.js");function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=b,t.resolve=function(e,t){return b(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?b(e,!1,!0).resolveObject(t):t},t.format=function(e){o.isString(e)&&(e=b(e));return e instanceof s?e.format():s.prototype.format.call(e)},t.Url=s;var i=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(u),h=["%","/","?",";","#"].concat(l),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},v={javascript:!0,"javascript:":!0},g={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=r("./node_modules/querystring/index.js");function b(e,t,r){if(e&&o.isObject(e)&&e instanceof s)return e;var n=new s;return n.parse(e,t,r),n}s.prototype.parse=function(e,t,r){if(!o.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var s=e.indexOf("?"),a=-1!==s&&s<e.indexOf("#")?"?":"#",u=e.split(a);u[0]=u[0].replace(/\\/g,"/");var b=e=u.join(a);if(b=b.trim(),!r&&1===e.split("#").length){var j=c.exec(b);if(j)return this.path=b,this.href=b,this.pathname=j[1],j[2]?(this.search=j[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=i.exec(b);if(x){var w=(x=x[0]).toLowerCase();this.protocol=w,b=b.substr(x.length)}if(r||x||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var O="//"===b.substr(0,2);!O||x&&v[x]||(b=b.substr(2),this.slashes=!0)}if(!v[x]&&(O||x&&!g[x])){for(var _,C,I=-1,E=0;E<d.length;E++){-1!==(A=b.indexOf(d[E]))&&(-1===I||A<I)&&(I=A)}-1!==(C=-1===I?b.lastIndexOf("@"):b.lastIndexOf("@",I))&&(_=b.slice(0,C),b=b.slice(C+1),this.auth=decodeURIComponent(_)),I=-1;for(E=0;E<h.length;E++){var A;-1!==(A=b.indexOf(h[E]))&&(-1===I||A<I)&&(I=A)}-1===I&&(I=b.length),this.host=b.slice(0,I),b=b.slice(I),this.parseHost(),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k)for(var q=this.hostname.split(/\./),S=(E=0,q.length);E<S;E++){var D=q[E];if(D&&!D.match(p)){for(var U="",R=0,N=D.length;R<N;R++)D.charCodeAt(R)>127?U+="x":U+=D[R];if(!U.match(p)){var P=q.slice(0,E),H=q.slice(E+1),F=D.match(f);F&&(P.push(F[1]),H.unshift(F[2])),H.length&&(b="/"+H.join(".")+b),this.hostname=P.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),k||(this.hostname=n.toASCII(this.hostname));var T=this.port?":"+this.port:"",L=this.hostname||"";this.host=L+T,this.href+=this.host,k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!m[w])for(E=0,S=l.length;E<S;E++){var M=l[E];if(-1!==b.indexOf(M)){var $=encodeURIComponent(M);$===M&&($=escape(M)),b=b.split(M).join($)}}var W=b.indexOf("#");-1!==W&&(this.hash=b.substr(W),b=b.slice(0,W));var z=b.indexOf("?");if(-1!==z?(this.search=b.substr(z),this.query=b.substr(z+1),t&&(this.query=y.parse(this.query)),b=b.slice(0,z)):t&&(this.search="",this.query={}),b&&(this.pathname=b),g[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){T=this.pathname||"";var B=this.search||"";this.path=T+B}return this.href=this.format(),this},s.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",s=!1,i="";this.host?s=e+this.host:this.hostname&&(s=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(i=y.stringify(this.query));var a=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||g[t])&&!1!==s?(s="//"+(s||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):s||(s=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+s+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},s.prototype.resolve=function(e){return this.resolveObject(b(e,!1,!0)).format()},s.prototype.resolveObject=function(e){if(o.isString(e)){var t=new s;t.parse(e,!1,!0),e=t}for(var r=new s,n=Object.keys(this),i=0;i<n.length;i++){var a=n[i];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),u=0;u<c.length;u++){var l=c[u];"protocol"!==l&&(r[l]=e[l])}return g[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!g[e.protocol]){for(var h=Object.keys(e),d=0;d<h.length;d++){var p=h[d];r[p]=e[p]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||v[e.protocol])r.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||"",y=r.search||"";r.path=m+y}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var b=r.pathname&&"/"===r.pathname.charAt(0),j=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=j||b||r.host&&e.pathname,w=x,O=r.pathname&&r.pathname.split("/")||[],_=(f=e.pathname&&e.pathname.split("/")||[],r.protocol&&!g[r.protocol]);if(_&&(r.hostname="",r.port=null,r.host&&(""===O[0]?O[0]=r.host:O.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),x=x&&(""===f[0]||""===O[0])),j)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,O=f;else if(f.length)O||(O=[]),O.pop(),O=O.concat(f),r.search=e.search,r.query=e.query;else if(!o.isNullOrUndefined(e.search)){if(_)r.hostname=r.host=O.shift(),(k=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=k.shift(),r.host=r.hostname=k.shift());return r.search=e.search,r.query=e.query,o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!O.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var C=O.slice(-1)[0],I=(r.host||e.host||O.length>1)&&("."===C||".."===C)||""===C,E=0,A=O.length;A>=0;A--)"."===(C=O[A])?O.splice(A,1):".."===C?(O.splice(A,1),E++):E&&(O.splice(A,1),E--);if(!x&&!w)for(;E--;E)O.unshift("..");!x||""===O[0]||O[0]&&"/"===O[0].charAt(0)||O.unshift(""),I&&"/"!==O.join("/").substr(-1)&&O.push("");var k,q=""===O[0]||O[0]&&"/"===O[0].charAt(0);_&&(r.hostname=r.host=q?"":O.length?O.shift():"",(k=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=k.shift(),r.host=r.hostname=k.shift()));return(x=x||r.host&&O.length)&&!q&&O.unshift(""),O.length?r.pathname=O.join("/"):(r.pathname=null,r.path=null),o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},s.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}}},c={};function u(e){if(c[e])return c[e].exports;var t=c[e]={id:e,loaded:!1,exports:{}},r={id:e,module:t,factory:a[e],require:u};return u.i.forEach((function(e){e(r)})),t=r.module,r.factory.call(t.exports,t,t.exports,r.require),t.loaded=!0,t.exports}u.m=a,u.c=c,u.i=[],u.d=(e,t)=>{for(var r in t)u.o(t,r)&&!u.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},u.hu=e=>e+"."+u.h()+".hot-update.js",u.miniCssF=e=>"components/"+e+"/index.css",u.hmrF=()=>u.h()+".hot-update.json",u.h=()=>"dcd66b90e1f7af264e5c",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="saif-components:",u.l=(r,n,o)=>{if(e[r])e[r].push(n);else{var s,i;if(void 0!==o)for(var a=document.getElementsByTagName("script"),c=0;c<a.length;c++){var l=a[c];if(l.getAttribute("src")==r||l.getAttribute("data-webpack")==t+o){s=l;break}}s||(i=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,u.nc&&s.setAttribute("nonce",u.nc),s.setAttribute("data-webpack",t+o),s.src=r),e[r]=[n];var h=(t,n)=>{s.onerror=s.onload=null,clearTimeout(d);var o=e[r];if(delete e[r],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(n))),t)return t(n)},d=setTimeout(h.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=h.bind(null,s.onerror),s.onload=h.bind(null,s.onload),i&&document.head.appendChild(s)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,n,o={},s=u.c,i=[],a=[],c="idle";function l(e){c=e;for(var t=0;t<a.length;t++)a[t].call(null,e)}function h(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return h(e)}))}function d(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return l("check"),u.hmrM().then((function(n){if(!n)return l(m()?"ready":"idle"),null;l("prepare");var o=[];return t=[],r=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,t){return u.hmrC[t](n.c,n.r,n.m,e,r,o),e}),[])).then((function(){return h((function(){return e?f(e):(l("ready"),o)}))}))}))}function p(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):f(e)}function f(e){e=e||{},m();var t=r.map((function(t){return t(e)}));r=void 0;var o,s=t.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return l("abort"),Promise.resolve().then((function(){throw s[0]}));l("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var i=function(e){o||(o=e)},a=[];return t.forEach((function(e){if(e.apply){var t=e.apply(i);if(t)for(var r=0;r<t.length;r++)a.push(t[r])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):n?f(e).then((function(e){return a.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(l("idle"),Promise.resolve(a))}function m(){if(n)return r||(r=[]),Object.keys(u.hmrI).forEach((function(e){n.forEach((function(t){u.hmrI[e](t,r)}))})),n=void 0,!0}u.hmrD=o,u.i.push((function(f){var m,v,g,y=f.module,b=function(r,n){var o=s[n];if(!o)return r;var a=function(t){if(o.hot.active){if(s[t]){var a=s[t].parents;-1===a.indexOf(n)&&a.push(n)}else i=[n],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),i=[];return r(t)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var d in r)Object.prototype.hasOwnProperty.call(r,d)&&"e"!==d&&Object.defineProperty(a,d,u(d));return a.e=function(e){return function(e){switch(c){case"ready":return l("prepare"),t.push(e),h((function(){l("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},a}(f.require,f.id);y.hot=(m=f.id,v=y,g={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==m,_requireSelf:function(){i=v.parents.slice(),e=m,u(m)},active:!0,accept:function(e,t){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._acceptedDependencies[e[r]]=t||function(){};else g._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._declinedDependencies[e[t]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=g._disposeHandlers.indexOf(e);t>=0&&g._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":r=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,r)})),l("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:d,apply:p,status:function(e){if(!e)return c;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:o[m]},e=void 0,g),y.parents=i,y.children=[],i=[],f.require=b})),u.hmrC={},u.hmrI={}})(),u.p="",r=(e,t,r)=>{var n=document.createElement("link");return n.rel="stylesheet",n.type="text/css",n.onload=t,n.onerror=function(t){var o=t&&t.target&&t.target.src||e,s=new Error("Loading CSS chunk "+chunkId+" failed.\n("+o+")");s.code="CSS_CHUNK_LOAD_FAILED",s.request=o,n.parentNode.removeChild(n),r(s)},n.href=e,document.getElementsByTagName("head")[0].appendChild(n),n},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(i=r[n]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var s=document.getElementsByTagName("style");for(n=0;n<s.length;n++){var i;if((o=(i=s[n]).getAttribute("data-href"))===e||o===t)return i}},o=[],s=[],i=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<s.length;e++)s[e].rel="stylesheet";s.length=0}}),u.hmrC.miniCss=(e,t,a,c,l,h)=>{l.push(i),e.forEach((e=>{var t=u.miniCssF(e),i=u.p+t;const a=n(t,i);a&&c.push(new Promise(((e,t)=>{var n=r(i,(()=>{n.as="style",n.rel="preload",e()}),t);o.push(a),s.push(n)})))}))},(()=>{var e,t,r,n,o={autocomplete:0},s={};function i(e){return new Promise(((t,r)=>{s[e]=t;var n=u.p+u.hu(e),o=new Error;u.l(n,(t=>{if(s[e]){s[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,r(o)}}))}))}function a(s){function i(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),s=o.id,i=o.chain,c=u.c[s];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var l=0;l<c.parents.length;l++){var h=c.parents[l],d=u.c[h];if(d){if(d.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([h]),moduleId:s,parentId:h};-1===t.indexOf(h)&&(d.hot._acceptedDependencies[s]?(r[h]||(r[h]=[]),a(r[h],[s])):(delete r[h],t.push(h),n.push({chain:i.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}u.f&&delete u.f.jsonpHmr,e=void 0;var c={},l=[],h={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(u.o(t,p)){var f,m=t[p],v=!1,g=!1,y=!1,b="";switch((f=m?i(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":s.onDeclined&&s.onDeclined(f),s.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+b));break;case"declined":s.onDeclined&&s.onDeclined(f),s.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+b));break;case"unaccepted":s.onUnaccepted&&s.onUnaccepted(f),s.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":s.onAccepted&&s.onAccepted(f),g=!0;break;case"disposed":s.onDisposed&&s.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(g)for(p in h[p]=m,a(l,f.outdatedModules),f.outdatedDependencies)u.o(f.outdatedDependencies,p)&&(c[p]||(c[p]=[]),a(c[p],f.outdatedDependencies[p]));y&&(a(l,[f.moduleId]),h[p]=d)}t=void 0;for(var j,x=[],w=0;w<l.length;w++){var O=l[w];u.c[O]&&u.c[O].hot._selfAccepted&&h[O]!==d&&!u.c[O].hot._selfInvalidated&&x.push({module:O,require:u.c[O].hot._requireSelf,errorHandler:u.c[O].hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var s=n.pop(),i=u.c[s];if(i){var a={},h=i.hot._disposeHandlers;for(w=0;w<h.length;w++)h[w].call(null,a);for(u.hmrD[s]=a,i.hot.active=!1,delete u.c[s],delete c[s],w=0;w<i.children.length;w++){var d=u.c[i.children[w]];d&&((e=d.parents.indexOf(s))>=0&&d.parents.splice(e,1))}}}for(var p in c)if(u.o(c,p)&&(i=u.c[p]))for(j=c[p],w=0;w<j.length;w++)t=j[w],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(e){for(var t in h)u.o(h,t)&&(u.m[t]=h[t]);for(var r=0;r<n.length;r++)n[r](u);for(var o in c)if(u.o(c,o)){var i=u.c[o];if(i){j=c[o];for(var a=[],d=[],p=0;p<j.length;p++){var f=j[p],m=i.hot._acceptedDependencies[f];if(m){if(-1!==a.indexOf(m))continue;a.push(m),d.push(f)}}for(var v=0;v<a.length;v++)try{a[v].call(null,j)}catch(t){s.onErrored&&s.onErrored({type:"accept-errored",moduleId:o,dependencyId:d[v],error:t}),s.ignoreErrored||e(t)}}}for(var g=0;g<x.length;g++){var y=x[g],b=y.module;try{y.require(b)}catch(t){if("function"==typeof y.errorHandler)try{y.errorHandler(t)}catch(r){s.onErrored&&s.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:r,originalError:t}),s.ignoreErrored||e(r),e(t)}else s.onErrored&&s.onErrored({type:"self-accept-errored",moduleId:b,error:t}),s.ignoreErrored||e(t)}}return l}}}self.webpackHotUpdatesaif_components=(e,r,o)=>{for(var i in r)u.o(r,i)&&(t[i]=r[i]);o&&n.push(o),s[e]&&(s[e](),s[e]=void 0)},u.hmrI.jsonp=function(e,o){t||(t={},n=[],r=[],o.push(a)),u.o(t,e)||(t[e]=u.m[e])},u.hmrC.jsonp=function(s,c,l,h,d,p){d.push(a),e={},r=c,t=l.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],s.forEach((function(t){u.o(o,t)&&void 0!==o[t]&&(h.push(i(t)),e[t]=!0)})),u.f&&(u.f.jsonpHmr=function(t,r){e&&!u.o(e,t)&&u.o(o,t)&&void 0!==o[t]&&(r.push(i(t)),e[t]=!0)})},u.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),u("./components/autocomplete/index.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3NhaWYtY29tcG9uZW50cy93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzLy4vY29tcG9uZW50cy9hdXRvY29tcGxldGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iai9pbmRleC5qcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzLy4vY29tcG9uZW50cy9hdXRvY29tcGxldGUvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS11cmwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3ByZXBlbmQtaHR0cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuZXM2LmpzIiwid2VicGFjazovL3NhaWYtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9xdWVyeS1zdHJpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZW5jb2RlLmpzIiwid2VicGFjazovL3NhaWYtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvc29ydC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovL3NhaWYtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9zdHJpY3QtdXJpLWVuY29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXJsL3VybC5qcyIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NhaWYtY29tcG9uZW50cy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL3NhaWYtY29tcG9uZW50cy93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL3NhaWYtY29tcG9uZW50cy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9zYWlmLWNvbXBvbmVudHMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vc2FpZi1jb21wb25lbnRzL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsIiQiLCJhdXRvY29tcGxldGUiLCJsb29rdXAiLCJhdXRvU2VsZWN0Rmlyc3QiLCJtYXhIZWlnaHQiLCJvblNlbGVjdCIsInN1Z2dlc3Rpb24iLCJjb25zb2xlIiwibG9nIiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwieCIsImNhbGwiLCJnZXRQcm90b3R5cGVPZiIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJjcmVhdGUiLCJub0RvY3VtZW50IiwiZG9jdW1lbnQiLCJmb3JFYWNoIiwiQXJyYXkiLCJub29wIiwidXBkYXRlQ3NzIiwiZWwiLCJ1cmwiLCJocmVmIiwic3BsaXQiLCJpc1VybFJlcXVlc3QiLCJpc0xvYWRlZCIsImluZGV4T2YiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJhZGRFdmVudExpc3RlbmVyIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY29uY2F0IiwiRGF0ZSIsIm5vdyIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJyZWxvYWRTdHlsZSIsInNyYyIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImxvYWRlZCIsInJldCIsInN0cmlwV1dXIiwic29tZSIsImdldFJlbG9hZFVybCIsInJlbG9hZEFsbCIsInRlc3QiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJmbiIsInRpbWUiLCJ0aW1lb3V0IiwiZ2V0U2NyaXB0U3JjIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxhc3RTY3JpcHRUYWciLCJsZW5ndGgiLCJmaWxlTWFwIiwic3BsaXRSZXN1bHQiLCJmaWxlbmFtZSIsIm1hcCIsIm1hcFJ1bGUiLCJyZWciLCJSZWdFeHAiLCJyZXBsYWNlIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9jYWxzIiwiam9pbiIsInNlbGYiLCJ0aGlzIiwiYXJncyIsImFyZ3VtZW50cyIsImZ1bmN0aW9uQ2FsbCIsImFwcGx5IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNzc1JlbG9hZCIsImlkIiwiaG90IiwiZGlzcG9zZSIsImFjY2VwdCIsInVuZGVmaW5lZCIsInB1bnljb2RlIiwicXVlcnlTdHJpbmciLCJwcmVwZW5kSHR0cCIsInNvcnRLZXlzIiwib2JqZWN0QXNzaWduIiwiREVGQVVMVF9QT1JUUyIsInNsYXNoZWRQcm90b2NvbCIsInRlc3RQYXJhbWV0ZXIiLCJuYW1lIiwiZmlsdGVycyIsImZpbHRlciIsInN0ciIsIm9wdHMiLCJub3JtYWxpemVQcm90b2NvbCIsIm5vcm1hbGl6ZUh0dHBzIiwic3RyaXBGcmFnbWVudCIsInJlbW92ZVF1ZXJ5UGFyYW1ldGVycyIsInJlbW92ZVRyYWlsaW5nU2xhc2giLCJyZW1vdmVEaXJlY3RvcnlJbmRleCIsIlR5cGVFcnJvciIsImhhc1JlbGF0aXZlUHJvdG9jb2wiLCJ0cmltIiwidXJsT2JqIiwicGFyc2UiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJFcnJvciIsImhvc3QiLCJxdWVyeSIsImhhc2giLCJwb3J0IiwiTnVtYmVyIiwiZGVjb2RlVVJJIiwiaXNBcnJheSIsInBhdGhDb21wb25lbnRzIiwic2xpY2UiLCJkb21haW4iLCJyZWxhdGl2ZSIsInJlc29sdmUiLCJ0b1VuaWNvZGUiLCJ0b0xvd2VyQ2FzZSIsInNlYXJjaCIsInF1ZXJ5UGFyYW1ldGVycyIsImtleSIsInN0cmluZ2lmeSIsImRlY29kZVVSSUNvbXBvbmVudCIsImZvcm1hdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImhhc093blByb3BlcnR5IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImkiLCJmcm9tQ2hhckNvZGUiLCJuIiwidGVzdDMiLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInMiLCJtYXhJbnQiLCJiYXNlIiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJmbG9vciIsIk1hdGgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJlcnJvciIsInR5cGUiLCJSYW5nZUVycm9yIiwibWFwRG9tYWluIiwic3RyaW5nIiwicGFydHMiLCJyZXN1bHQiLCJlbmNvZGVkIiwiYXJyYXkiLCJ1Y3MyZGVjb2RlIiwib3V0cHV0IiwiY291bnRlciIsInZhbHVlIiwiY2hhckNvZGVBdCIsImV4dHJhIiwicHVzaCIsInVjczJlbmNvZGUiLCJmcm9tQ29kZVBvaW50IiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJmbGFnIiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImsiLCJiYXNlTWludXNUTWluIiwiZGVjb2RlIiwiaW5wdXQiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJiYXNpYyIsImxhc3RJbmRleE9mIiwiaiIsImluZGV4Iiwib2xkaSIsInciLCJjb2RlUG9pbnQiLCJ0IiwiYmFzZU1pbnVzVCIsIm91dCIsInNwbGljZSIsImVuY29kZSIsImN1cnJlbnRWYWx1ZSIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJtIiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicSIsInFNaW51c1QiLCJ0b0FTQ0lJIiwic3RyaWN0VXJpRW5jb2RlIiwic3RyaWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwia2V5c1NvcnRlciIsInNvcnQiLCJhIiwiYiIsImV4dHJhY3QiLCJmb3JtYXR0ZXIiLCJhcnJheUZvcm1hdCIsImFjY3VtdWxhdG9yIiwiZXhlYyIsInBhcnNlckZvckFycmF5Rm9ybWF0IiwicGFyYW0iLCJzaGlmdCIsInJlZHVjZSIsIkJvb2xlYW4iLCJvYmoiLCJlbmNvZGVyRm9yQXJyYXlGb3JtYXQiLCJ2YWwyIiwicHJvcCIsInFzIiwic2VwIiwiZXEiLCJyZWdleHAiLCJtYXhLZXlzIiwibGVuIiwia3N0ciIsInZzdHIiLCJ2IiwiaWR4Iiwic3Vic3RyIiwic3RyaW5naWZ5UHJpbWl0aXZlIiwiaXNGaW5pdGUiLCJrcyIsImlzUGxhaW5PYmoiLCJjb21wYXJlIiwiZGVlcCIsInNlZW5JbnB1dCIsInNlZW5PdXRwdXQiLCJzZWVuSW5kZXgiLCJjIiwidG9VcHBlckNhc2UiLCJyb290Iiwibm9kZVR5cGUiLCJmcmVlR2xvYmFsIiwiZyIsImdsb2JhbCIsIndpbmRvdyIsInV0aWwiLCJVcmwiLCJzbGFzaGVzIiwiYXV0aCIsInBhdGgiLCJ1cmxQYXJzZSIsInJlc29sdmVPYmplY3QiLCJpc1N0cmluZyIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwicXVlcnlzdHJpbmciLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJpc09iamVjdCIsInUiLCJxdWVyeUluZGV4Iiwic3BsaXR0ZXIiLCJ1U3BsaXQiLCJyZXN0Iiwic2ltcGxlUGF0aCIsInByb3RvIiwibG93ZXJQcm90byIsIm1hdGNoIiwiYXRTaWduIiwiaG9zdEVuZCIsImhlYyIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsImwiLCJwYXJ0IiwibmV3cGFydCIsInZhbGlkUGFydHMiLCJub3RIb3N0IiwiYml0IiwidW5zaGlmdCIsInAiLCJoIiwiYWUiLCJlc2MiLCJlc2NhcGUiLCJxbSIsImNoYXJBdCIsInJlbCIsInRrZXlzIiwidGsiLCJ0a2V5IiwicmtleXMiLCJyayIsInJrZXkiLCJyZWxQYXRoIiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsInBvcCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiYXV0aEluSG9zdCIsImlzTnVsbCIsImxhc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJpc0Fic29sdXRlIiwiYXJnIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4ZWNPcHRpb25zIiwiZmFjdG9yeSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyZXF1aXJlIiwiaGFuZGxlciIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImh1IiwiY2h1bmtJZCIsIm1pbmlDc3NGIiwiaG1yRiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImUiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJiaW5kIiwiaGVhZCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIm5tZCIsInBhdGhzIiwiY2hpbGRyZW4iLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJibG9ja2luZ1Byb21pc2VzIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJ3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyIsImJsb2NrZXIiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsImhvdENoZWNrIiwiYXBwbHlPblVwZGF0ZSIsImhtck0iLCJ1cGRhdGUiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsInVwZGF0ZWRNb2R1bGVzIiwiaG1yQyIsInByb21pc2VzIiwiaW50ZXJuYWxBcHBseSIsImhvdEFwcGx5IiwicmVzdWx0cyIsInJlcG9ydEVycm9yIiwib3V0ZGF0ZWRNb2R1bGVzIiwibW9kdWxlcyIsImxpc3QiLCJobXJJIiwiaG1yRCIsIm1lIiwicmVxdWVzdCIsImFjdGl2ZSIsInBhcmVudHMiLCJ3YXJuIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwic2V0IiwicHJvbWlzZSIsInRyYWNrQmxvY2tpbmdQcm9taXNlIiwiY3JlYXRlUmVxdWlyZSIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsIl9yZXF1aXJlU2VsZiIsImRlcCIsImNhbGxiYWNrIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpbnZhbGlkYXRlIiwiY2hlY2siLCJzdGF0dXMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImRhdGEiLCJmdWxsaHJlZiIsInJlamVjdCIsImxpbmtUYWciLCJjb2RlIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwidGFnIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJvbGRUYWciLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCJ3YWl0aW5nVXBkYXRlUmVzb2x2ZXMiLCJsb2FkVXBkYXRlQ2h1bmsiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwibWVzc2FnZSIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsImNoYWluIiwicXVldWVJdGVtIiwicGFyZW50SWQiLCJwYXJlbnQiLCJhZGRBbGxUb1NldCIsIml0ZW0iLCJmIiwianNvbnBIbXIiLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwibmV3TW9kdWxlRmFjdG9yeSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZXJyb3JIYW5kbGVyIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiY2FsbGJhY2tzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJqc29ucCIsImZldGNoIiwicmVzcG9uc2UiLCJvayIsInN0YXR1c1RleHQiLCJqc29uIl0sIm1hcHBpbmdzIjoiO1VBQUlBLEVBQ0FDLEVDREFDLEVBbUJBQyxFQXdCQUMsRUFDQUMsRUFDQUMsRSxnSEM3QkpDLEVBQUUsc0JBQXNCQyxhQUFhLENBQ25DQyxPQWZlLENBQ2YsUUFDQSxTQUNBLFlBQ0EsVUFDQSxXQUNBLE9BQ0EsUUFDQSxRQUNBLFlBQ0EsVUFDQSxXQUtBQyxpQkFBaUIsRUFDakJDLFVBQVcsSUFDWEMsU0FBVSxTQUFVQyxHQUNsQkMsUUFBUUMsSUFBSUYsTyx3RENwQmhCLElBQUlHLEVBQVdDLE9BQU9DLFVBQVVGLFNBRWhDRyxFQUFPQyxRQUFVLFNBQVVDLEdBQzFCLElBQUlILEVBQ0osTUFBNEIsb0JBQXJCRixFQUFTTSxLQUFLRCxLQUFpRixRQUFwREgsRUFBWUQsT0FBT00sZUFBZUYsS0FBMEJILElBQWNELE9BQU9NLGVBQWUsTyxpR0NJbkosSUFBSUMsRUFBZSxFQUFRLDhFQUV2QkMsRUFBZ0JSLE9BQU9TLE9BQU8sTUFDOUJDLEVBQWlDLG9CQUFiQyxTQUNwQkMsRUFBVUMsTUFBTVosVUFBVVcsUUFrQjlCLFNBQVNFLEtBNkNULFNBQVNDLEVBQVVDLEVBQUlDLEdBQ3JCLElBQUtBLEVBQUssQ0FDUixJQUFLRCxFQUFHRSxLQUNOLE9BSUZELEVBQU1ELEVBQUdFLEtBQUtDLE1BQU0sS0FBSyxHQUczQixHQUFLQyxFQUFhSCxLQUlFLElBQWhCRCxFQUFHSyxVQU1GSixHQUFTQSxFQUFJSyxRQUFRLFNBQVcsRUFBckMsQ0FLQU4sRUFBR08sU0FBVSxFQUNiLElBQUlDLEVBQVFSLEVBQUdTLFlBQ2ZELEVBQU1ILFVBQVcsRUFDakJHLEVBQU1FLGlCQUFpQixRQUFRLFdBQzdCRixFQUFNSCxVQUFXLEVBQ2pCTCxFQUFHVyxXQUFXQyxZQUFZWixNQUU1QlEsRUFBTUUsaUJBQWlCLFNBQVMsV0FDOUJGLEVBQU1ILFVBQVcsRUFDakJMLEVBQUdXLFdBQVdDLFlBQVlaLE1BRTVCUSxFQUFNTixLQUFPLEdBQUdXLE9BQU9aLEVBQUssS0FBS1ksT0FBT0MsS0FBS0MsT0FFekNmLEVBQUdnQixZQUNMaEIsRUFBR1csV0FBV00sYUFBYVQsRUFBT1IsRUFBR2dCLGFBRXJDaEIsRUFBR1csV0FBV08sWUFBWVYsSUFtQjlCLFNBQVNXLEVBQVlDLEdBQ25CLElBQUlDLEVBQVcxQixTQUFTMkIsaUJBQWlCLFFBQ3JDQyxHQUFTLEVBcUJiLE9BcEJBM0IsRUFBUVAsS0FBS2dDLEdBQVUsU0FBVXJCLEdBQy9CLEdBQUtBLEVBQUdFLEtBQVIsQ0FJQSxJQUFJRCxFQXZCUixTQUFzQkMsRUFBTWtCLEdBQzFCLElBQUlJLEVBV0osT0FUQXRCLEVBQU9YLEVBQWFXLEVBQU0sQ0FDeEJ1QixVQUFVLElBR1pMLEVBQUlNLE1BQUssU0FBVXpCLEdBQ2JDLEVBQUtJLFFBQVFjLElBQVEsSUFDdkJJLEVBQU12QixNQUdIdUIsRUFXS0csQ0FBYTNCLEVBQUdFLEtBQU1rQixHQUUzQmhCLEVBQWFILEtBSUMsSUFBZkQsRUFBR08sU0FJSE4sSUFDRkYsRUFBVUMsRUFBSUMsR0FDZHNCLEdBQVMsT0FHTkEsRUFHVCxTQUFTSyxJQUNQLElBQUlQLEVBQVcxQixTQUFTMkIsaUJBQWlCLFFBQ3pDMUIsRUFBUVAsS0FBS2dDLEdBQVUsU0FBVXJCLElBQ1osSUFBZkEsRUFBR08sU0FJUFIsRUFBVUMsTUFJZCxTQUFTSSxFQUFhSCxHQUdwQixRQUFLLFlBQVk0QixLQUFLNUIsR0FPeEJmLEVBQU9DLFFBQVUsU0FBVTJDLEVBQVVDLEdBQ25DLEdBQUlyQyxFQUVGLE9BREFiLFFBQVFDLElBQUksOENBQ0xnQixFQUdULElBOUtnQmtDLEVBQUlDLEVBQ2hCQyxFQTZLQUMsRUE1Sk4sU0FBNkJMLEdBQzNCLElBQUlWLEVBQU01QixFQUFjc0MsR0FFeEIsSUFBS1YsRUFBSyxDQUNSLEdBQUl6QixTQUFTeUMsY0FDWGhCLEVBQU16QixTQUFTeUMsY0FBY2hCLFFBQ3hCLENBQ0wsSUFBSWlCLEVBQVUxQyxTQUFTMkMscUJBQXFCLFVBQ3hDQyxFQUFnQkYsRUFBUUEsRUFBUUcsT0FBUyxHQUV6Q0QsSUFDRm5CLEVBQU1tQixFQUFjbkIsS0FJeEI1QixFQUFjc0MsR0FBWVYsRUFHNUIsT0FBTyxTQUFVcUIsR0FDZixJQUFLckIsRUFDSCxPQUFPLEtBR1QsSUFBSXNCLEVBQWN0QixFQUFJakIsTUFBTSxrQkFDeEJ3QyxFQUFXRCxHQUFlQSxFQUFZLEdBRTFDLE9BQUtDLEdBSUFGLEVBSUVBLEVBQVF0QyxNQUFNLEtBQUt5QyxLQUFJLFNBQVVDLEdBQ3RDLElBQUlDLEVBQU0sSUFBSUMsT0FBTyxHQUFHbEMsT0FBTzhCLEVBQVUsVUFBVyxLQUNwRCxPQUFPcEQsRUFBYTZCLEVBQUk0QixRQUFRRixFQUFLLEdBQUdqQyxPQUFPZ0MsRUFBUUcsUUFBUSxjQUFlTCxHQUFXLFNBQVUsQ0FDakdsQixVQUFVLE9BVkwsQ0FBQ0wsRUFBSTRCLFFBQVEsTUFBTyxVQWlJWkMsQ0FBb0JuQixHQW9CdkMsT0FsTWdCRSxFQWdMaEIsV0FDRSxJQUFJWixFQUFNZSxFQUFhSixFQUFRWSxVQUMzQk8sRUFBVy9CLEVBQVlDLEdBRTNCLEdBQUlXLEVBQVFvQixPQUdWLE9BRkF0RSxRQUFRQyxJQUFJLHlEQUNaOEMsSUFJRXNCLEVBQ0ZyRSxRQUFRQyxJQUFJLHNCQUF1QnNDLEVBQUlnQyxLQUFLLE9BRTVDdkUsUUFBUUMsSUFBSSx3QkFDWjhDLE1BOUxnQkssRUFrTUksR0FqTXBCQyxFQUFVLEVBQ1AsV0FDTCxJQUFJbUIsRUFBT0MsS0FFUEMsRUFBT0MsVUFFUEMsRUFBZSxXQUNqQixPQUFPekIsRUFBRzBCLE1BQU1MLEVBQU1FLElBR3hCSSxhQUFhekIsR0FDYkEsRUFBVTBCLFdBQVdILEVBQWN4QixNLHFFQ3ZCakMsSUFBSTRCLEVBQVksRUFBUSwwRUFBUixDQUFzSDNFLEVBQU80RSxHQUFJLENBQUMsUUFBUyxJQUMzSjVFLEVBQU82RSxJQUFJQyxRQUFRSCxHQUNuQjNFLEVBQU82RSxJQUFJRSxZQUFPQyxFQUFXTCxJLG9HQ0xuQyxJQUFJNUQsRUFBTSxFQUFRLDZCQUNka0UsRUFBVyxFQUFRLDJDQUNuQkMsRUFBYyxFQUFRLHdDQUN0QkMsRUFBYyxFQUFRLHdDQUN0QkMsRUFBVyxFQUFRLHFDQUNuQkMsRUFBZSxFQUFRLHlDQUV2QkMsRUFBZ0IsQ0FDbkIsUUFBUyxHQUNULFNBQVUsSUFDVixPQUFRLElBSUxDLEVBQWtCLENBQ3JCLE1BQVEsRUFDUixPQUFTLEVBQ1QsS0FBTyxFQUNQLFFBQVUsRUFDVixNQUFRLEVBQ1IsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBQ1IsV0FBVyxFQUNYLFNBQVMsR0FHVixTQUFTQyxFQUFjQyxFQUFNQyxHQUM1QixPQUFPQSxFQUFRbEQsTUFBSyxTQUFVbUQsR0FDN0IsT0FBT0EsYUFBa0I5QixPQUFTOEIsRUFBT2hELEtBQUs4QyxHQUFRRSxJQUFXRixLQUluRXpGLEVBQU9DLFFBQVUsU0FBVTJGLEVBQUtDLEdBVy9CLEdBVkFBLEVBQU9SLEVBQWEsQ0FDbkJTLG1CQUFtQixFQUNuQkMsZ0JBQWdCLEVBQ2hCQyxlQUFlLEVBQ2Z6RCxVQUFVLEVBQ1YwRCxzQkFBdUIsQ0FBQyxhQUN4QkMscUJBQXFCLEVBQ3JCQyxzQkFBc0IsR0FDcEJOLEdBRWdCLGlCQUFSRCxFQUNWLE1BQU0sSUFBSVEsVUFBVSxxQkFHckIsSUFBSUMsRUFBNEMsSUFBdEJULEVBQUl4RSxRQUFRLE1BR3RDd0UsRUFBTVQsRUFBWVMsRUFBSVUsUUFBUXhDLFFBQVEsUUFBUyxXQUUvQyxJQUFJeUMsRUFBU3hGLEVBQUl5RixNQUFNWixHQU12QixHQUpJQyxFQUFLRSxnQkFBc0MsV0FBcEJRLEVBQU9FLFdBQ2pDRixFQUFPRSxTQUFXLFVBR2RGLEVBQU9HLFdBQWFILEVBQU9JLFNBQy9CLE1BQU0sSUFBSUMsTUFBTSxzQkFJVkwsRUFBT00sWUFDUE4sRUFBT08sTUFHVmpCLEVBQUtHLHNCQUNETyxFQUFPUSxLQUlmLElBQUlDLEVBQU8xQixFQUFjaUIsRUFBT0UsVUFvQmhDLEdBbkJJUSxPQUFPVixFQUFPUyxRQUFVQSxVQUNwQlQsRUFBT1MsS0FJWFQsRUFBT0ksV0FDVkosRUFBT0ksU0FBV0osRUFBT0ksU0FBUzdDLFFBQVEsVUFBVyxNQUlsRHlDLEVBQU9JLFdBQ1ZKLEVBQU9JLFNBQVdPLFVBQVVYLEVBQU9JLFlBSUYsSUFBOUJkLEVBQUtNLHVCQUNSTixFQUFLTSxxQkFBdUIsQ0FBQyxvQkFHMUJ4RixNQUFNd0csUUFBUXRCLEVBQUtNLHVCQUF5Qk4sRUFBS00scUJBQXFCN0MsT0FBUSxDQUNqRixJQUFJOEQsRUFBaUJiLEVBQU9JLFNBQVMxRixNQUFNLEtBR3ZDdUUsRUFGZ0I0QixFQUFlQSxFQUFlOUQsT0FBUyxHQUUxQnVDLEVBQUtNLHdCQUNyQ2lCLEVBQWlCQSxFQUFlQyxNQUFNLEVBQUdELEVBQWU5RCxPQUFTLEdBQ2pFaUQsRUFBT0ksU0FBV1MsRUFBZUMsTUFBTSxHQUFHbkQsS0FBSyxLQUFPLEtBS3hELEdBQUlxQixFQUFnQmdCLEVBQU9FLFVBQVcsQ0FDckMsSUFBSWEsRUFBU2YsRUFBT0UsU0FBVyxLQUFPRixFQUFPRyxTQUN6Q2EsRUFBV3hHLEVBQUl5RyxRQUFRRixFQUFRZixFQUFPSSxVQUMxQ0osRUFBT0ksU0FBV1ksRUFBU3pELFFBQVF3RCxFQUFRLElBR3hDZixFQUFPRyxXQUVWSCxFQUFPRyxTQUFXekIsRUFBU3dDLFVBQVVsQixFQUFPRyxVQUFVZ0IsY0FHdERuQixFQUFPRyxTQUFXSCxFQUFPRyxTQUFTNUMsUUFBUSxNQUFPLElBRzdDK0IsRUFBS3RELFdBQ1JnRSxFQUFPRyxTQUFXSCxFQUFPRyxTQUFTNUMsUUFBUSxTQUFVLE1BS2hDLE1BQWxCeUMsRUFBT29CLGVBQ0hwQixFQUFPb0IsT0FHZixJQUFJQyxFQUFrQjFDLEVBQVlzQixNQUFNRCxFQUFPb0IsUUFHL0MsR0FBSWhILE1BQU13RyxRQUFRdEIsRUFBS0ksdUJBQ3RCLElBQUssSUFBSTRCLEtBQU9ELEVBQ1hwQyxFQUFjcUMsRUFBS2hDLEVBQUtJLCtCQUNwQjJCLEVBQWdCQyxHQXdCMUIsT0FsQkF0QixFQUFPb0IsT0FBU3pDLEVBQVk0QyxVQUFVMUMsRUFBU3dDLElBRy9DckIsRUFBT29CLE9BQVNJLG1CQUFtQnhCLEVBQU9vQixRQUcxQy9CLEVBQU03RSxFQUFJaUgsT0FBT3pCLElBR2JWLEVBQUtLLHFCQUEyQyxNQUFwQkssRUFBT0ksWUFDdENmLEVBQU1BLEVBQUk5QixRQUFRLE1BQU8sS0FJdEJ1QyxJQUF3QlIsRUFBS0Msb0JBQ2hDRixFQUFNQSxFQUFJOUIsUUFBUSxhQUFjLE9BRzFCOEIsSSx5REN2SlIsSUFBSXFDLEVBQXdCbkksT0FBT21JLHNCQUMvQkMsRUFBaUJwSSxPQUFPQyxVQUFVbUksZUFDbENDLEVBQW1CckksT0FBT0MsVUFBVXFJLHFCQUV4QyxTQUFTQyxFQUFTQyxHQUNqQixHQUFJQSxRQUNILE1BQU0sSUFBSWxDLFVBQVUseURBR3JCLE9BQU90RyxPQUFPd0ksR0ErQ2Z0SSxFQUFPQyxRQTVDUCxXQUNDLElBQ0MsSUFBS0gsT0FBT3lJLE9BQ1gsT0FBTyxFQU1SLElBQUlDLEVBQVEsSUFBSUMsT0FBTyxPQUV2QixHQURBRCxFQUFNLEdBQUssS0FDa0MsTUFBekMxSSxPQUFPNEksb0JBQW9CRixHQUFPLEdBQ3JDLE9BQU8sRUFLUixJQURBLElBQUlHLEVBQVEsR0FDSEMsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3ZCRCxFQUFNLElBQU1GLE9BQU9JLGFBQWFELElBQU1BLEVBS3ZDLEdBQXdCLGVBSFg5SSxPQUFPNEksb0JBQW9CQyxHQUFPakYsS0FBSSxTQUFVb0YsR0FDNUQsT0FBT0gsRUFBTUcsTUFFSDVFLEtBQUssSUFDZixPQUFPLEVBSVIsSUFBSTZFLEVBQVEsR0FJWixNQUhBLHVCQUF1QjlILE1BQU0sSUFBSVAsU0FBUSxTQUFVc0ksR0FDbERELEVBQU1DLEdBQVVBLEtBR2YseUJBREVsSixPQUFPbUosS0FBS25KLE9BQU95SSxPQUFPLEdBQUlRLElBQVE3RSxLQUFLLElBTTlDLE1BQU9nRixHQUVSLE9BQU8sR0FJUUMsR0FBb0JySixPQUFPeUksT0FBUyxTQUFVYSxFQUFRQyxHQUt0RSxJQUpBLElBQUlDLEVBRUFDLEVBREFDLEVBQUtuQixFQUFTZSxHQUdUSyxFQUFJLEVBQUdBLEVBQUluRixVQUFVaEIsT0FBUW1HLElBQUssQ0FHMUMsSUFBSyxJQUFJNUIsS0FGVHlCLEVBQU94SixPQUFPd0UsVUFBVW1GLElBR25CdkIsRUFBZS9ILEtBQUttSixFQUFNekIsS0FDN0IyQixFQUFHM0IsR0FBT3lCLEVBQUt6QixJQUlqQixHQUFJSSxFQUF1QixDQUMxQnNCLEVBQVV0QixFQUFzQnFCLEdBQ2hDLElBQUssSUFBSVYsRUFBSSxFQUFHQSxFQUFJVyxFQUFRakcsT0FBUXNGLElBQy9CVCxFQUFpQmhJLEtBQUttSixFQUFNQyxFQUFRWCxNQUN2Q1ksRUFBR0QsRUFBUVgsSUFBTVUsRUFBS0MsRUFBUVgsTUFNbEMsT0FBT1ksSSx3REN2RlJ4SixFQUFPQyxRQUFVLFNBQVVjLEdBQzFCLEdBQW1CLGlCQUFSQSxFQUNWLE1BQU0sSUFBSXFGLFVBQVUsaUNBQW1DckYsR0FLeEQsT0FGQUEsRUFBTUEsRUFBSXVGLE9BRU4sNEJBQTRCM0QsS0FBSzVCLEdBQzdCQSxFQUdEQSxFQUFJK0MsUUFBUSxxQkFBc0IsYSx5TENUMUMsTUFBTTRGLEVBQVMsV0FHVEMsRUFBTyxHQVVQQyxFQUFnQixRQUNoQkMsRUFBZ0IsYUFDaEJDLEVBQWtCLDRCQUdsQkMsRUFBUyxDQUNkLFNBQVksa0RBQ1osWUFBYSxpREFDYixnQkFBaUIsaUJBS1pDLEVBQVFDLEtBQUtELE1BQ2JFLEVBQXFCekIsT0FBT0ksYUFVbEMsU0FBU3NCLEVBQU1DLEdBQ2QsTUFBTSxJQUFJQyxXQUFXTixFQUFPSyxJQThCN0IsU0FBU0UsRUFBVUMsRUFBUXpILEdBQzFCLE1BQU0wSCxFQUFRRCxFQUFPdEosTUFBTSxLQUMzQixJQUFJd0osRUFBUyxHQUNURCxFQUFNbEgsT0FBUyxJQUdsQm1ILEVBQVNELEVBQU0sR0FBSyxJQUNwQkQsRUFBU0MsRUFBTSxJQUloQixNQUNNRSxFQS9CUCxTQUFhQyxFQUFPN0gsR0FDbkIsTUFBTTJILEVBQVMsR0FDZixJQUFJbkgsRUFBU3FILEVBQU1ySCxPQUNuQixLQUFPQSxLQUNObUgsRUFBT25ILEdBQVVSLEVBQUc2SCxFQUFNckgsSUFFM0IsT0FBT21ILEVBeUJTL0csRUFGaEI2RyxFQUFTQSxFQUFPekcsUUFBUWdHLEVBQWlCLE1BQ25CN0ksTUFBTSxLQUNBNkIsR0FBSW9CLEtBQUssS0FDckMsT0FBT3VHLEVBQVNDLEVBZ0JqQixTQUFTRSxFQUFXTCxHQUNuQixNQUFNTSxFQUFTLEdBQ2YsSUFBSUMsRUFBVSxFQUNkLE1BQU14SCxFQUFTaUgsRUFBT2pILE9BQ3RCLEtBQU93SCxFQUFVeEgsR0FBUSxDQUN4QixNQUFNeUgsRUFBUVIsRUFBT1MsV0FBV0YsS0FDaEMsR0FBSUMsR0FBUyxPQUFVQSxHQUFTLE9BQVVELEVBQVV4SCxFQUFRLENBRTNELE1BQU0ySCxFQUFRVixFQUFPUyxXQUFXRixLQUNSLFFBQVgsTUFBUkcsR0FDSkosRUFBT0ssT0FBZSxLQUFSSCxJQUFrQixLQUFlLEtBQVJFLEdBQWlCLFFBSXhESixFQUFPSyxLQUFLSCxHQUNaRCxVQUdERCxFQUFPSyxLQUFLSCxHQUdkLE9BQU9GLEVBV1IsTUFBTU0sRUFBYVIsR0FBU2xDLE9BQU8yQyxpQkFBaUJULEdBbUM5Q1UsRUFBZSxTQUFTQyxFQUFPQyxHQUdwQyxPQUFPRCxFQUFRLEdBQUssSUFBTUEsRUFBUSxNQUFnQixHQUFSQyxJQUFjLElBUW5EQyxFQUFRLFNBQVNDLEVBQU9DLEVBQVdDLEdBQ3hDLElBQUlDLEVBQUksRUFHUixJQUZBSCxFQUFRRSxFQUFZM0IsRUFBTXlCLEVBMUtkLEtBMEs4QkEsR0FBUyxFQUNuREEsR0FBU3pCLEVBQU15QixFQUFRQyxHQUNPRCxFQUFRSSxJQUEyQkQsR0FBS2pDLEVBQ3JFOEIsRUFBUXpCLEVBQU15QixFQTNKTTlCLElBNkpyQixPQUFPSyxFQUFNNEIsRUFBSSxHQUFzQkgsR0FBU0EsRUFoTHBDLE1BMExQSyxFQUFTLFNBQVNDLEdBRXZCLE1BQU1sQixFQUFTLEdBQ1RtQixFQUFjRCxFQUFNekksT0FDMUIsSUFBSXNGLEVBQUksRUFDSkUsRUE1TFksSUE2TFptRCxFQTlMZSxHQW9NZkMsRUFBUUgsRUFBTUksWUFsTUQsS0FtTWJELEVBQVEsSUFDWEEsRUFBUSxHQUdULElBQUssSUFBSUUsRUFBSSxFQUFHQSxFQUFJRixJQUFTRSxFQUV4QkwsRUFBTWYsV0FBV29CLElBQU0sS0FDMUJqQyxFQUFNLGFBRVBVLEVBQU9LLEtBQUthLEVBQU1mLFdBQVdvQixJQU05QixJQUFLLElBQUlDLEVBQVFILEVBQVEsRUFBSUEsRUFBUSxFQUFJLEVBQUdHLEVBQVFMLEdBQXdDLENBTzNGLElBQUlNLEVBQU8xRCxFQUNYLElBQUssSUFBSTJELEVBQUksRUFBR1gsRUFBSWpDLEdBQTBCaUMsR0FBS2pDLEVBQU0sQ0FFcEQwQyxHQUFTTCxHQUNaN0IsRUFBTSxpQkFHUCxNQUFNbUIsR0E5RnFCa0IsRUE4RkFULEVBQU1mLFdBQVdxQixNQTdGOUIsR0FBTyxHQUNmRyxFQUFZLEdBRWhCQSxFQUFZLEdBQU8sR0FDZkEsRUFBWSxHQUVoQkEsRUFBWSxHQUFPLEdBQ2ZBLEVBQVksR0FFYjdDLEdBc0ZEMkIsR0FBUzNCLEdBQVEyQixFQUFRdEIsR0FBT04sRUFBU2QsR0FBSzJELEtBQ2pEcEMsRUFBTSxZQUdQdkIsR0FBSzBDLEVBQVFpQixFQUNiLE1BQU1FLEVBQUliLEdBQUtLLEVBN09MLEVBNk9vQkwsR0FBS0ssRUE1T3pCLE1BNE84Q0wsRUFBSUssRUFFNUQsR0FBSVgsRUFBUW1CLEVBQ1gsTUFHRCxNQUFNQyxFQUFhL0MsRUFBTzhDLEVBQ3RCRixFQUFJdkMsRUFBTU4sRUFBU2dELElBQ3RCdkMsRUFBTSxZQUdQb0MsR0FBS0csRUFJTixNQUFNQyxFQUFNOUIsRUFBT3ZILE9BQVMsRUFDNUIySSxFQUFPVCxFQUFNNUMsRUFBSTBELEVBQU1LLEVBQWEsR0FBUkwsR0FJeEJ0QyxFQUFNcEIsRUFBSStELEdBQU9qRCxFQUFTWixHQUM3QnFCLEVBQU0sWUFHUHJCLEdBQUtrQixFQUFNcEIsRUFBSStELEdBQ2YvRCxHQUFLK0QsRUFHTDlCLEVBQU8rQixPQUFPaEUsSUFBSyxFQUFHRSxHQWpJSCxJQUFTMEQsRUFxSTdCLE9BQU8vRCxPQUFPMkMsaUJBQWlCUCxJQVUxQmdDLEVBQVMsU0FBU2QsR0FDdkIsTUFBTWxCLEVBQVMsR0FNZixJQUFJbUIsR0FISkQsRUFBUW5CLEVBQVdtQixJQUdLekksT0FHcEJ3RixFQTVSWSxJQTZSWjJDLEVBQVEsRUFDUlEsRUEvUmUsR0FrU25CLElBQUssTUFBTWEsS0FBZ0JmLEVBQ3RCZSxFQUFlLEtBQ2xCakMsRUFBT0ssS0FBS2hCLEVBQW1CNEMsSUFJakMsSUFBSUMsRUFBY2xDLEVBQU92SCxPQUNyQjBKLEVBQWlCRCxFQVdyQixJQUxJQSxHQUNIbEMsRUFBT0ssS0E5U1MsS0FrVFY4QixFQUFpQmhCLEdBQWEsQ0FJcEMsSUFBSWlCLEVBQUl2RCxFQUNSLElBQUssTUFBTW9ELEtBQWdCZixFQUN0QmUsR0FBZ0JoRSxHQUFLZ0UsRUFBZUcsSUFDdkNBLEVBQUlILEdBTU4sTUFBTUksRUFBd0JGLEVBQWlCLEVBQzNDQyxFQUFJbkUsRUFBSWtCLEdBQU9OLEVBQVMrQixHQUFTeUIsSUFDcEMvQyxFQUFNLFlBR1BzQixJQUFVd0IsRUFBSW5FLEdBQUtvRSxFQUNuQnBFLEVBQUltRSxFQUVKLElBQUssTUFBTUgsS0FBZ0JmLEVBSTFCLEdBSEllLEVBQWVoRSxLQUFPMkMsRUFBUS9CLEdBQ2pDUyxFQUFNLFlBRUgyQyxHQUFnQmhFLEVBQUcsQ0FFdEIsSUFBSXFFLEVBQUkxQixFQUNSLElBQUssSUFBSUcsRUFBSWpDLEdBQTBCaUMsR0FBS2pDLEVBQU0sQ0FDakQsTUFBTThDLEVBQUliLEdBQUtLLEVBclZQLEVBcVZzQkwsR0FBS0ssRUFwVjNCLE1Bb1ZnREwsRUFBSUssRUFDNUQsR0FBSWtCLEVBQUlWLEVBQ1AsTUFFRCxNQUFNVyxFQUFVRCxFQUFJVixFQUNkQyxFQUFhL0MsRUFBTzhDLEVBQzFCNUIsRUFBT0ssS0FDTmhCLEVBQW1CbUIsRUFBYW9CLEVBQUlXLEVBQVVWLEVBQVksS0FFM0RTLEVBQUluRCxFQUFNb0QsRUFBVVYsR0FHckI3QixFQUFPSyxLQUFLaEIsRUFBbUJtQixFQUFhOEIsRUFBRyxLQUMvQ2xCLEVBQU9ULEVBQU1DLEVBQU95QixFQUF1QkYsR0FBa0JELEdBQzdEdEIsRUFBUSxJQUNOdUIsSUFJRnZCLElBQ0EzQyxFQUdILE9BQU8rQixFQUFPM0csS0FBSyxLQWNkdUQsRUFBWSxTQUFTc0UsR0FDMUIsT0FBT3pCLEVBQVV5QixHQUFPLFNBQVN4QixHQUNoQyxPQUFPWCxFQUFjakgsS0FBSzRILEdBQ3ZCdUIsRUFBT3ZCLEVBQU9sRCxNQUFNLEdBQUdLLGVBQ3ZCNkMsTUFlQzhDLEVBQVUsU0FBU3RCLEdBQ3hCLE9BQU96QixFQUFVeUIsR0FBTyxTQUFTeEIsR0FDaEMsT0FBT1YsRUFBY2xILEtBQUs0SCxHQUN2QixPQUFTc0MsRUFBT3RDLEdBQ2hCQSxNQWdDTCxFQXpCaUIsQ0FNaEIsUUFBVyxRQVFYLEtBQVEsQ0FDUCxPQUFVSyxFQUNWLE9BQVVPLEdBRVgsT0FBVVcsRUFDVixPQUFVZSxFQUNWLFFBQVdRLEVBQ1gsVUFBYTVGLEksOERDbmJkLElBQUk2RixFQUFrQixFQUFRLDZDQUMxQmpJLEVBQWUsRUFBUSx5Q0EwRjNCLFNBQVN3SCxFQUFPOUIsRUFBT2xGLEdBQ3RCLE9BQUlBLEVBQUtnSCxPQUNEaEgsRUFBSzBILE9BQVNELEVBQWdCdkMsR0FBU3lDLG1CQUFtQnpDLEdBRzNEQSxFQUdSLFNBQVMwQyxFQUFXMUIsR0FDbkIsT0FBSXBMLE1BQU13RyxRQUFRNEUsR0FDVkEsRUFBTTJCLE9BQ2MsaUJBQVYzQixFQUNWMEIsRUFBVzNOLE9BQU9tSixLQUFLOEMsSUFBUTJCLE1BQUssU0FBVUMsRUFBR0MsR0FDdkQsT0FBTzNHLE9BQU8wRyxHQUFLMUcsT0FBTzJHLE1BQ3hCbEssS0FBSSxTQUFVbUUsR0FDaEIsT0FBT2tFLEVBQU1sRSxNQUlSa0UsRUFHUjlMLEVBQVE0TixRQUFVLFNBQVVqSSxHQUMzQixPQUFPQSxFQUFJM0UsTUFBTSxLQUFLLElBQU0sSUFHN0JoQixFQUFRdUcsTUFBUSxTQUFVWixFQUFLQyxHQUc5QixJQUFJaUksRUEvRUwsU0FBOEJqSSxHQUM3QixJQUFJNEUsRUFFSixPQUFRNUUsRUFBS2tJLGFBQ1osSUFBSyxRQUNKLE9BQU8sU0FBVWxHLEVBQUtrRCxFQUFPaUQsR0FDNUJ2RCxFQUFTLGFBQWF3RCxLQUFLcEcsR0FFM0JBLEVBQU1BLEVBQUkvRCxRQUFRLFdBQVksSUFFekIyRyxRQUtvQnpGLElBQXJCZ0osRUFBWW5HLEtBQ2ZtRyxFQUFZbkcsR0FBTyxJQUdwQm1HLEVBQVluRyxHQUFLNEMsRUFBTyxJQUFNTSxHQVI3QmlELEVBQVluRyxHQUFPa0QsR0FXdEIsSUFBSyxVQUNKLE9BQU8sU0FBVWxELEVBQUtrRCxFQUFPaUQsR0FDNUJ2RCxFQUFTLFVBQVV3RCxLQUFLcEcsR0FDeEJBLEVBQU1BLEVBQUkvRCxRQUFRLFFBQVMsSUFFdEIyRyxPQUcyQnpGLElBQXJCZ0osRUFBWW5HLEdBS3ZCbUcsRUFBWW5HLEdBQU8sR0FBR2xHLE9BQU9xTSxFQUFZbkcsR0FBTWtELEdBSjlDaUQsRUFBWW5HLEdBQU8sQ0FBQ2tELEdBSHBCaUQsRUFBWW5HLEdBQU9rRCxHQVV0QixRQUNDLE9BQU8sU0FBVWxELEVBQUtrRCxFQUFPaUQsUUFDSGhKLElBQXJCZ0osRUFBWW5HLEdBS2hCbUcsRUFBWW5HLEdBQU8sR0FBR2xHLE9BQU9xTSxFQUFZbkcsR0FBTWtELEdBSjlDaUQsRUFBWW5HLEdBQU9rRCxJQXNDUG1ELENBRmhCckksRUFBT1IsRUFBYSxDQUFDMEksWUFBYSxRQUFTbEksSUFNdkN2RCxFQUFNeEMsT0FBT1MsT0FBTyxNQUV4QixNQUFtQixpQkFBUnFGLEVBQ0h0RCxHQUdSc0QsRUFBTUEsRUFBSVUsT0FBT3hDLFFBQVEsWUFBYSxNQU10QzhCLEVBQUkzRSxNQUFNLEtBQUtQLFNBQVEsU0FBVXlOLEdBQ2hDLElBQUkzRCxFQUFRMkQsRUFBTXJLLFFBQVEsTUFBTyxLQUFLN0MsTUFBTSxLQUd4QzRHLEVBQU0yQyxFQUFNNEQsUUFDWjlGLEVBQU1rQyxFQUFNbEgsT0FBUyxFQUFJa0gsRUFBTXRHLEtBQUssVUFBT2MsRUFJL0NzRCxPQUFjdEQsSUFBUnNELEVBQW9CLEtBQU9QLG1CQUFtQk8sR0FFcER3RixFQUFVL0YsbUJBQW1CRixHQUFNUyxFQUFLaEcsTUFHbEN4QyxPQUFPbUosS0FBSzNHLEdBQUtvTCxPQUFPVyxRQUFPLFNBQVU1RCxFQUFRNUMsR0FDdkQsSUFBSVMsRUFBTWhHLEVBQUl1RixHQVFkLE9BUEl5RyxRQUFRaEcsSUFBdUIsaUJBQVJBLElBQXFCM0gsTUFBTXdHLFFBQVFtQixHQUU3RG1DLEVBQU81QyxHQUFPNEYsRUFBV25GLEdBRXpCbUMsRUFBTzVDLEdBQU9TLEVBR1JtQyxJQUNMM0ssT0FBT1MsT0FBTyxRQTNCVCtCLEdBOEJUckMsRUFBUTZILFVBQVksU0FBVXlHLEVBQUsxSSxHQUNsQyxJQVFJaUksRUF6S0wsU0FBK0JqSSxHQUM5QixPQUFRQSxFQUFLa0ksYUFDWixJQUFLLFFBQ0osT0FBTyxTQUFVbEcsRUFBS2tELEVBQU9zQixHQUM1QixPQUFpQixPQUFWdEIsRUFBaUIsQ0FDdkI4QixFQUFPaEYsRUFBS2hDLEdBQ1osSUFDQXdHLEVBQ0EsS0FDQ25JLEtBQUssSUFBTSxDQUNaMkksRUFBT2hGLEVBQUtoQyxHQUNaLElBQ0FnSCxFQUFPUixFQUFPeEcsR0FDZCxLQUNBZ0gsRUFBTzlCLEVBQU9sRixJQUNiM0IsS0FBSyxLQUdULElBQUssVUFDSixPQUFPLFNBQVUyRCxFQUFLa0QsR0FDckIsT0FBaUIsT0FBVkEsRUFBaUI4QixFQUFPaEYsRUFBS2hDLEdBQVEsQ0FDM0NnSCxFQUFPaEYsRUFBS2hDLEdBQ1osTUFDQWdILEVBQU85QixFQUFPbEYsSUFDYjNCLEtBQUssS0FHVCxRQUNDLE9BQU8sU0FBVTJELEVBQUtrRCxHQUNyQixPQUFpQixPQUFWQSxFQUFpQjhCLEVBQU9oRixFQUFLaEMsR0FBUSxDQUMzQ2dILEVBQU9oRixFQUFLaEMsR0FDWixJQUNBZ0gsRUFBTzlCLEVBQU9sRixJQUNiM0IsS0FBSyxNQXdJTXNLLENBRmhCM0ksRUFBT1IsRUFOUSxDQUNkd0gsUUFBUSxFQUNSVSxRQUFRLEVBQ1JRLFlBQWEsUUFHZ0JsSSxJQUk5QixPQUFPMEksRUFBTXpPLE9BQU9tSixLQUFLc0YsR0FBS2IsT0FBT2hLLEtBQUksU0FBVW1FLEdBQ2xELElBQUlTLEVBQU1pRyxFQUFJMUcsR0FFZCxRQUFZN0MsSUFBUnNELEVBQ0gsTUFBTyxHQUdSLEdBQVksT0FBUkEsRUFDSCxPQUFPdUUsRUFBT2hGLEVBQUtoQyxHQUdwQixHQUFJbEYsTUFBTXdHLFFBQVFtQixHQUFNLENBQ3ZCLElBQUltQyxFQUFTLEdBVWIsT0FSQW5DLEVBQUlqQixRQUFRM0csU0FBUSxTQUFVK04sUUFDaEJ6SixJQUFUeUosR0FJSmhFLEVBQU9TLEtBQUs0QyxFQUFVakcsRUFBSzRHLEVBQU1oRSxFQUFPbkgsWUFHbENtSCxFQUFPdkcsS0FBSyxLQUdwQixPQUFPMkksRUFBT2hGLEVBQUtoQyxHQUFRLElBQU1nSCxFQUFPdkUsRUFBS3pDLE1BQzNDRixRQUFPLFNBQVV6RixHQUNuQixPQUFPQSxFQUFFb0QsT0FBUyxLQUNoQlksS0FBSyxLQUFPLEssd0RDakxoQixTQUFTZ0UsRUFBZXFHLEVBQUtHLEdBQzNCLE9BQU81TyxPQUFPQyxVQUFVbUksZUFBZS9ILEtBQUtvTyxFQUFLRyxHQUduRDFPLEVBQU9DLFFBQVUsU0FBUzBPLEVBQUlDLEVBQUtDLEVBQUloTSxHQUNyQytMLEVBQU1BLEdBQU8sSUFDYkMsRUFBS0EsR0FBTSxJQUNYLElBQUlOLEVBQU0sR0FFVixHQUFrQixpQkFBUEksR0FBaUMsSUFBZEEsRUFBR3JMLE9BQy9CLE9BQU9pTCxFQUdULElBQUlPLEVBQVMsTUFDYkgsRUFBS0EsRUFBRzFOLE1BQU0yTixHQUVkLElBQUlHLEVBQVUsSUFDVmxNLEdBQXNDLGlCQUFwQkEsRUFBUWtNLFVBQzVCQSxFQUFVbE0sRUFBUWtNLFNBR3BCLElBQUlDLEVBQU1MLEVBQUdyTCxPQUVUeUwsRUFBVSxHQUFLQyxFQUFNRCxJQUN2QkMsRUFBTUQsR0FHUixJQUFLLElBQUluRyxFQUFJLEVBQUdBLEVBQUlvRyxJQUFPcEcsRUFBRyxDQUM1QixJQUVJcUcsRUFBTUMsRUFBTXRELEVBQUd1RCxFQUZmalAsRUFBSXlPLEVBQUcvRixHQUFHOUUsUUFBUWdMLEVBQVEsT0FDMUJNLEVBQU1sUCxFQUFFa0IsUUFBUXlOLEdBR2hCTyxHQUFPLEdBQ1RILEVBQU8vTyxFQUFFbVAsT0FBTyxFQUFHRCxHQUNuQkYsRUFBT2hQLEVBQUVtUCxPQUFPRCxFQUFNLEtBRXRCSCxFQUFPL08sRUFDUGdQLEVBQU8sSUFHVHRELEVBQUk3RCxtQkFBbUJrSCxHQUN2QkUsRUFBSXBILG1CQUFtQm1ILEdBRWxCaEgsRUFBZXFHLEVBQUszQyxHQUVkakwsTUFBTXdHLFFBQVFvSCxFQUFJM0MsSUFDM0IyQyxFQUFJM0MsR0FBR1YsS0FBS2lFLEdBRVpaLEVBQUkzQyxHQUFLLENBQUMyQyxFQUFJM0MsR0FBSXVELEdBSmxCWixFQUFJM0MsR0FBS3VELEVBUWIsT0FBT1osSSx3REN2RFQsSUFBSWUsRUFBcUIsU0FBU0gsR0FDaEMsY0FBZUEsR0FDYixJQUFLLFNBQ0gsT0FBT0EsRUFFVCxJQUFLLFVBQ0gsT0FBT0EsRUFBSSxPQUFTLFFBRXRCLElBQUssU0FDSCxPQUFPSSxTQUFTSixHQUFLQSxFQUFJLEdBRTNCLFFBQ0UsTUFBTyxLQUliblAsRUFBT0MsUUFBVSxTQUFTc08sRUFBS0ssRUFBS0MsRUFBSXBKLEdBT3RDLE9BTkFtSixFQUFNQSxHQUFPLElBQ2JDLEVBQUtBLEdBQU0sSUFDQyxPQUFSTixJQUNGQSxPQUFNdkosR0FHVyxpQkFBUnVKLEVBQ0Z6TyxPQUFPbUosS0FBS3NGLEdBQUs3SyxLQUFJLFNBQVNrSSxHQUNuQyxJQUFJNEQsRUFBS2hDLG1CQUFtQjhCLEVBQW1CMUQsSUFBTWlELEVBQ3JELE9BQUlsTyxNQUFNd0csUUFBUW9ILEVBQUkzQyxJQUNiMkMsRUFBSTNDLEdBQUdsSSxLQUFJLFNBQVN5TCxHQUN6QixPQUFPSyxFQUFLaEMsbUJBQW1COEIsRUFBbUJILE9BQ2pEakwsS0FBSzBLLEdBRURZLEVBQUtoQyxtQkFBbUI4QixFQUFtQmYsRUFBSTNDLFFBRXZEMUgsS0FBSzBLLEdBSUxuSixFQUNFK0gsbUJBQW1COEIsRUFBbUI3SixJQUFTb0osRUFDL0NyQixtQkFBbUI4QixFQUFtQmYsSUFGM0IsSyw2REMxRHBCdE8sRUFBUTZMLE9BQVM3TCxFQUFRdUcsTUFBUSxFQUFoQix3Q0FDakJ2RyxFQUFRNE0sT0FBUzVNLEVBQVE2SCxVQUFZLEVBQXBCLHlDLDJEQ0ZqQixJQUFJMkgsRUFBYSxFQUFRLHdDQUV6QnpQLEVBQU9DLFFBQVUsU0FBVXNPLEVBQUsxSSxHQUMvQixJQUFLNEosRUFBV2xCLEdBQ2YsTUFBTSxJQUFJbkksVUFBVSwyQkFNRCxtQkFIcEJQLEVBQU9BLEdBQVEsTUFJZEEsRUFBTyxDQUFDNkosUUFBUzdKLElBR2xCLElBQUk4SixFQUFPOUosRUFBSzhKLEtBQ1pDLEVBQVksR0FDWkMsRUFBYSxHQUViekssRUFBVyxTQUFVbEYsR0FDeEIsSUFBSTRQLEVBQVlGLEVBQVV4TyxRQUFRbEIsR0FFbEMsSUFBbUIsSUFBZjRQLEVBQ0gsT0FBT0QsRUFBV0MsR0FHbkIsSUFBSXhOLEVBQU0sR0FDTjJHLEVBQU9uSixPQUFPbUosS0FBSy9JLEdBQUd3TixLQUFLN0gsRUFBSzZKLFNBRXBDRSxFQUFVMUUsS0FBS2hMLEdBQ2YyUCxFQUFXM0UsS0FBSzVJLEdBRWhCLElBQUssSUFBSXNHLEVBQUksRUFBR0EsRUFBSUssRUFBSzNGLE9BQVFzRixJQUFLLENBQ3JDLElBQUlmLEVBQU1vQixFQUFLTCxHQUNYTixFQUFNcEksRUFBRTJILEdBRVp2RixFQUFJdUYsR0FBTzhILEdBQVFGLEVBQVduSCxHQUFPbEQsRUFBU2tELEdBQU9BLEVBR3RELE9BQU9oRyxHQUdSLE9BQU84QyxFQUFTbUosSyw2REN6Q2pCdk8sRUFBT0MsUUFBVSxTQUFVMkYsR0FDMUIsT0FBTzRILG1CQUFtQjVILEdBQUs5QixRQUFRLFlBQVksU0FBVWlNLEdBQzVELE1BQU8sSUFBTUEsRUFBRS9FLFdBQVcsR0FBR25MLFNBQVMsSUFBSW1RLG1CLHVFQ0g1QyxNLFdBQ0UsU0FBU0MsR0FHc0NoUSxHQUM5Q0EsRUFBUWlRLFNBQ29DbFEsR0FDNUNBLEVBQU9rUSxTQUhULElBSUlDLEVBQThCLGlCQUFWLEVBQUFDLEdBQXNCLEVBQUFBLEVBRTdDRCxFQUFXRSxTQUFXRixHQUN0QkEsRUFBV0csU0FBV0gsR0FDdEJBLEVBQVdoTSxLQVVaLElBQUljLEVBR0p5RSxFQUFTLFdBR1RDLEVBQU8sR0FVUEMsRUFBZ0IsUUFDaEJDLEVBQWdCLGVBQ2hCQyxFQUFrQiw0QkFHbEJDLEVBQVMsQ0FDUixTQUFZLGtEQUNaLFlBQWEsaURBQ2IsZ0JBQWlCLGlCQUtsQkMsRUFBUUMsS0FBS0QsTUFDYkUsRUFBcUJ6QixPQUFPSSxhQWE1QixTQUFTc0IsRUFBTUMsR0FDZCxNQUFNQyxXQUFXTixFQUFPSyxJQVd6QixTQUFTMUcsRUFBSWlILEVBQU83SCxHQUduQixJQUZBLElBQUlRLEVBQVNxSCxFQUFNckgsT0FDZm1ILEVBQVMsR0FDTm5ILEtBQ05tSCxFQUFPbkgsR0FBVVIsRUFBRzZILEVBQU1ySCxJQUUzQixPQUFPbUgsRUFhUixTQUFTSCxFQUFVQyxFQUFRekgsR0FDMUIsSUFBSTBILEVBQVFELEVBQU90SixNQUFNLEtBQ3JCd0osRUFBUyxHQVdiLE9BVklELEVBQU1sSCxPQUFTLElBR2xCbUgsRUFBU0QsRUFBTSxHQUFLLElBQ3BCRCxFQUFTQyxFQUFNLElBTVRDLEVBRE8vRyxHQUZkNkcsRUFBU0EsRUFBT3pHLFFBQVFnRyxFQUFpQixNQUNyQjdJLE1BQU0sS0FDQTZCLEdBQUlvQixLQUFLLEtBaUJwQyxTQUFTMEcsRUFBV0wsR0FNbkIsSUFMQSxJQUdJUSxFQUNBRSxFQUpBSixFQUFTLEdBQ1RDLEVBQVUsRUFDVnhILEVBQVNpSCxFQUFPakgsT0FHYndILEVBQVV4SCxJQUNoQnlILEVBQVFSLEVBQU9TLFdBQVdGLE9BQ2IsT0FBVUMsR0FBUyxPQUFVRCxFQUFVeEgsRUFHM0IsUUFBWCxPQURiMkgsRUFBUVYsRUFBT1MsV0FBV0YsT0FFekJELEVBQU9LLE9BQWUsS0FBUkgsSUFBa0IsS0FBZSxLQUFSRSxHQUFpQixRQUl4REosRUFBT0ssS0FBS0gsR0FDWkQsS0FHREQsRUFBT0ssS0FBS0gsR0FHZCxPQUFPRixFQVdSLFNBQVNNLEVBQVdSLEdBQ25CLE9BQU9qSCxFQUFJaUgsR0FBTyxTQUFTSSxHQUMxQixJQUFJRixFQUFTLEdBT2IsT0FOSUUsRUFBUSxRQUVYRixHQUFVWCxHQURWYSxHQUFTLFNBQzhCLEdBQUssS0FBUSxPQUNwREEsRUFBUSxNQUFpQixLQUFSQSxHQUVsQkYsR0FBVVgsRUFBbUJhLE1BRTNCN0csS0FBSyxJQW9DVCxTQUFTbUgsRUFBYUMsRUFBT0MsR0FHNUIsT0FBT0QsRUFBUSxHQUFLLElBQU1BLEVBQVEsTUFBZ0IsR0FBUkMsSUFBYyxHQVF6RCxTQUFTQyxFQUFNQyxFQUFPQyxFQUFXQyxHQUNoQyxJQUFJQyxFQUFJLEVBR1IsSUFGQUgsRUFBUUUsRUFBWTNCLEVBQU15QixFQTFMcEIsS0EwTG9DQSxHQUFTLEVBQ25EQSxHQUFTekIsRUFBTXlCLEVBQVFDLEdBQ09ELEVBQVFJLElBQTJCRCxHQUFLakMsRUFDckU4QixFQUFRekIsRUFBTXlCLEVBM0tBOUIsSUE2S2YsT0FBT0ssRUFBTTRCLEVBQUksR0FBc0JILEdBQVNBLEVBaE0xQyxLQTBNUCxTQUFTSyxFQUFPQyxHQUVmLElBRUlZLEVBSUFULEVBQ0FFLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FYLEVBQ0FOLEVBQ0FtQixFQUVBQyxFQXJFaUJGLEVBc0RqQjNCLEVBQVMsR0FDVG1CLEVBQWNELEVBQU16SSxPQUVwQnNGLEVBQUksRUFDSkUsRUE3TU0sSUE4TU5tRCxFQS9NUyxHQW9PYixLQUxBQyxFQUFRSCxFQUFNSSxZQTdOSCxNQThOQyxJQUNYRCxFQUFRLEdBR0pFLEVBQUksRUFBR0EsRUFBSUYsSUFBU0UsRUFFcEJMLEVBQU1mLFdBQVdvQixJQUFNLEtBQzFCakMsRUFBTSxhQUVQVSxFQUFPSyxLQUFLYSxFQUFNZixXQUFXb0IsSUFNOUIsSUFBS0MsRUFBUUgsRUFBUSxFQUFJQSxFQUFRLEVBQUksRUFBR0csRUFBUUwsR0FBd0MsQ0FPdkYsSUFBS00sRUFBTzFELEVBQUcyRCxFQUFJLEVBQUdYLEVBQUlqQyxFQUVyQjBDLEdBQVNMLEdBQ1o3QixFQUFNLG1CQUdQbUIsR0F4R21Ca0IsRUF3R0VULEVBQU1mLFdBQVdxQixNQXZHeEIsR0FBSyxHQUNiRyxFQUFZLEdBRWhCQSxFQUFZLEdBQUssR0FDYkEsRUFBWSxHQUVoQkEsRUFBWSxHQUFLLEdBQ2JBLEVBQVksR0FFYjdDLElBZ0dRQSxHQUFRMkIsRUFBUXRCLEdBQU9OLEVBQVNkLEdBQUsyRCxLQUNqRHBDLEVBQU0sWUFHUHZCLEdBQUswQyxFQUFRaUIsSUFHVGpCLEdBRkptQixFQUFJYixHQUFLSyxFQXZRTCxFQXVRb0JMLEdBQUtLLEVBdFF6QixNQXNROENMLEVBQUlLLElBYkhMLEdBQUtqQyxFQW9CcEQ0QyxFQUFJdkMsRUFBTU4sR0FEZGdELEVBQWEvQyxFQUFPOEMsS0FFbkJ0QyxFQUFNLFlBR1BvQyxHQUFLRyxFQUtOVCxFQUFPVCxFQUFNNUMsRUFBSTBELEVBRGpCSyxFQUFNOUIsRUFBT3ZILE9BQVMsRUFDYyxHQUFSZ0osR0FJeEJ0QyxFQUFNcEIsRUFBSStELEdBQU9qRCxFQUFTWixHQUM3QnFCLEVBQU0sWUFHUHJCLEdBQUtrQixFQUFNcEIsRUFBSStELEdBQ2YvRCxHQUFLK0QsRUFHTDlCLEVBQU8rQixPQUFPaEUsSUFBSyxFQUFHRSxHQUl2QixPQUFPcUMsRUFBV04sR0FVbkIsU0FBU2dDLEVBQU9kLEdBQ2YsSUFBSWpELEVBQ0EyQyxFQUNBdUIsRUFDQUQsRUFDQWQsRUFDQUcsRUFDQWEsRUFDQUUsRUFDQXZCLEVBQ0FhLEVBQ0FLLEVBR0FkLEVBRUFrQixFQUNBUixFQUNBVSxFQU5BdkMsRUFBUyxHQW9CYixJQVJBbUIsR0FIQUQsRUFBUW5CLEVBQVdtQixJQUdDekksT0FHcEJ3RixFQXZVVSxJQXdVVjJDLEVBQVEsRUFDUlEsRUExVWEsR0E2VVJHLEVBQUksRUFBR0EsRUFBSUosSUFBZUksR0FDOUJVLEVBQWVmLEVBQU1LLElBQ0YsS0FDbEJ2QixFQUFPSyxLQUFLaEIsRUFBbUI0QyxJQWVqQyxJQVhBRSxFQUFpQkQsRUFBY2xDLEVBQU92SCxPQU1sQ3lKLEdBQ0hsQyxFQUFPSyxLQXpWRyxLQTZWSjhCLEVBQWlCaEIsR0FBYSxDQUlwQyxJQUFLaUIsRUFBSXZELEVBQVEwQyxFQUFJLEVBQUdBLEVBQUlKLElBQWVJLEdBQzFDVSxFQUFlZixFQUFNSyxLQUNEdEQsR0FBS2dFLEVBQWVHLElBQ3ZDQSxFQUFJSCxHQWNOLElBUElHLEVBQUluRSxFQUFJa0IsR0FBT04sRUFBUytCLElBRDVCeUIsRUFBd0JGLEVBQWlCLEtBRXhDN0MsRUFBTSxZQUdQc0IsSUFBVXdCLEVBQUluRSxHQUFLb0UsRUFDbkJwRSxFQUFJbUUsRUFFQ2IsRUFBSSxFQUFHQSxFQUFJSixJQUFlSSxFQU85QixJQU5BVSxFQUFlZixFQUFNSyxJQUVGdEQsS0FBTzJDLEVBQVEvQixHQUNqQ1MsRUFBTSxZQUdIMkMsR0FBZ0JoRSxFQUFHLENBRXRCLElBQUtxRSxFQUFJMUIsRUFBT0csRUFBSWpDLElBRWZ3RCxHQURKVixFQUFJYixHQUFLSyxFQWxZUCxFQWtZc0JMLEdBQUtLLEVBalkzQixNQWlZZ0RMLEVBQUlLLElBRFRMLEdBQUtqQyxFQUtsRHlELEVBQVVELEVBQUlWLEVBQ2RDLEVBQWEvQyxFQUFPOEMsRUFDcEI1QixFQUFPSyxLQUNOaEIsRUFBbUJtQixFQUFhb0IsRUFBSVcsRUFBVVYsRUFBWSxLQUUzRFMsRUFBSW5ELEVBQU1vRCxFQUFVVixHQUdyQjdCLEVBQU9LLEtBQUtoQixFQUFtQm1CLEVBQWE4QixFQUFHLEtBQy9DbEIsRUFBT1QsRUFBTUMsRUFBT3lCLEVBQXVCRixHQUFrQkQsR0FDN0R0QixFQUFRLElBQ051QixJQUlGdkIsSUFDQTNDLEVBR0gsT0FBTytCLEVBQU8zRyxLQUFLLElBNENwQmUsRUFBVyxDQU1WLFFBQVcsUUFRWCxLQUFRLENBQ1AsT0FBVTJGLEVBQ1YsT0FBVU8sR0FFWCxPQUFVVyxFQUNWLE9BQVVlLEVBQ1YsUUEvQkQsU0FBaUJkLEdBQ2hCLE9BQU96QixFQUFVeUIsR0FBTyxTQUFTeEIsR0FDaEMsT0FBT1YsRUFBY2xILEtBQUs0SCxHQUN2QixPQUFTc0MsRUFBT3RDLEdBQ2hCQSxNQTRCSixVQW5ERCxTQUFtQndCLEdBQ2xCLE9BQU96QixFQUFVeUIsR0FBTyxTQUFTeEIsR0FDaEMsT0FBT1gsRUFBY2pILEtBQUs0SCxHQUN2QnVCLEVBQU92QixFQUFPbEQsTUFBTSxHQUFHSyxlQUN2QjZDLFlBNERILEtBRkQsYUFDQyxPQUFPdEYsR0FDUCw4QkFuZ0JGLEksbURDc0JELElBQUlBLEVBQVcsRUFBUSx3REFDbkJzTCxFQUFPLEVBQVEsOEJBU25CLFNBQVNDLElBQ1BwTSxLQUFLcUMsU0FBVyxLQUNoQnJDLEtBQUtxTSxRQUFVLEtBQ2ZyTSxLQUFLc00sS0FBTyxLQUNadE0sS0FBS3lDLEtBQU8sS0FDWnpDLEtBQUs0QyxLQUFPLEtBQ1o1QyxLQUFLc0MsU0FBVyxLQUNoQnRDLEtBQUsyQyxLQUFPLEtBQ1ozQyxLQUFLdUQsT0FBUyxLQUNkdkQsS0FBSzBDLE1BQVEsS0FDYjFDLEtBQUt1QyxTQUFXLEtBQ2hCdkMsS0FBS3VNLEtBQU8sS0FDWnZNLEtBQUtwRCxLQUFPLEtBbkJkZixFQUFRdUcsTUFBUW9LLEVBQ2hCM1EsRUFBUXVILFFBMFpSLFNBQW9CNkIsRUFBUTlCLEdBQzFCLE9BQU9xSixFQUFTdkgsR0FBUSxHQUFPLEdBQU03QixRQUFRRCxJQTFaL0N0SCxFQUFRNFEsY0FpYVIsU0FBMEJ4SCxFQUFROUIsR0FDaEMsT0FBSzhCLEVBQ0V1SCxFQUFTdkgsR0FBUSxHQUFPLEdBQU13SCxjQUFjdEosR0FEL0JBLEdBamF0QnRILEVBQVErSCxPQXNWUixTQUFtQnVHLEdBS2JnQyxFQUFLTyxTQUFTdkMsS0FBTUEsRUFBTXFDLEVBQVNyQyxJQUN2QyxPQUFNQSxhQUFlaUMsRUFDZGpDLEVBQUl2RyxTQUR1QndJLEVBQUl6USxVQUFVaUksT0FBTzdILEtBQUtvTyxJQTFWOUR0TyxFQUFRdVEsSUFBTUEsRUFxQmQsSUFBSU8sRUFBa0Isb0JBQ2xCQyxFQUFjLFdBR2RDLEVBQW9CLHFDQU9wQkMsRUFBUyxDQUFDLElBQUssSUFBSyxJQUFLLEtBQU0sSUFBSyxLQUFLdlAsT0FIaEMsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FBTSxLQUFNLE9BTS9Dd1AsRUFBYSxDQUFDLEtBQU14UCxPQUFPdVAsR0FLM0JFLEVBQWUsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQUt6UCxPQUFPd1AsR0FDaERFLEVBQWtCLENBQUMsSUFBSyxJQUFLLEtBRTdCQyxFQUFzQix5QkFDdEJDLEVBQW9CLCtCQUVwQkMsRUFBaUIsQ0FDZixZQUFjLEVBQ2QsZUFBZSxHQUdqQkMsRUFBbUIsQ0FDakIsWUFBYyxFQUNkLGVBQWUsR0FHakJsTSxFQUFrQixDQUNoQixNQUFRLEVBQ1IsT0FBUyxFQUNULEtBQU8sRUFDUCxRQUFVLEVBQ1YsTUFBUSxFQUNSLFNBQVMsRUFDVCxVQUFVLEVBQ1YsUUFBUSxFQUNSLFdBQVcsRUFDWCxTQUFTLEdBRVhtTSxFQUFjLEVBQVEsdUNBRTFCLFNBQVNkLEVBQVM3UCxFQUFLNFEsRUFBa0JDLEdBQ3ZDLEdBQUk3USxHQUFPd1AsRUFBS3NCLFNBQVM5USxJQUFRQSxhQUFleVAsRUFBSyxPQUFPelAsRUFFNUQsSUFBSStRLEVBQUksSUFBSXRCLEVBRVosT0FEQXNCLEVBQUV0TCxNQUFNekYsRUFBSzRRLEVBQWtCQyxHQUN4QkUsRUFHVHRCLEVBQUl6USxVQUFVeUcsTUFBUSxTQUFTekYsRUFBSzRRLEVBQWtCQyxHQUNwRCxJQUFLckIsRUFBS08sU0FBUy9QLEdBQ2pCLE1BQU0sSUFBSXFGLFVBQVUsZ0RBQWtEckYsR0FNeEUsSUFBSWdSLEVBQWFoUixFQUFJSyxRQUFRLEtBQ3pCNFEsR0FDcUIsSUFBaEJELEdBQXFCQSxFQUFhaFIsRUFBSUssUUFBUSxLQUFRLElBQU0sSUFDakU2USxFQUFTbFIsRUFBSUUsTUFBTStRLEdBRXZCQyxFQUFPLEdBQUtBLEVBQU8sR0FBR25PLFFBREwsTUFDeUIsS0FHMUMsSUFBSW9PLEVBRkpuUixFQUFNa1IsRUFBTy9OLEtBQUs4TixHQVFsQixHQUZBRSxFQUFPQSxFQUFLNUwsUUFFUHNMLEdBQStDLElBQTFCN1EsRUFBSUUsTUFBTSxLQUFLcUMsT0FBYyxDQUVyRCxJQUFJNk8sRUFBYWxCLEVBQWtCaEQsS0FBS2lFLEdBQ3hDLEdBQUlDLEVBZUYsT0FkQS9OLEtBQUt1TSxLQUFPdUIsRUFDWjlOLEtBQUtwRCxLQUFPa1IsRUFDWjlOLEtBQUt1QyxTQUFXd0wsRUFBVyxHQUN2QkEsRUFBVyxJQUNiL04sS0FBS3VELE9BQVN3SyxFQUFXLEdBRXZCL04sS0FBSzBDLE1BREg2SyxFQUNXRCxFQUFZbEwsTUFBTXBDLEtBQUt1RCxPQUFPMEgsT0FBTyxJQUVyQ2pMLEtBQUt1RCxPQUFPMEgsT0FBTyxJQUV6QnNDLElBQ1R2TixLQUFLdUQsT0FBUyxHQUNkdkQsS0FBSzBDLE1BQVEsSUFFUjFDLEtBSVgsSUFBSWdPLEVBQVFyQixFQUFnQjlDLEtBQUtpRSxHQUNqQyxHQUFJRSxFQUFPLENBRVQsSUFBSUMsR0FESkQsRUFBUUEsRUFBTSxJQUNTMUssY0FDdkJ0RCxLQUFLcUMsU0FBVzRMLEVBQ2hCSCxFQUFPQSxFQUFLN0MsT0FBTytDLEVBQU05TyxRQU8zQixHQUFJc08sR0FBcUJRLEdBQVNGLEVBQUtJLE1BQU0sd0JBQXlCLENBQ3BFLElBQUk3QixFQUFnQyxPQUF0QnlCLEVBQUs3QyxPQUFPLEVBQUcsSUFDekJvQixHQUFhMkIsR0FBU1gsRUFBaUJXLEtBQ3pDRixFQUFPQSxFQUFLN0MsT0FBTyxHQUNuQmpMLEtBQUtxTSxTQUFVLEdBSW5CLElBQUtnQixFQUFpQlcsS0FDakIzQixHQUFZMkIsSUFBVTdNLEVBQWdCNk0sSUFBVSxDQW1CbkQsSUFEQSxJQVNJMUIsRUFBTTZCLEVBVE5DLEdBQVcsRUFDTjVKLEVBQUksRUFBR0EsRUFBSXlJLEVBQWdCL04sT0FBUXNGLElBQUssRUFFbEMsS0FEVDZKLEVBQU1QLEVBQUs5USxRQUFRaVEsRUFBZ0J6SSxRQUNQLElBQWI0SixHQUFrQkMsRUFBTUQsS0FDekNBLEVBQVVDLElBaUJFLEtBVGRGLEdBRmUsSUFBYkMsRUFFT04sRUFBSy9GLFlBQVksS0FJakIrRixFQUFLL0YsWUFBWSxJQUFLcUcsTUFNL0I5QixFQUFPd0IsRUFBSzdLLE1BQU0sRUFBR2tMLEdBQ3JCTCxFQUFPQSxFQUFLN0ssTUFBTWtMLEVBQVMsR0FDM0JuTyxLQUFLc00sS0FBTzNJLG1CQUFtQjJJLElBSWpDOEIsR0FBVyxFQUNYLElBQVM1SixFQUFJLEVBQUdBLEVBQUl3SSxFQUFhOU4sT0FBUXNGLElBQUssQ0FDNUMsSUFBSTZKLEdBQ1MsS0FEVEEsRUFBTVAsRUFBSzlRLFFBQVFnUSxFQUFheEksUUFDSixJQUFiNEosR0FBa0JDLEVBQU1ELEtBQ3pDQSxFQUFVQyxJQUdHLElBQWJELElBQ0ZBLEVBQVVOLEVBQUs1TyxRQUVqQmMsS0FBS3lDLEtBQU9xTCxFQUFLN0ssTUFBTSxFQUFHbUwsR0FDMUJOLEVBQU9BLEVBQUs3SyxNQUFNbUwsR0FHbEJwTyxLQUFLc08sWUFJTHRPLEtBQUtzQyxTQUFXdEMsS0FBS3NDLFVBQVksR0FJakMsSUFBSWlNLEVBQW9DLE1BQXJCdk8sS0FBS3NDLFNBQVMsSUFDZSxNQUE1Q3RDLEtBQUtzQyxTQUFTdEMsS0FBS3NDLFNBQVNwRCxPQUFTLEdBR3pDLElBQUtxUCxFQUVILElBREEsSUFBSUMsRUFBWXhPLEtBQUtzQyxTQUFTekYsTUFBTSxNQUNwQjRSLEdBQVBqSyxFQUFJLEVBQU9nSyxFQUFVdFAsUUFBUXNGLEVBQUlpSyxFQUFHakssSUFBSyxDQUNoRCxJQUFJa0ssRUFBT0YsRUFBVWhLLEdBQ3JCLEdBQUtrSyxJQUNBQSxFQUFLUixNQUFNaEIsR0FBc0IsQ0FFcEMsSUFEQSxJQUFJeUIsRUFBVSxHQUNMM0csRUFBSSxFQUFHUixFQUFJa0gsRUFBS3hQLE9BQVE4SSxFQUFJUixFQUFHUSxJQUNsQzBHLEVBQUs5SCxXQUFXb0IsR0FBSyxJQUl2QjJHLEdBQVcsSUFFWEEsR0FBV0QsRUFBSzFHLEdBSXBCLElBQUsyRyxFQUFRVCxNQUFNaEIsR0FBc0IsQ0FDdkMsSUFBSTBCLEVBQWFKLEVBQVV2TCxNQUFNLEVBQUd1QixHQUNoQ3FLLEVBQVVMLEVBQVV2TCxNQUFNdUIsRUFBSSxHQUM5QnNLLEVBQU1KLEVBQUtSLE1BQU1mLEdBQ2pCMkIsSUFDRkYsRUFBVzlILEtBQUtnSSxFQUFJLElBQ3BCRCxFQUFRRSxRQUFRRCxFQUFJLEtBRWxCRCxFQUFRM1AsU0FDVjRPLEVBQU8sSUFBTWUsRUFBUS9PLEtBQUssS0FBT2dPLEdBRW5DOU4sS0FBS3NDLFNBQVdzTSxFQUFXOU8sS0FBSyxLQUNoQyxRQU1KRSxLQUFLc0MsU0FBU3BELE9Bak5ELElBa05mYyxLQUFLc0MsU0FBVyxHQUdoQnRDLEtBQUtzQyxTQUFXdEMsS0FBS3NDLFNBQVNnQixjQUczQmlMLElBS0h2TyxLQUFLc0MsU0FBV3pCLEVBQVNvSSxRQUFRakosS0FBS3NDLFdBR3hDLElBQUkwTSxFQUFJaFAsS0FBSzRDLEtBQU8sSUFBTTVDLEtBQUs0QyxLQUFPLEdBQ2xDcU0sRUFBSWpQLEtBQUtzQyxVQUFZLEdBQ3pCdEMsS0FBS3lDLEtBQU93TSxFQUFJRCxFQUNoQmhQLEtBQUtwRCxNQUFRb0QsS0FBS3lDLEtBSWQ4TCxJQUNGdk8sS0FBS3NDLFNBQVd0QyxLQUFLc0MsU0FBUzJJLE9BQU8sRUFBR2pMLEtBQUtzQyxTQUFTcEQsT0FBUyxHQUMvQyxNQUFaNE8sRUFBSyxLQUNQQSxFQUFPLElBQU1BLElBT25CLElBQUtWLEVBQWVhLEdBS2xCLElBQVN6SixFQUFJLEVBQUdpSyxFQUFJMUIsRUFBVzdOLE9BQVFzRixFQUFJaUssRUFBR2pLLElBQUssQ0FDakQsSUFBSTBLLEVBQUtuQyxFQUFXdkksR0FDcEIsSUFBMEIsSUFBdEJzSixFQUFLOVEsUUFBUWtTLEdBQWpCLENBRUEsSUFBSUMsRUFBTS9GLG1CQUFtQjhGLEdBQ3pCQyxJQUFRRCxJQUNWQyxFQUFNQyxPQUFPRixJQUVmcEIsRUFBT0EsRUFBS2pSLE1BQU1xUyxHQUFJcFAsS0FBS3FQLElBTS9CLElBQUl4TSxFQUFPbUwsRUFBSzlRLFFBQVEsTUFDVixJQUFWMkYsSUFFRjNDLEtBQUsyQyxLQUFPbUwsRUFBSzdDLE9BQU90SSxHQUN4Qm1MLEVBQU9BLEVBQUs3SyxNQUFNLEVBQUdOLElBRXZCLElBQUkwTSxFQUFLdkIsRUFBSzlRLFFBQVEsS0FvQnRCLElBbkJZLElBQVJxUyxHQUNGclAsS0FBS3VELE9BQVN1SyxFQUFLN0MsT0FBT29FLEdBQzFCclAsS0FBSzBDLE1BQVFvTCxFQUFLN0MsT0FBT29FLEVBQUssR0FDMUI5QixJQUNGdk4sS0FBSzBDLE1BQVE0SyxFQUFZbEwsTUFBTXBDLEtBQUswQyxRQUV0Q29MLEVBQU9BLEVBQUs3SyxNQUFNLEVBQUdvTSxJQUNaOUIsSUFFVHZOLEtBQUt1RCxPQUFTLEdBQ2R2RCxLQUFLMEMsTUFBUSxJQUVYb0wsSUFBTTlOLEtBQUt1QyxTQUFXdUwsR0FDdEIzTSxFQUFnQjhNLElBQ2hCak8sS0FBS3NDLFdBQWF0QyxLQUFLdUMsV0FDekJ2QyxLQUFLdUMsU0FBVyxLQUlkdkMsS0FBS3VDLFVBQVl2QyxLQUFLdUQsT0FBUSxDQUM1QnlMLEVBQUloUCxLQUFLdUMsVUFBWSxHQUF6QixJQUNJOEMsRUFBSXJGLEtBQUt1RCxRQUFVLEdBQ3ZCdkQsS0FBS3VNLEtBQU95QyxFQUFJM0osRUFLbEIsT0FEQXJGLEtBQUtwRCxLQUFPb0QsS0FBSzRELFNBQ1Y1RCxNQWNUb00sRUFBSXpRLFVBQVVpSSxPQUFTLFdBQ3JCLElBQUkwSSxFQUFPdE0sS0FBS3NNLE1BQVEsR0FDcEJBLElBRUZBLEdBREFBLEVBQU9sRCxtQkFBbUJrRCxJQUNkNU0sUUFBUSxPQUFRLEtBQzVCNE0sR0FBUSxLQUdWLElBQUlqSyxFQUFXckMsS0FBS3FDLFVBQVksR0FDNUJFLEVBQVd2QyxLQUFLdUMsVUFBWSxHQUM1QkksRUFBTzNDLEtBQUsyQyxNQUFRLEdBQ3BCRixHQUFPLEVBQ1BDLEVBQVEsR0FFUjFDLEtBQUt5QyxLQUNQQSxFQUFPNkosRUFBT3RNLEtBQUt5QyxLQUNWekMsS0FBS3NDLFdBQ2RHLEVBQU82SixJQUF3QyxJQUFoQ3RNLEtBQUtzQyxTQUFTdEYsUUFBUSxLQUNqQ2dELEtBQUtzQyxTQUNMLElBQU10QyxLQUFLc0MsU0FBVyxLQUN0QnRDLEtBQUs0QyxPQUNQSCxHQUFRLElBQU16QyxLQUFLNEMsT0FJbkI1QyxLQUFLMEMsT0FDTHlKLEVBQUtzQixTQUFTek4sS0FBSzBDLFFBQ25CaEgsT0FBT21KLEtBQUs3RSxLQUFLMEMsT0FBT3hELFNBQzFCd0QsRUFBUTRLLEVBQVk1SixVQUFVMUQsS0FBSzBDLFFBR3JDLElBQUlhLEVBQVN2RCxLQUFLdUQsUUFBV2IsR0FBVSxJQUFNQSxHQUFXLEdBc0J4RCxPQXBCSUwsR0FBb0MsTUFBeEJBLEVBQVM0SSxRQUFRLEtBQVk1SSxHQUFZLEtBSXJEckMsS0FBS3FNLFdBQ0hoSyxHQUFZbEIsRUFBZ0JrQixNQUF1QixJQUFUSSxHQUM5Q0EsRUFBTyxNQUFRQSxHQUFRLElBQ25CRixHQUFtQyxNQUF2QkEsRUFBUytNLE9BQU8sS0FBWS9NLEVBQVcsSUFBTUEsSUFDbkRFLElBQ1ZBLEVBQU8sSUFHTEUsR0FBMkIsTUFBbkJBLEVBQUsyTSxPQUFPLEtBQVkzTSxFQUFPLElBQU1BLEdBQzdDWSxHQUErQixNQUFyQkEsRUFBTytMLE9BQU8sS0FBWS9MLEVBQVMsSUFBTUEsR0FPaERsQixFQUFXSSxHQUxsQkYsRUFBV0EsRUFBUzdDLFFBQVEsU0FBUyxTQUFTd08sR0FDNUMsT0FBTzlFLG1CQUFtQjhFLFFBRTVCM0ssRUFBU0EsRUFBTzdELFFBQVEsSUFBSyxRQUVnQmlELEdBTy9DeUosRUFBSXpRLFVBQVV5SCxRQUFVLFNBQVNELEdBQy9CLE9BQU9uRCxLQUFLeU0sY0FBY0QsRUFBU3JKLEdBQVUsR0FBTyxJQUFPUyxVQVE3RHdJLEVBQUl6USxVQUFVOFEsY0FBZ0IsU0FBU3RKLEdBQ3JDLEdBQUlnSixFQUFLTyxTQUFTdkosR0FBVyxDQUMzQixJQUFJb00sRUFBTSxJQUFJbkQsRUFDZG1ELEVBQUluTixNQUFNZSxHQUFVLEdBQU8sR0FDM0JBLEVBQVdvTSxFQUtiLElBRkEsSUFBSWxKLEVBQVMsSUFBSStGLEVBQ2JvRCxFQUFROVQsT0FBT21KLEtBQUs3RSxNQUNmeVAsRUFBSyxFQUFHQSxFQUFLRCxFQUFNdFEsT0FBUXVRLElBQU0sQ0FDeEMsSUFBSUMsRUFBT0YsRUFBTUMsR0FDakJwSixFQUFPcUosR0FBUTFQLEtBQUswUCxHQVF0QixHQUhBckosRUFBTzFELEtBQU9RLEVBQVNSLEtBR0QsS0FBbEJRLEVBQVN2RyxLQUVYLE9BREF5SixFQUFPekosS0FBT3lKLEVBQU96QyxTQUNkeUMsRUFJVCxHQUFJbEQsRUFBU2tKLFVBQVlsSixFQUFTZCxTQUFVLENBRzFDLElBREEsSUFBSXNOLEVBQVFqVSxPQUFPbUosS0FBSzFCLEdBQ2Z5TSxFQUFLLEVBQUdBLEVBQUtELEVBQU16USxPQUFRMFEsSUFBTSxDQUN4QyxJQUFJQyxFQUFPRixFQUFNQyxHQUNKLGFBQVRDLElBQ0Z4SixFQUFPd0osR0FBUTFNLEVBQVMwTSxJQVU1QixPQU5JMU8sRUFBZ0JrRixFQUFPaEUsV0FDdkJnRSxFQUFPL0QsV0FBYStELEVBQU85RCxXQUM3QjhELEVBQU9rRyxLQUFPbEcsRUFBTzlELFNBQVcsS0FHbEM4RCxFQUFPekosS0FBT3lKLEVBQU96QyxTQUNkeUMsRUFHVCxHQUFJbEQsRUFBU2QsVUFBWWMsRUFBU2QsV0FBYWdFLEVBQU9oRSxTQUFVLENBUzlELElBQUtsQixFQUFnQmdDLEVBQVNkLFVBQVcsQ0FFdkMsSUFEQSxJQUFJd0MsRUFBT25KLE9BQU9tSixLQUFLMUIsR0FDZDRILEVBQUksRUFBR0EsRUFBSWxHLEVBQUszRixPQUFRNkwsSUFBSyxDQUNwQyxJQUFJdkQsRUFBSTNDLEVBQUtrRyxHQUNiMUUsRUFBT21CLEdBQUtyRSxFQUFTcUUsR0FHdkIsT0FEQW5CLEVBQU96SixLQUFPeUosRUFBT3pDLFNBQ2R5QyxFQUlULEdBREFBLEVBQU9oRSxTQUFXYyxFQUFTZCxTQUN0QmMsRUFBU1YsTUFBUzRLLEVBQWlCbEssRUFBU2QsVUFTL0NnRSxFQUFPOUQsU0FBV1ksRUFBU1osYUFUK0IsQ0FFMUQsSUFEQSxJQUFJdU4sR0FBVzNNLEVBQVNaLFVBQVksSUFBSTFGLE1BQU0sS0FDdkNpVCxFQUFRNVEsVUFBWWlFLEVBQVNWLEtBQU9xTixFQUFROUYsV0FDOUM3RyxFQUFTVixPQUFNVSxFQUFTVixLQUFPLElBQy9CVSxFQUFTYixXQUFVYSxFQUFTYixTQUFXLElBQ3pCLEtBQWZ3TixFQUFRLElBQVdBLEVBQVFmLFFBQVEsSUFDbkNlLEVBQVE1USxPQUFTLEdBQUc0USxFQUFRZixRQUFRLElBQ3hDMUksRUFBTzlELFNBQVd1TixFQUFRaFEsS0FBSyxLQVdqQyxHQVBBdUcsRUFBTzlDLE9BQVNKLEVBQVNJLE9BQ3pCOEMsRUFBTzNELE1BQVFTLEVBQVNULE1BQ3hCMkQsRUFBTzVELEtBQU9VLEVBQVNWLE1BQVEsR0FDL0I0RCxFQUFPaUcsS0FBT25KLEVBQVNtSixLQUN2QmpHLEVBQU8vRCxTQUFXYSxFQUFTYixVQUFZYSxFQUFTVixLQUNoRDRELEVBQU96RCxLQUFPTyxFQUFTUCxLQUVuQnlELEVBQU85RCxVQUFZOEQsRUFBTzlDLE9BQVEsQ0FDcEMsSUFBSXlMLEVBQUkzSSxFQUFPOUQsVUFBWSxHQUN2QjhDLEVBQUlnQixFQUFPOUMsUUFBVSxHQUN6QjhDLEVBQU9rRyxLQUFPeUMsRUFBSTNKLEVBSXBCLE9BRkFnQixFQUFPZ0csUUFBVWhHLEVBQU9nRyxTQUFXbEosRUFBU2tKLFFBQzVDaEcsRUFBT3pKLEtBQU95SixFQUFPekMsU0FDZHlDLEVBR1QsSUFBSTBKLEVBQWUxSixFQUFPOUQsVUFBMEMsTUFBOUI4RCxFQUFPOUQsU0FBUytNLE9BQU8sR0FDekRVLEVBQ0k3TSxFQUFTVixNQUNUVSxFQUFTWixVQUE0QyxNQUFoQ1ksRUFBU1osU0FBUytNLE9BQU8sR0FFbERXLEVBQWNELEdBQVlELEdBQ1gxSixFQUFPNUQsTUFBUVUsRUFBU1osU0FDdkMyTixFQUFnQkQsRUFDaEJFLEVBQVU5SixFQUFPOUQsVUFBWThELEVBQU85RCxTQUFTMUYsTUFBTSxNQUFRLEdBRTNEdVQsR0FEQU4sRUFBVTNNLEVBQVNaLFVBQVlZLEVBQVNaLFNBQVMxRixNQUFNLE1BQVEsR0FDbkR3SixFQUFPaEUsV0FBYWxCLEVBQWdCa0YsRUFBT2hFLFdBMkIzRCxHQXBCSStOLElBQ0YvSixFQUFPL0QsU0FBVyxHQUNsQitELEVBQU96RCxLQUFPLEtBQ1Z5RCxFQUFPNUQsT0FDVSxLQUFmME4sRUFBUSxHQUFXQSxFQUFRLEdBQUs5SixFQUFPNUQsS0FDdEMwTixFQUFRcEIsUUFBUTFJLEVBQU81RCxPQUU5QjRELEVBQU81RCxLQUFPLEdBQ1ZVLEVBQVNkLFdBQ1hjLEVBQVNiLFNBQVcsS0FDcEJhLEVBQVNQLEtBQU8sS0FDWk8sRUFBU1YsT0FDUSxLQUFmcU4sRUFBUSxHQUFXQSxFQUFRLEdBQUszTSxFQUFTVixLQUN4Q3FOLEVBQVFmLFFBQVE1TCxFQUFTVixPQUVoQ1UsRUFBU1YsS0FBTyxNQUVsQndOLEVBQWFBLElBQThCLEtBQWZILEVBQVEsSUFBNEIsS0FBZkssRUFBUSxLQUd2REgsRUFFRjNKLEVBQU81RCxLQUFRVSxFQUFTVixNQUEwQixLQUFsQlUsRUFBU1YsS0FDM0JVLEVBQVNWLEtBQU80RCxFQUFPNUQsS0FDckM0RCxFQUFPL0QsU0FBWWEsRUFBU2IsVUFBa0MsS0FBdEJhLEVBQVNiLFNBQy9CYSxFQUFTYixTQUFXK0QsRUFBTy9ELFNBQzdDK0QsRUFBTzlDLE9BQVNKLEVBQVNJLE9BQ3pCOEMsRUFBTzNELE1BQVFTLEVBQVNULE1BQ3hCeU4sRUFBVUwsT0FFTCxHQUFJQSxFQUFRNVEsT0FHWmlSLElBQVNBLEVBQVUsSUFDeEJBLEVBQVFFLE1BQ1JGLEVBQVVBLEVBQVE1UyxPQUFPdVMsR0FDekJ6SixFQUFPOUMsT0FBU0osRUFBU0ksT0FDekI4QyxFQUFPM0QsTUFBUVMsRUFBU1QsV0FDbkIsSUFBS3lKLEVBQUttRSxrQkFBa0JuTixFQUFTSSxRQUFTLENBSW5ELEdBQUk2TSxFQUNGL0osRUFBTy9ELFNBQVcrRCxFQUFPNUQsS0FBTzBOLEVBQVFuRyxTQUlwQ3VHLEtBQWFsSyxFQUFPNUQsTUFBUTRELEVBQU81RCxLQUFLekYsUUFBUSxLQUFPLElBQzFDcUosRUFBTzVELEtBQUs1RixNQUFNLFFBRWpDd0osRUFBT2lHLEtBQU9pRSxFQUFXdkcsUUFDekIzRCxFQUFPNUQsS0FBTzRELEVBQU8vRCxTQUFXaU8sRUFBV3ZHLFNBVy9DLE9BUkEzRCxFQUFPOUMsT0FBU0osRUFBU0ksT0FDekI4QyxFQUFPM0QsTUFBUVMsRUFBU1QsTUFFbkJ5SixFQUFLcUUsT0FBT25LLEVBQU85RCxXQUFjNEosRUFBS3FFLE9BQU9uSyxFQUFPOUMsVUFDdkQ4QyxFQUFPa0csTUFBUWxHLEVBQU85RCxTQUFXOEQsRUFBTzlELFNBQVcsS0FDcEM4RCxFQUFPOUMsT0FBUzhDLEVBQU85QyxPQUFTLEtBRWpEOEMsRUFBT3pKLEtBQU95SixFQUFPekMsU0FDZHlDLEVBR1QsSUFBSzhKLEVBQVFqUixPQVdYLE9BUkFtSCxFQUFPOUQsU0FBVyxLQUVkOEQsRUFBTzlDLE9BQ1Q4QyxFQUFPa0csS0FBTyxJQUFNbEcsRUFBTzlDLE9BRTNCOEMsRUFBT2tHLEtBQU8sS0FFaEJsRyxFQUFPekosS0FBT3lKLEVBQU96QyxTQUNkeUMsRUFjVCxJQVJBLElBQUlvSyxFQUFPTixFQUFRbE4sT0FBTyxHQUFHLEdBQ3pCeU4sR0FDQ3JLLEVBQU81RCxNQUFRVSxFQUFTVixNQUFRME4sRUFBUWpSLE9BQVMsS0FDeEMsTUFBVHVSLEdBQXlCLE9BQVRBLElBQTJCLEtBQVRBLEVBSW5DRSxFQUFLLEVBQ0FuTSxFQUFJMkwsRUFBUWpSLE9BQVFzRixHQUFLLEVBQUdBLElBRXRCLE9BRGJpTSxFQUFPTixFQUFRM0wsSUFFYjJMLEVBQVEzSCxPQUFPaEUsRUFBRyxHQUNBLE9BQVRpTSxHQUNUTixFQUFRM0gsT0FBT2hFLEVBQUcsR0FDbEJtTSxLQUNTQSxJQUNUUixFQUFRM0gsT0FBT2hFLEVBQUcsR0FDbEJtTSxLQUtKLElBQUtWLElBQWVDLEVBQ2xCLEtBQU9TLElBQU1BLEVBQ1hSLEVBQVFwQixRQUFRLE9BSWhCa0IsR0FBNkIsS0FBZkUsRUFBUSxJQUNwQkEsRUFBUSxJQUErQixNQUF6QkEsRUFBUSxHQUFHYixPQUFPLElBQ3BDYSxFQUFRcEIsUUFBUSxJQUdkMkIsR0FBc0QsTUFBakNQLEVBQVFyUSxLQUFLLEtBQUttTCxRQUFRLElBQ2pEa0YsRUFBUXJKLEtBQUssSUFHZixJQVVNeUosRUFWRkssRUFBNEIsS0FBZlQsRUFBUSxJQUNwQkEsRUFBUSxJQUErQixNQUF6QkEsRUFBUSxHQUFHYixPQUFPLEdBR2pDYyxJQUNGL0osRUFBTy9ELFNBQVcrRCxFQUFPNUQsS0FBT21PLEVBQWEsR0FDYlQsRUFBUWpSLE9BQVNpUixFQUFRbkcsUUFBVSxJQUkvRHVHLEtBQWFsSyxFQUFPNUQsTUFBUTRELEVBQU81RCxLQUFLekYsUUFBUSxLQUFPLElBQzFDcUosRUFBTzVELEtBQUs1RixNQUFNLFFBRWpDd0osRUFBT2lHLEtBQU9pRSxFQUFXdkcsUUFDekIzRCxFQUFPNUQsS0FBTzRELEVBQU8vRCxTQUFXaU8sRUFBV3ZHLFVBeUIvQyxPQXJCQWlHLEVBQWFBLEdBQWU1SixFQUFPNUQsTUFBUTBOLEVBQVFqUixVQUVoQzBSLEdBQ2pCVCxFQUFRcEIsUUFBUSxJQUdib0IsRUFBUWpSLE9BSVhtSCxFQUFPOUQsU0FBVzROLEVBQVFyUSxLQUFLLE1BSC9CdUcsRUFBTzlELFNBQVcsS0FDbEI4RCxFQUFPa0csS0FBTyxNQU1YSixFQUFLcUUsT0FBT25LLEVBQU85RCxXQUFjNEosRUFBS3FFLE9BQU9uSyxFQUFPOUMsVUFDdkQ4QyxFQUFPa0csTUFBUWxHLEVBQU85RCxTQUFXOEQsRUFBTzlELFNBQVcsS0FDcEM4RCxFQUFPOUMsT0FBUzhDLEVBQU85QyxPQUFTLEtBRWpEOEMsRUFBT2lHLEtBQU9uSixFQUFTbUosTUFBUWpHLEVBQU9pRyxLQUN0Q2pHLEVBQU9nRyxRQUFVaEcsRUFBT2dHLFNBQVdsSixFQUFTa0osUUFDNUNoRyxFQUFPekosS0FBT3lKLEVBQU96QyxTQUNkeUMsR0FHVCtGLEVBQUl6USxVQUFVMlMsVUFBWSxXQUN4QixJQUFJN0wsRUFBT3pDLEtBQUt5QyxLQUNaRyxFQUFPZ0ssRUFBWS9DLEtBQUtwSCxHQUN4QkcsSUFFVyxPQURiQSxFQUFPQSxFQUFLLE1BRVY1QyxLQUFLNEMsS0FBT0EsRUFBS3FJLE9BQU8sSUFFMUJ4SSxFQUFPQSxFQUFLd0ksT0FBTyxFQUFHeEksRUFBS3ZELE9BQVMwRCxFQUFLMUQsU0FFdkN1RCxJQUFNekMsS0FBS3NDLFNBQVdHLEssOENDeHRCNUI3RyxFQUFPQyxRQUFVLENBQ2Y2USxTQUFVLFNBQVNtRSxHQUNqQixNQUF1QixpQkFBVixHQUVmcEQsU0FBVSxTQUFTb0QsR0FDakIsTUFBdUIsaUJBQVYsR0FBOEIsT0FBUkEsR0FFckNMLE9BQVEsU0FBU0ssR0FDZixPQUFlLE9BQVJBLEdBRVRQLGtCQUFtQixTQUFTTyxHQUMxQixPQUFjLE1BQVBBLE1DWlBDLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CdlMsR0FFNUIsR0FBR3NTLEVBQXlCdFMsR0FDM0IsT0FBT3NTLEVBQXlCdFMsR0FBVTNDLFFBRzNDLElBQUlELEVBQVNrVixFQUF5QnRTLEdBQVksQ0FDakRnQyxHQUFJaEMsRUFDSlAsUUFBUSxFQUNScEMsUUFBUyxJQUlObVYsRUFBYyxDQUFFeFEsR0FBSWhDLEVBQVU1QyxPQUFRQSxFQUFRcVYsUUFBU0MsRUFBb0IxUyxHQUFXMlMsUUFBU0osR0FTbkcsT0FSQUEsRUFBb0J2TSxFQUFFbEksU0FBUSxTQUFTOFUsR0FBV0EsRUFBUUosTUFDMURwVixFQUFTb1YsRUFBWXBWLE9BQ3JCb1YsRUFBWUMsUUFBUWxWLEtBQUtILEVBQU9DLFFBQVNELEVBQVFBLEVBQU9DLFFBQVNtVixFQUFZRyxTQUc3RXZWLEVBQU9xQyxRQUFTLEVBR1RyQyxFQUFPQyxRQUlma1YsRUFBb0JsSSxFQUFJcUksRUFHeEJILEVBQW9CcEYsRUFBSW1GLEVBR3hCQyxFQUFvQnZNLEVBQUksR0NuQ3hCdU0sRUFBb0JNLEVBQUksQ0FBQ3hWLEVBQVN5VixLQUNqQyxJQUFJLElBQUk3TixLQUFPNk4sRUFDWFAsRUFBb0JRLEVBQUVELEVBQVk3TixLQUFTc04sRUFBb0JRLEVBQUUxVixFQUFTNEgsSUFDNUUvSCxPQUFPOFYsZUFBZTNWLEVBQVM0SCxFQUFLLENBQUVnTyxZQUFZLEVBQU1DLElBQUtKLEVBQVc3TixNQ0gzRXNOLEVBQW9CWSxHQUFNQyxHQUViQSxFQUFVLElBQU1iLEVBQW9COUIsSUFBTSxpQkNGdkQ4QixFQUFvQmMsU0FBWUQsR0FFeEIsY0FBZ0JBLEVBQVUsYUNIbENiLEVBQW9CZSxLQUFPLElBQVdmLEVBQW9COUIsSUFBTSxtQkNBaEU4QixFQUFvQjlCLEVBQUksSUFBTSx1QkNBOUI4QixFQUFvQi9FLEVBQUksV0FDdkIsR0FBMEIsaUJBQWYrRixXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU8vUixNQUFRLElBQUlnUyxTQUFTLGNBQWIsR0FDZCxNQUFPQyxHQUNSLEdBQXNCLGlCQUFYL0YsT0FBcUIsT0FBT0EsUUFMakIsR0NBeEI2RSxFQUFvQlEsRUFBSSxDQUFDcEgsRUFBS0csSUFBUzVPLE9BQU9DLFVBQVVtSSxlQUFlL0gsS0FBS29PLEVBQUtHLEcxQkE3RTdQLEVBQWEsR0FDYkMsRUFBb0IsbUJBRXhCcVcsRUFBb0J0QyxFQUFJLENBQUM5UixFQUFLdVYsRUFBTXpPLEtBQ25DLEdBQUdoSixFQUFXa0MsR0FBUWxDLEVBQVdrQyxHQUFLbUssS0FBS29MLE9BQTNDLENBQ0EsSUFBSUMsRUFBUUMsRUFDWixRQUFXeFIsSUFBUjZDLEVBRUYsSUFEQSxJQUFJMUUsRUFBVTFDLFNBQVMyQyxxQkFBcUIsVUFDcEN3RixFQUFJLEVBQUdBLEVBQUl6RixFQUFRRyxPQUFRc0YsSUFBSyxDQUN2QyxJQUFJYSxFQUFJdEcsRUFBUXlGLEdBQ2hCLEdBQUdhLEVBQUVnTixhQUFhLFFBQVUxVixHQUFPMEksRUFBRWdOLGFBQWEsaUJBQW1CM1gsRUFBb0IrSSxFQUFLLENBQUUwTyxFQUFTOU0sRUFBRyxPQUcxRzhNLElBQ0hDLEdBQWEsR0FDYkQsRUFBUzlWLFNBQVNpVyxjQUFjLFdBRXpCQyxRQUFVLFFBQ2pCSixFQUFPdlQsUUFBVSxJQUNibVMsRUFBb0J5QixJQUN2QkwsRUFBT00sYUFBYSxRQUFTMUIsRUFBb0J5QixJQUVsREwsRUFBT00sYUFBYSxlQUFnQi9YLEVBQW9CK0ksR0FDeEQwTyxFQUFPclUsSUFBTW5CLEdBRWRsQyxFQUFXa0MsR0FBTyxDQUFDdVYsR0FDbkIsSUFBSVEsRUFBbUIsQ0FBQ0MsRUFBTUMsS0FFN0JULEVBQU9VLFFBQVVWLEVBQU9XLE9BQVMsS0FDakN6UyxhQUFhekIsR0FDYixJQUFJbVUsRUFBVXRZLEVBQVdrQyxHQUl6QixVQUhPbEMsRUFBV2tDLEdBQ2xCd1YsRUFBTzlVLFlBQWM4VSxFQUFPOVUsV0FBV0MsWUFBWTZVLEdBQ25EWSxHQUFXQSxFQUFRelcsU0FBU29DLEdBQU9BLEVBQUdrVSxLQUNuQ0QsRUFBTSxPQUFPQSxFQUFLQyxJQUdsQmhVLEVBQVUwQixXQUFXb1MsRUFBaUJNLEtBQUssVUFBTXBTLEVBQVcsQ0FBRW9GLEtBQU0sVUFBV2hCLE9BQVFtTixJQUFXLE1BQ3RHQSxFQUFPVSxRQUFVSCxFQUFpQk0sS0FBSyxLQUFNYixFQUFPVSxTQUNwRFYsRUFBT1csT0FBU0osRUFBaUJNLEtBQUssS0FBTWIsRUFBT1csUUFDbkRWLEdBQWMvVixTQUFTNFcsS0FBS3JWLFlBQVl1VSxLMkJ2Q3pDcEIsRUFBb0JtQyxFQUFLclgsSUFDSCxvQkFBWHNYLFFBQTBCQSxPQUFPQyxhQUMxQzFYLE9BQU84VixlQUFlM1YsRUFBU3NYLE9BQU9DLFlBQWEsQ0FBRXpNLE1BQU8sV0FFN0RqTCxPQUFPOFYsZUFBZTNWLEVBQVMsYUFBYyxDQUFFOEssT0FBTyxLQ0x2RG9LLEVBQW9Cc0MsSUFBT3pYLElBQzFCQSxFQUFPMFgsTUFBUSxHQUNWMVgsRUFBTzJYLFdBQVUzWCxFQUFPMlgsU0FBVyxJQUNqQzNYLEcsTUNIUixJQUlJNFgsRUFRQUMsRUFHQUMsRUFDQUMsRUFoQkFDLEVBQW9CLEdBQ3BCQyxFQUFtQjlDLEVBQW9CcEYsRUFJdkNtSSxFQUFpQixHQUdqQkMsRUFBMkIsR0FDM0JDLEVBQWdCLE9BK0twQixTQUFTQyxFQUFVQyxHQUNsQkYsRUFBZ0JFLEVBQ2hCLElBQUssSUFBSTFQLEVBQUksRUFBR0EsRUFBSXVQLEVBQXlCN1UsT0FBUXNGLElBQ3BEdVAsRUFBeUJ2UCxHQUFHekksS0FBSyxLQUFNbVksR0FvQnpDLFNBQVNDLEVBQXdCelYsR0FDaEMsR0FBZ0MsSUFBNUIrVSxFQUFpQnZVLE9BQWMsT0FBT1IsSUFDMUMsSUFBSTBWLEVBQVVYLEVBRWQsT0FEQUEsRUFBbUIsR0FDWlksUUFBUUMsSUFBSUYsR0FBU0csTUFBSyxXQUNoQyxPQUFPSixFQUF3QnpWLE1BSWpDLFNBQVM4VixFQUFTQyxHQUNqQixHQUFzQixTQUFsQlQsRUFDSCxNQUFNLElBQUl4UixNQUFNLDBDQUdqQixPQURBeVIsRUFBVSxTQUNIbEQsRUFBb0IyRCxPQUFPSCxNQUFLLFNBQVVJLEdBQ2hELElBQUtBLEVBRUosT0FEQVYsRUFBVVcsSUFBNEIsUUFBVSxRQUN6QyxLQUdSWCxFQUFVLFdBRVYsSUFBSVksRUFBaUIsR0FJckIsT0FIQXBCLEVBQW1CLEdBQ25CQyxFQUE2QixHQUV0QlcsUUFBUUMsSUFDZDVZLE9BQU9tSixLQUFLa00sRUFBb0IrRCxNQUFNN0ssUUFBTyxTQUM1QzhLLEVBQ0F0UixHQVVBLE9BUkFzTixFQUFvQitELEtBQUtyUixHQUN4QmtSLEVBQU9oSixFQUNQZ0osRUFBT3pCLEVBQ1B5QixFQUFPOUwsRUFDUGtNLEVBQ0FyQixFQUNBbUIsR0FFTUUsSUFFUixLQUNDUixNQUFLLFdBQ04sT0FBT0osR0FBd0IsV0FDOUIsT0FBSU0sRUFDSU8sRUFBY1AsSUFFckJSLEVBQVUsU0FFSFksWUFPWixTQUFTSSxFQUFTeFcsR0FDakIsTUFBc0IsVUFBbEJ1VixFQUNJSyxRQUFRalIsVUFBVW1SLE1BQUssV0FDN0IsTUFBTSxJQUFJL1IsTUFBTSw4Q0FHWHdTLEVBQWN2VyxHQUd0QixTQUFTdVcsRUFBY3ZXLEdBQ3RCQSxFQUFVQSxHQUFXLEdBRXJCbVcsSUFFQSxJQUFJTSxFQUFVeEIsRUFBMkJwVSxLQUFJLFNBQVU4UixHQUN0RCxPQUFPQSxFQUFRM1MsTUFFaEJpVixPQUE2QjlTLEVBRTdCLElBdUJJbUYsRUF2QkFKLEVBQVN1UCxFQUNYNVYsS0FBSSxTQUFVNFQsR0FDZCxPQUFPQSxFQUFFbk4sU0FFVHhFLE9BQU8ySSxTQUVULEdBQUl2RSxFQUFPekcsT0FBUyxFQUVuQixPQURBK1UsRUFBVSxTQUNISSxRQUFRalIsVUFBVW1SLE1BQUssV0FDN0IsTUFBTTVPLEVBQU8sTUFLZnNPLEVBQVUsV0FFVmlCLEVBQVE1WSxTQUFRLFNBQVUrSixHQUNyQkEsRUFBTzNGLFNBQVMyRixFQUFPM0YsYUFJNUJ1VCxFQUFVLFNBR1YsSUFBSWtCLEVBQWMsU0FBVXJRLEdBQ3RCaUIsSUFBT0EsRUFBUWpCLElBR2pCc1EsRUFBa0IsR0FhdEIsT0FaQUYsRUFBUTVZLFNBQVEsU0FBVStKLEdBQ3pCLEdBQUlBLEVBQU9qRyxNQUFPLENBQ2pCLElBQUlpVixFQUFVaFAsRUFBT2pHLE1BQU0rVSxHQUMzQixHQUFJRSxFQUNILElBQUssSUFBSTdRLEVBQUksRUFBR0EsRUFBSTZRLEVBQVFuVyxPQUFRc0YsSUFDbkM0USxFQUFnQnRPLEtBQUt1TyxFQUFRN1EsUUFPN0J1QixHQUNIa08sRUFBVSxRQUNISSxRQUFRalIsVUFBVW1SLE1BQUssV0FDN0IsTUFBTXhPLE1BSUo0TixFQUNJcUIsRUFBY3ZXLEdBQVM4VixNQUFLLFNBQVVlLEdBSTVDLE9BSEFGLEVBQWdCOVksU0FBUSxTQUFVa0MsR0FDN0I4VyxFQUFLdFksUUFBUXdCLEdBQVksR0FBRzhXLEVBQUt4TyxLQUFLdEksTUFFcEM4VyxNQUlUckIsRUFBVSxRQUNISSxRQUFRalIsUUFBUWdTLElBR3hCLFNBQVNSLElBQ1IsR0FBSWpCLEVBV0gsT0FWS0QsSUFBNEJBLEVBQTZCLElBQzlEaFksT0FBT21KLEtBQUtrTSxFQUFvQndFLE1BQU1qWixTQUFRLFNBQVVtSCxHQUN2RGtRLEVBQXlCclgsU0FBUSxTQUFVa0MsR0FDMUN1UyxFQUFvQndFLEtBQUs5UixHQUN4QmpGLEVBQ0FrVixTQUlIQyxPQUEyQi9TLEdBQ3BCLEVBalZUbVEsRUFBb0J5RSxLQUFPNUIsRUFFM0I3QyxFQUFvQnZNLEVBQUVzQyxNQUFLLFNBQVVySSxHQUNwQyxJQStEOEJELEVBQVVpWCxFQUNwQ2hWLEVBaEVBN0UsRUFBUzZDLEVBQVE3QyxPQUNqQnVWLEVBV0wsU0FBdUJBLEVBQVMzUyxHQUMvQixJQUFJaVgsRUFBSzVCLEVBQWlCclYsR0FDMUIsSUFBS2lYLEVBQUksT0FBT3RFLEVBQ2hCLElBQUl6UyxFQUFLLFNBQVVnWCxHQUNsQixHQUFJRCxFQUFHaFYsSUFBSWtWLE9BQVEsQ0FDbEIsR0FBSTlCLEVBQWlCNkIsR0FBVSxDQUM5QixJQUFJRSxFQUFVL0IsRUFBaUI2QixHQUFTRSxTQUNMLElBQS9CQSxFQUFRNVksUUFBUXdCLElBQ25Cb1gsRUFBUTlPLEtBQUt0SSxRQUdkc1YsRUFBaUIsQ0FBQ3RWLEdBQ2xCZ1YsRUFBcUJrQyxHQUVnQixJQUFsQ0QsRUFBR2xDLFNBQVN2VyxRQUFRMFksSUFDdkJELEVBQUdsQyxTQUFTek0sS0FBSzRPLFFBR2xCbmEsUUFBUXNhLEtBQ1AsNEJBQ0NILEVBQ0EsMEJBQ0FsWCxHQUVGc1YsRUFBaUIsR0FFbEIsT0FBTzNDLEVBQVF1RSxJQUVaSSxFQUEyQixTQUFVelUsR0FDeEMsTUFBTyxDQUNOMFUsY0FBYyxFQUNkdEUsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT1AsRUFBUTlQLElBRWhCMlUsSUFBSyxTQUFVclAsR0FDZHdLLEVBQVE5UCxHQUFRc0YsS0FJbkIsSUFBSyxJQUFJdEYsS0FBUThQLEVBQ1p6VixPQUFPQyxVQUFVbUksZUFBZS9ILEtBQUtvVixFQUFTOVAsSUFBa0IsTUFBVEEsR0FDMUQzRixPQUFPOFYsZUFBZTlTLEVBQUkyQyxFQUFNeVUsRUFBeUJ6VSxJQU0zRCxPQUhBM0MsRUFBR3VULEVBQUksU0FBVUwsR0FDaEIsT0ErR0YsU0FBOEJxRSxHQUM3QixPQUFRakMsR0FDUCxJQUFLLFFBTUosT0FMQUMsRUFBVSxXQUNWUixFQUFpQjNNLEtBQUttUCxHQUN0QjlCLEdBQXdCLFdBQ3ZCRixFQUFVLFlBRUpnQyxFQUNSLElBQUssVUFFSixPQURBeEMsRUFBaUIzTSxLQUFLbVAsR0FDZkEsRUFDUixRQUNDLE9BQU9BLEdBNUhEQyxDQUFxQi9FLEVBQVFjLEVBQUVMLEtBRWhDbFQsRUEzRE95WCxDQUFjMVgsRUFBUTBTLFFBQVMxUyxFQUFRK0IsSUFDckQ1RSxFQUFPNkUsS0E2RHVCakMsRUE3REtDLEVBQVErQixHQTZESGlWLEVBN0RPN1osRUE4RDNDNkUsRUFBTSxDQUVUMlYsc0JBQXVCLEdBQ3ZCQyxzQkFBdUIsR0FDdkJDLGVBQWUsRUFDZkMsZUFBZSxFQUNmQyxrQkFBa0IsRUFDbEJDLGlCQUFrQixHQUNsQkMsTUFBT2xELElBQXVCaFYsRUFDOUJtWSxhQUFjLFdBQ2I3QyxFQUFpQjJCLEVBQUdHLFFBQVEzUyxRQUM1QnVRLEVBQXFCaFYsRUFDckJ1UyxFQUFvQnZTLElBSXJCbVgsUUFBUSxFQUNSaFYsT0FBUSxTQUFVaVcsRUFBS0MsR0FDdEIsUUFBWWpXLElBQVJnVyxFQUFtQm5XLEVBQUk2VixlQUFnQixPQUN0QyxHQUFtQixtQkFBUk0sRUFBb0JuVyxFQUFJNlYsY0FBZ0JNLE9BQ25ELEdBQW1CLGlCQUFSQSxHQUE0QixPQUFSQSxFQUNuQyxJQUFLLElBQUlwUyxFQUFJLEVBQUdBLEVBQUlvUyxFQUFJMVgsT0FBUXNGLElBQy9CL0QsRUFBSTJWLHNCQUFzQlEsRUFBSXBTLElBQU1xUyxHQUFZLGtCQUM3Q3BXLEVBQUkyVixzQkFBc0JRLEdBQU9DLEdBQVksY0FFbkRDLFFBQVMsU0FBVUYsR0FDbEIsUUFBWWhXLElBQVJnVyxFQUFtQm5XLEVBQUk4VixlQUFnQixPQUN0QyxHQUFtQixpQkFBUkssR0FBNEIsT0FBUkEsRUFDbkMsSUFBSyxJQUFJcFMsRUFBSSxFQUFHQSxFQUFJb1MsRUFBSTFYLE9BQVFzRixJQUMvQi9ELEVBQUk0VixzQkFBc0JPLEVBQUlwUyxLQUFNLE9BQ2pDL0QsRUFBSTRWLHNCQUFzQk8sSUFBTyxHQUV2Q2xXLFFBQVMsU0FBVW1XLEdBQ2xCcFcsRUFBSWdXLGlCQUFpQjNQLEtBQUsrUCxJQUUzQkUsa0JBQW1CLFNBQVVGLEdBQzVCcFcsRUFBSWdXLGlCQUFpQjNQLEtBQUsrUCxJQUUzQkcscUJBQXNCLFNBQVVILEdBQy9CLElBQUk3TCxFQUFNdkssRUFBSWdXLGlCQUFpQnpaLFFBQVE2WixHQUNuQzdMLEdBQU8sR0FBR3ZLLEVBQUlnVyxpQkFBaUJqTyxPQUFPd0MsRUFBSyxJQUVoRGlNLFdBQVksV0FFWCxPQURBalgsS0FBS3dXLGtCQUFtQixFQUNoQnhDLEdBQ1AsSUFBSyxPQUNKTixFQUE2QixHQUM3QmhZLE9BQU9tSixLQUFLa00sRUFBb0J3RSxNQUFNalosU0FBUSxTQUFVbUgsR0FDdkRzTixFQUFvQndFLEtBQUs5UixHQUN4QmpGLEVBQ0FrVixNQUdGTyxFQUFVLFNBQ1YsTUFDRCxJQUFLLFFBQ0p2WSxPQUFPbUosS0FBS2tNLEVBQW9Cd0UsTUFBTWpaLFNBQVEsU0FBVW1ILEdBQ3ZEc04sRUFBb0J3RSxLQUFLOVIsR0FDeEJqRixFQUNBa1YsTUFHRixNQUNELElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssU0FDSEMsRUFBMkJBLEdBQTRCLElBQUk3TSxLQUMzRHRJLEtBVUowWSxNQUFPMUMsRUFDUHBVLE1BQU82VSxFQUNQa0MsT0FBUSxTQUFVMUksR0FDakIsSUFBS0EsRUFBRyxPQUFPdUYsRUFDZkQsRUFBeUJqTixLQUFLMkgsSUFFL0IySSxpQkFBa0IsU0FBVTNJLEdBQzNCc0YsRUFBeUJqTixLQUFLMkgsSUFFL0I0SSxvQkFBcUIsU0FBVTVJLEdBQzlCLElBQUl6RCxFQUFNK0ksRUFBeUIvVyxRQUFReVIsR0FDdkN6RCxHQUFPLEdBQUcrSSxFQUF5QnZMLE9BQU93QyxFQUFLLElBSXBEc00sS0FBTTFELEVBQWtCcFYsSUFFekJnVixPQUFxQjVTLEVBQ2RILEdBN0pQN0UsRUFBT2dhLFFBQVU5QixFQUNqQmxZLEVBQU8yWCxTQUFXLEdBQ2xCTyxFQUFpQixHQUNqQnJWLEVBQVEwUyxRQUFVQSxLQUduQkosRUFBb0IrRCxLQUFPLEdBQzNCL0QsRUFBb0J3RSxLQUFPLEksR0MvQjNCeEUsRUFBb0IvQixFQUFJLEc3QkFwQnJVLEVBQW1CLENBQUM0YyxFQUFVblUsRUFBU29VLEtBQzFDLElBQUlDLEVBQVVwYixTQUFTaVcsY0FBYyxRQWdCckMsT0FmQW1GLEVBQVFsSSxJQUFNLGFBQ2RrSSxFQUFRelIsS0FBTyxXQUNmeVIsRUFBUTNFLE9BQVMxUCxFQUNqQnFVLEVBQVE1RSxRQUFVLFNBQVNELEdBQzFCLElBQUk4QyxFQUFVOUMsR0FBU0EsRUFBTTVOLFFBQVU0TixFQUFNNU4sT0FBT2xILEtBQU95WixFQUN2RHpTLEVBQU0sSUFBSXRDLE1BQU0scUJBQXVCb1AsUUFBVSxjQUFnQjhELEVBQVUsS0FDL0U1USxFQUFJNFMsS0FBTyx3QkFDWDVTLEVBQUk0USxRQUFVQSxFQUNkK0IsRUFBUXBhLFdBQVdDLFlBQVltYSxHQUMvQkQsRUFBTzFTLElBRVIyUyxFQUFRN2EsS0FBTzJhLEVBRUpsYixTQUFTMkMscUJBQXFCLFFBQVEsR0FDNUNwQixZQUFZNlosR0FDVkEsR0FFSjdjLEVBQWlCLENBQUNnQyxFQUFNMmEsS0FFM0IsSUFEQSxJQUFJSSxFQUFtQnRiLFNBQVMyQyxxQkFBcUIsUUFDN0N3RixFQUFJLEVBQUdBLEVBQUltVCxFQUFpQnpZLE9BQVFzRixJQUFLLENBQ2hELElBQ0lvVCxHQURBQyxFQUFNRixFQUFpQm5ULElBQ1I2TixhQUFhLGNBQWdCd0YsRUFBSXhGLGFBQWEsUUFDakUsR0FBZSxlQUFad0YsRUFBSXRJLE1BQXlCcUksSUFBYWhiLEdBQVFnYixJQUFhTCxHQUFXLE9BQU9NLEVBRXJGLElBQUlDLEVBQW9CemIsU0FBUzJDLHFCQUFxQixTQUN0RCxJQUFRd0YsRUFBSSxFQUFHQSxFQUFJc1QsRUFBa0I1WSxPQUFRc0YsSUFBSyxDQUNqRCxJQUFJcVQsRUFFSixJQURJRCxHQURBQyxFQUFNQyxFQUFrQnRULElBQ1Q2TixhQUFhLGdCQUNoQnpWLEdBQVFnYixJQUFhTCxFQUFVLE9BQU9NLElBYXBEaGQsRUFBVSxHQUNWQyxFQUFVLEdBQ1ZDLEVBQWdCMEQsSUFDWixDQUFFaUMsUUFBUyxLQUNqQixJQUFJLElBQUk4RCxFQUFJLEVBQUdBLEVBQUkzSixFQUFRcUUsT0FBUXNGLElBQUssQ0FDdkMsSUFBSXVULEVBQVNsZCxFQUFRMkosR0FDbEJ1VCxFQUFPMWEsWUFBWTBhLEVBQU8xYSxXQUFXQyxZQUFZeWEsR0FFckRsZCxFQUFRcUUsT0FBUyxHQUNma0IsTUFBTyxLQUNULElBQUksSUFBSW9FLEVBQUksRUFBR0EsRUFBSTFKLEVBQVFvRSxPQUFRc0YsSUFBSzFKLEVBQVEwSixHQUFHK0ssSUFBTSxhQUN6RHpVLEVBQVFvRSxPQUFTLEtBR25CNlIsRUFBb0IrRCxLQUFLa0QsUUFBVSxDQUFDQyxFQUFVQyxFQUFlQyxFQUFnQnBELEVBQVVxRCxFQUFlQyxLQUNyR0QsRUFBY3RSLEtBQUsvTCxHQUNuQmtkLEVBQVMzYixTQUFTc1YsSUFDakIsSUFBSWhWLEVBQU9tVSxFQUFvQmMsU0FBU0QsR0FDcEMyRixFQUFXeEcsRUFBb0IvQixFQUFJcFMsRUFDdkMsTUFBTW1iLEVBQVNuZCxFQUFlZ0MsRUFBTTJhLEdBQ2hDUSxHQUNKaEQsRUFBU2pPLEtBQUssSUFBSXVOLFNBQVEsQ0FBQ2pSLEVBQVNvVSxLQUNuQyxJQUFJSyxFQUFNbGQsRUFBaUI0YyxHQUFVLEtBQ3BDTSxFQUFJUyxHQUFLLFFBQ1RULEVBQUl0SSxJQUFNLFVBQ1ZuTSxNQUNFb1UsR0FDSDNjLEVBQVFpTSxLQUFLaVIsR0FDYmpkLEVBQVFnTSxLQUFLK1EsVyxNOEJsRWhCLElBa0RJVSxFQUNBQyxFQUNBQyxFQUNBQyxFQXJEQUMsRUFBa0IsQ0FDckIsYUFBZ0IsR0FXYkMsRUFBd0IsR0FDNUIsU0FBU0MsRUFBZ0JqSCxHQUN4QixPQUFPLElBQUl5QyxTQUFRLENBQUNqUixFQUFTb1UsS0FDNUJvQixFQUFzQmhILEdBQVd4TyxFQUVqQyxJQUFJekcsRUFBTW9VLEVBQW9CL0IsRUFBSStCLEVBQW9CWSxHQUFHQyxHQUVyRDdMLEVBQVEsSUFBSXZELE1BYWhCdU8sRUFBb0J0QyxFQUFFOVIsR0FaRmlXLElBQ25CLEdBQUdnRyxFQUFzQmhILEdBQVUsQ0FDbENnSCxFQUFzQmhILFFBQVdoUixFQUNqQyxJQUFJa1ksRUFBWWxHLElBQXlCLFNBQWZBLEVBQU01TSxLQUFrQixVQUFZNE0sRUFBTTVNLE1BQ2hFK1MsRUFBVW5HLEdBQVNBLEVBQU01TixRQUFVNE4sRUFBTTVOLE9BQU9sSCxJQUNwRGlJLEVBQU1pVCxRQUFVLDRCQUE4QnBILEVBQVUsY0FBZ0JrSCxFQUFZLEtBQU9DLEVBQVUsSUFDckdoVCxFQUFNMUUsS0FBTyxpQkFDYjBFLEVBQU1DLEtBQU84UyxFQUNiL1MsRUFBTTJQLFFBQVVxRCxFQUNoQnZCLEVBQU96UixVQXlCWCxTQUFTaEwsRUFBYTBELEdBR3JCLFNBQVN3YSxFQUF5QkMsR0FVakMsSUFUQSxJQUFJOUQsRUFBa0IsQ0FBQzhELEdBQ25CQyxFQUF1QixHQUV2QkMsRUFBUWhFLEVBQWdCOVYsS0FBSSxTQUFVa0IsR0FDekMsTUFBTyxDQUNONlksTUFBTyxDQUFDN1ksR0FDUkEsR0FBSUEsTUFHQzRZLEVBQU1sYSxPQUFTLEdBQUcsQ0FDeEIsSUFBSW9hLEVBQVlGLEVBQU0vSSxNQUNsQjdSLEVBQVc4YSxFQUFVOVksR0FDckI2WSxFQUFRQyxFQUFVRCxNQUNsQnpkLEVBQVNtVixFQUFvQnBGLEVBQUVuTixHQUNuQyxHQUNFNUMsS0FDQUEsRUFBTzZFLElBQUk2VixlQUFrQjFhLEVBQU82RSxJQUFJK1Ysa0JBRjFDLENBS0EsR0FBSTVhLEVBQU82RSxJQUFJOFYsY0FDZCxNQUFPLENBQ052USxLQUFNLGdCQUNOcVQsTUFBT0EsRUFDUDdhLFNBQVVBLEdBR1osR0FBSTVDLEVBQU82RSxJQUFJaVcsTUFDZCxNQUFPLENBQ04xUSxLQUFNLGFBQ05xVCxNQUFPQSxFQUNQN2EsU0FBVUEsR0FHWixJQUFLLElBQUlnRyxFQUFJLEVBQUdBLEVBQUk1SSxFQUFPZ2EsUUFBUTFXLE9BQVFzRixJQUFLLENBQy9DLElBQUkrVSxFQUFXM2QsRUFBT2dhLFFBQVFwUixHQUMxQmdWLEVBQVN6SSxFQUFvQnBGLEVBQUU0TixHQUNuQyxHQUFLQyxFQUFMLENBQ0EsR0FBSUEsRUFBTy9ZLElBQUk0VixzQkFBc0I3WCxHQUNwQyxNQUFPLENBQ053SCxLQUFNLFdBQ05xVCxNQUFPQSxFQUFNOWIsT0FBTyxDQUFDZ2MsSUFDckIvYSxTQUFVQSxFQUNWK2EsU0FBVUEsSUFHK0IsSUFBdkNuRSxFQUFnQnBZLFFBQVF1YyxLQUN4QkMsRUFBTy9ZLElBQUkyVixzQkFBc0I1WCxJQUMvQjJhLEVBQXFCSSxLQUN6QkosRUFBcUJJLEdBQVksSUFDbENFLEVBQVlOLEVBQXFCSSxHQUFXLENBQUMvYSxhQUd2QzJhLEVBQXFCSSxHQUM1Qm5FLEVBQWdCdE8sS0FBS3lTLEdBQ3JCSCxFQUFNdFMsS0FBSyxDQUNWdVMsTUFBT0EsRUFBTTliLE9BQU8sQ0FBQ2djLElBQ3JCL1ksR0FBSStZLFNBS1AsTUFBTyxDQUNOdlQsS0FBTSxXQUNOeEgsU0FBVTBhLEVBQ1Y5RCxnQkFBaUJBLEVBQ2pCK0QscUJBQXNCQSxHQUl4QixTQUFTTSxFQUFZbFEsRUFBR0MsR0FDdkIsSUFBSyxJQUFJaEYsRUFBSSxFQUFHQSxFQUFJZ0YsRUFBRXRLLE9BQVFzRixJQUFLLENBQ2xDLElBQUlrVixFQUFPbFEsRUFBRWhGLElBQ1ksSUFBckIrRSxFQUFFdk0sUUFBUTBjLElBQWNuUSxFQUFFekMsS0FBSzRTLElBM0VqQzNJLEVBQW9CNEksVUFBVTVJLEVBQW9CNEksRUFBRUMsU0FDeERyQixPQUFzQjNYLEVBZ0Z0QixJQUFJdVksRUFBdUIsR0FDdkIvRCxFQUFrQixHQUNsQnlFLEVBQWdCLEdBRWhCQyxFQUF3QixTQUErQmxlLEdBQzFETCxRQUFRc2EsS0FDUCw0QkFBOEJqYSxFQUFPNEUsR0FBSyx5QkFJNUMsSUFBSyxJQUFJaEMsS0FBWWdhLEVBQ3BCLEdBQUl6SCxFQUFvQlEsRUFBRWlILEVBQWVoYSxHQUFXLENBQ25ELElBRUk2SCxFQUZBMFQsRUFBbUJ2QixFQUFjaGEsR0FZakN3YixHQUFhLEVBQ2JDLEdBQVUsRUFDVkMsR0FBWSxFQUNaQyxFQUFZLEdBSWhCLFFBZkM5VCxFQURHMFQsRUFDTWQsRUFBeUJ6YSxHQUV6QixDQUNSd0gsS0FBTSxXQUNOeEgsU0FBVUEsSUFRRDZhLFFBQ1ZjLEVBQVkseUJBQTJCOVQsRUFBT2dULE1BQU12WixLQUFLLFNBRWxEdUcsRUFBT0wsTUFDZCxJQUFLLGdCQUNBdkgsRUFBUTJiLFlBQVkzYixFQUFRMmIsV0FBVy9ULEdBQ3RDNUgsRUFBUTRiLGlCQUNaTCxFQUFhLElBQUl4WCxNQUNoQixvQ0FDQzZELEVBQU83SCxTQUNQMmIsSUFFSCxNQUNELElBQUssV0FDQTFiLEVBQVEyYixZQUFZM2IsRUFBUTJiLFdBQVcvVCxHQUN0QzVILEVBQVE0YixpQkFDWkwsRUFBYSxJQUFJeFgsTUFDaEIsMkNBQ0M2RCxFQUFPN0gsU0FDUCxPQUNBNkgsRUFBT2tULFNBQ1BZLElBRUgsTUFDRCxJQUFLLGFBQ0ExYixFQUFRNmIsY0FBYzdiLEVBQVE2YixhQUFhalUsR0FDMUM1SCxFQUFROGIsbUJBQ1pQLEVBQWEsSUFBSXhYLE1BQ2hCLG1CQUFxQmhFLEVBQVcsbUJBQXFCMmIsSUFFdkQsTUFDRCxJQUFLLFdBQ0ExYixFQUFRK2IsWUFBWS9iLEVBQVErYixXQUFXblUsR0FDM0M0VCxHQUFVLEVBQ1YsTUFDRCxJQUFLLFdBQ0F4YixFQUFRZ2MsWUFBWWhjLEVBQVFnYyxXQUFXcFUsR0FDM0M2VCxHQUFZLEVBQ1osTUFDRCxRQUNDLE1BQU0sSUFBSTFYLE1BQU0sb0JBQXNCNkQsRUFBT0wsTUFFL0MsR0FBSWdVLEVBQ0gsTUFBTyxDQUNOalUsTUFBT2lVLEdBR1QsR0FBSUMsRUFHSCxJQUFLemIsS0FGTHFiLEVBQWNyYixHQUFZdWIsRUFDMUJOLEVBQVlyRSxFQUFpQi9PLEVBQU8rTyxpQkFDbkIvTyxFQUFPOFMscUJBQ25CcEksRUFBb0JRLEVBQUVsTCxFQUFPOFMscUJBQXNCM2EsS0FDakQyYSxFQUFxQjNhLEtBQ3pCMmEsRUFBcUIzYSxHQUFZLElBQ2xDaWIsRUFDQ04sRUFBcUIzYSxHQUNyQjZILEVBQU84UyxxQkFBcUIzYSxLQUs1QjBiLElBQ0hULEVBQVlyRSxFQUFpQixDQUFDL08sRUFBTzdILFdBQ3JDcWIsRUFBY3JiLEdBQVlzYixHQUk3QnRCLE9BQWdCNVgsRUFJaEIsSUFEQSxJQW1CSThaLEVBbkJBQyxFQUE4QixHQUN6QjNTLEVBQUksRUFBR0EsRUFBSW9OLEVBQWdCbFcsT0FBUThJLElBQUssQ0FDaEQsSUFBSTRTLEVBQW1CeEYsRUFBZ0JwTixHQUV0QytJLEVBQW9CcEYsRUFBRWlQLElBQ3RCN0osRUFBb0JwRixFQUFFaVAsR0FBa0JuYSxJQUFJNlYsZUFFNUN1RCxFQUFjZSxLQUFzQmQsSUFFbkMvSSxFQUFvQnBGLEVBQUVpUCxHQUFrQm5hLElBQUkrVixrQkFFN0NtRSxFQUE0QjdULEtBQUssQ0FDaENsTCxPQUFRZ2YsRUFDUnpKLFFBQVNKLEVBQW9CcEYsRUFBRWlQLEdBQWtCbmEsSUFBSWtXLGFBQ3JEa0UsYUFBYzlKLEVBQW9CcEYsRUFBRWlQLEdBQWtCbmEsSUFBSTZWLGdCQU83RCxNQUFPLENBQ041VixRQUFTLFdBTVIsSUFBSXNLLEVBTEp5TixFQUEyQm5jLFNBQVEsU0FBVXNWLFVBQ3JDK0csRUFBZ0IvRyxNQUV4QjZHLE9BQTZCN1gsRUFJN0IsSUFEQSxJQW9DSWthLEVBcENBMUIsRUFBUWhFLEVBQWdCblMsUUFDckJtVyxFQUFNbGEsT0FBUyxHQUFHLENBQ3hCLElBQUlWLEVBQVc0YSxFQUFNL0ksTUFDakJ6VSxFQUFTbVYsRUFBb0JwRixFQUFFbk4sR0FDbkMsR0FBSzVDLEVBQUwsQ0FFQSxJQUFJMGIsRUFBTyxHQUdQeUQsRUFBa0JuZixFQUFPNkUsSUFBSWdXLGlCQUNqQyxJQUFLek8sRUFBSSxFQUFHQSxFQUFJK1MsRUFBZ0I3YixPQUFROEksSUFDdkMrUyxFQUFnQi9TLEdBQUdqTSxLQUFLLEtBQU11YixHQWMvQixJQVpBdkcsRUFBb0J5RSxLQUFLaFgsR0FBWThZLEVBR3JDMWIsRUFBTzZFLElBQUlrVixRQUFTLFNBR2I1RSxFQUFvQnBGLEVBQUVuTixVQUd0QjJhLEVBQXFCM2EsR0FHdkJ3SixFQUFJLEVBQUdBLEVBQUlwTSxFQUFPMlgsU0FBU3JVLE9BQVE4SSxJQUFLLENBQzVDLElBQUlnVCxFQUFRakssRUFBb0JwRixFQUFFL1AsRUFBTzJYLFNBQVN2TCxJQUM3Q2dULEtBQ0xoUSxFQUFNZ1EsRUFBTXBGLFFBQVE1WSxRQUFRd0IsS0FDakIsR0FDVndjLEVBQU1wRixRQUFRcE4sT0FBT3dDLEVBQUssTUFPN0IsSUFBSyxJQUFJNFAsS0FBb0J6QixFQUM1QixHQUFJcEksRUFBb0JRLEVBQUU0SCxFQUFzQnlCLEtBQy9DaGYsRUFBU21WLEVBQW9CcEYsRUFBRWlQLElBSTlCLElBRkFGLEVBQ0N2QixFQUFxQnlCLEdBQ2pCNVMsRUFBSSxFQUFHQSxFQUFJMFMsRUFBMkJ4YixPQUFROEksSUFDbEQ4UyxFQUFhSixFQUEyQjFTLElBQ3hDZ0QsRUFBTXBQLEVBQU8yWCxTQUFTdlcsUUFBUThkLEtBQ25CLEdBQUdsZixFQUFPMlgsU0FBUy9LLE9BQU93QyxFQUFLLElBTS9DNUssTUFBTyxTQUFVK1UsR0FFaEIsSUFBSyxJQUFJK0QsS0FBa0JXLEVBQ3RCOUksRUFBb0JRLEVBQUVzSSxFQUFlWCxLQUN4Q25JLEVBQW9CbEksRUFBRXFRLEdBQWtCVyxFQUFjWCxJQUt4RCxJQUFLLElBQUkxVSxFQUFJLEVBQUdBLEVBQUlrVSxFQUFxQnhaLE9BQVFzRixJQUNoRGtVLEVBQXFCbFUsR0FBR3VNLEdBSXpCLElBQUssSUFBSTZKLEtBQW9CekIsRUFDNUIsR0FBSXBJLEVBQW9CUSxFQUFFNEgsRUFBc0J5QixHQUFtQixDQUNsRSxJQUFJaGYsRUFBU21WLEVBQW9CcEYsRUFBRWlQLEdBQ25DLEdBQUloZixFQUFRLENBQ1g4ZSxFQUNDdkIsRUFBcUJ5QixHQUd0QixJQUZBLElBQUlLLEVBQVksR0FDWkMsRUFBMkIsR0FDdEJsVCxFQUFJLEVBQUdBLEVBQUkwUyxFQUEyQnhiLE9BQVE4SSxJQUFLLENBQzNELElBQUk4UyxFQUFhSixFQUEyQjFTLEdBQ3hDbVQsRUFDSHZmLEVBQU82RSxJQUFJMlYsc0JBQXNCMEUsR0FDbEMsR0FBSUssRUFBZ0IsQ0FDbkIsSUFBMkMsSUFBdkNGLEVBQVVqZSxRQUFRbWUsR0FBd0IsU0FDOUNGLEVBQVVuVSxLQUFLcVUsR0FDZkQsRUFBeUJwVSxLQUFLZ1UsSUFHaEMsSUFBSyxJQUFJdFQsRUFBSSxFQUFHQSxFQUFJeVQsRUFBVS9iLE9BQVFzSSxJQUNyQyxJQUNDeVQsRUFBVXpULEdBQUd6TCxLQUFLLEtBQU0yZSxHQUN2QixNQUFPNVYsR0FDSnJHLEVBQVEyYyxXQUNYM2MsRUFBUTJjLFVBQVUsQ0FDakJwVixLQUFNLGlCQUNOeEgsU0FBVW9jLEVBQ1ZTLGFBQWNILEVBQXlCMVQsR0FDdkN6QixNQUFPakIsSUFHSnJHLEVBQVE2YyxlQUNabkcsRUFBWXJRLEtBU2xCLElBQUssSUFBSXlNLEVBQUksRUFBR0EsRUFBSW9KLEVBQTRCemIsT0FBUXFTLElBQUssQ0FDNUQsSUFBSW1JLEVBQU9pQixFQUE0QnBKLEdBQ25DL1MsRUFBV2tiLEVBQUs5ZCxPQUNwQixJQUNDOGQsRUFBS3ZJLFFBQVEzUyxHQUNaLE1BQU9zRyxHQUNSLEdBQWlDLG1CQUF0QjRVLEVBQUttQixhQUNmLElBQ0NuQixFQUFLbUIsYUFBYS9WLEdBQ2pCLE1BQU95VyxHQUNKOWMsRUFBUTJjLFdBQ1gzYyxFQUFRMmMsVUFBVSxDQUNqQnBWLEtBQU0sb0NBQ054SCxTQUFVQSxFQUNWdUgsTUFBT3dWLEVBQ1BDLGNBQWUxVyxJQUdackcsRUFBUTZjLGVBQ1puRyxFQUFZb0csR0FFYnBHLEVBQVlyUSxRQUdUckcsRUFBUTJjLFdBQ1gzYyxFQUFRMmMsVUFBVSxDQUNqQnBWLEtBQU0sc0JBQ054SCxTQUFVQSxFQUNWdUgsTUFBT2pCLElBR0pyRyxFQUFRNmMsZUFDWm5HLEVBQVlyUSxJQU1oQixPQUFPc1EsSUFuWFZyVixLQUFzQyxnQ0FBSSxDQUFDNlIsRUFBUzZKLEVBQWFDLEtBQ2hFLElBQUksSUFBSWxkLEtBQVlpZCxFQUNoQjFLLEVBQW9CUSxFQUFFa0ssRUFBYWpkLEtBQ3JDZ2EsRUFBY2hhLEdBQVlpZCxFQUFZamQsSUFJckNrZCxHQUFTaEQsRUFBcUI1UixLQUFLNFUsR0FDbkM5QyxFQUFzQmhILEtBQ3hCZ0gsRUFBc0JoSCxLQUN0QmdILEVBQXNCaEgsUUFBV2hSLElBNlduQ21RLEVBQW9Cd0UsS0FBS29HLE1BQVEsU0FBVW5kLEVBQVU0WixHQUMvQ0ksSUFDSkEsRUFBZ0IsR0FDaEJFLEVBQXVCLEdBQ3ZCRCxFQUE2QixHQUM3QkwsRUFBY3RSLEtBQUsvTCxJQUVmZ1csRUFBb0JRLEVBQUVpSCxFQUFlaGEsS0FDekNnYSxFQUFjaGEsR0FBWXVTLEVBQW9CbEksRUFBRXJLLEtBR2xEdVMsRUFBb0IrRCxLQUFLNkcsTUFBUSxTQUNoQzFELEVBQ0FDLEVBQ0FDLEVBQ0FwRCxFQUNBcUQsRUFDQUMsR0FFQUQsRUFBY3RSLEtBQUsvTCxHQUNuQndkLEVBQXNCLEdBQ3RCRSxFQUE2QlAsRUFDN0JNLEVBQWdCTCxFQUFlbE8sUUFBTyxTQUFVRSxFQUFLMUcsR0FFcEQsT0FEQTBHLEVBQUkxRyxJQUFPLEVBQ0owRyxJQUNMLElBQ0h1TyxFQUF1QixHQUN2QlQsRUFBUzNiLFNBQVEsU0FBVXNWLEdBRXpCYixFQUFvQlEsRUFBRW9ILEVBQWlCL0csU0FDVmhSLElBQTdCK1gsRUFBZ0IvRyxLQUVoQm1ELEVBQVNqTyxLQUFLK1IsRUFBZ0JqSCxJQUM5QjJHLEVBQW9CM0csSUFBVyxNQUc3QmIsRUFBb0I0SSxJQUN2QjVJLEVBQW9CNEksRUFBRUMsU0FBVyxTQUFVaEksRUFBU21ELEdBRWxEd0QsSUFDQ3hILEVBQW9CUSxFQUFFZ0gsRUFBcUIzRyxJQUM1Q2IsRUFBb0JRLEVBQUVvSCxFQUFpQi9HLFNBQ1ZoUixJQUE3QitYLEVBQWdCL0csS0FFaEJtRCxFQUFTak8sS0FBSytSLEVBQWdCakgsSUFDOUIyRyxFQUFvQjNHLElBQVcsTUFNbkNiLEVBQW9CMkQsS0FBTyxLQUMxQixHQUFxQixvQkFBVmtILE1BQXVCLE1BQU0sSUFBSXBaLE1BQU0sc0NBQ2xELE9BQU9vWixNQUFNN0ssRUFBb0IvQixFQUFJK0IsRUFBb0JlLFFBQVF5QyxNQUFNc0gsSUFDdEUsR0FBdUIsTUFBcEJBLEVBQVMxRSxPQUFaLENBQ0EsSUFBSTBFLEVBQVNDLEdBQUksTUFBTSxJQUFJdFosTUFBTSxtQ0FBcUNxWixFQUFTRSxZQUMvRSxPQUFPRixFQUFTRyxhLEdDcmRsQmpMLEVBQW9CLHVDIiwiZmlsZSI6ImNvbXBvbmVudHMvYXV0b2NvbXBsZXRlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwic2FpZi1jb21wb25lbnRzOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXkpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiBmbihldmVudCkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpID0+IHtcblx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRsaW5rVGFnLm9ubG9hZCA9IHJlc29sdmU7XG5cdGxpbmtUYWcub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHJlcXVlc3QgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYyB8fCBmdWxsaHJlZjtcblx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIHJlcXVlc3QgKyBcIilcIik7XG5cdFx0ZXJyLmNvZGUgPSBcIkNTU19DSFVOS19MT0FEX0ZBSUxFRFwiO1xuXHRcdGVyci5yZXF1ZXN0ID0gcmVxdWVzdDtcblx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRyZWplY3QoZXJyKTtcblx0fTtcblx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cblx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG5cdGhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGNvbnN0IG9sZFRhZyA9IGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKTtcblx0XHRpZighb2xkVGFnKSByZXR1cm47XG5cdFx0cHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgdGFnID0gY3JlYXRlU3R5bGVzaGVldChmdWxsaHJlZiwgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn0iLCJpbXBvcnQgXCIuL2luZGV4LnNjc3NcIjtcblxuY29uc3QgY291bnRpZXMgPSBbXG4gIFwiQmFrZXJcIixcbiAgXCJCZW50b25cIixcbiAgXCJDbGFja2FtYXNcIixcbiAgXCJDbGF0c29wXCIsXG4gIFwiQ29sdW1iaWFcIixcbiAgXCJDb29zXCIsXG4gIFwiQ3Jvb2tcIixcbiAgXCJDdXJyeVwiLFxuICBcIkRlc2NodXRlc1wiLFxuICBcIkRvdWdsYXNcIixcbiAgXCJHaWxsaWFtXCIsXG5dO1xuXG4kKFwiLnNhaWYtYXV0b2NvbXBsZXRlXCIpLmF1dG9jb21wbGV0ZSh7XG4gIGxvb2t1cDogY291bnRpZXMsXG4gIGF1dG9TZWxlY3RGaXJzdDogdHJ1ZSxcbiAgbWF4SGVpZ2h0OiAxMTAsXG4gIG9uU2VsZWN0OiBmdW5jdGlvbiAoc3VnZ2VzdGlvbikge1xuICAgIGNvbnNvbGUubG9nKHN1Z2dlc3Rpb24pO1xuICB9LFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4KSB7XG5cdHZhciBwcm90b3R5cGU7XG5cdHJldHVybiB0b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBPYmplY3RdJyAmJiAocHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHgpLCBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoe30pKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZSgnbm9ybWFsaXplLXVybCcpO1xuXG52YXIgc3JjQnlNb2R1bGVJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG52YXIgbm9Eb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCc7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCkge1xuICB2YXIgc3JjID0gc3JjQnlNb2R1bGVJZFttb2R1bGVJZF07XG5cbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChsYXN0U2NyaXB0VGFnKSB7XG4gICAgICAgIHNyYyA9IGxhc3RTY3JpcHRUYWcuc3JjO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlTWFwKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcblxuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoJy5qcycsICcuY3NzJyldO1xuICAgIH1cblxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGVNYXAuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCAnZycpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSksIHtcbiAgICAgICAgc3RyaXBXV1c6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ3NzKGVsLCB1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5cbiAgICB1cmwgPSBlbC5ocmVmLnNwbGl0KCc/JylbMF07XG4gIH1cblxuICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVsLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgIC8vIFdlIHNlZW0gdG8gYmUgYWJvdXQgdG8gcmVwbGFjZSBhIGNzcyBsaW5rIHRoYXQgaGFzbid0IGxvYWRlZCB5ZXQuXG4gICAgLy8gV2UncmUgcHJvYmFibHkgY2hhbmdpbmcgdGhlIHNhbWUgZmlsZSBtb3JlIHRoYW4gb25jZS5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXVybCB8fCAhKHVybC5pbmRleE9mKCcuY3NzJykgPiAtMSkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICBlbC52aXNpdGVkID0gdHJ1ZTtcbiAgdmFyIG5ld0VsID0gZWwuY2xvbmVOb2RlKCk7XG4gIG5ld0VsLmlzTG9hZGVkID0gZmFsc2U7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuaHJlZiA9IFwiXCIuY29uY2F0KHVybCwgXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtcblxuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgZWwubmV4dFNpYmxpbmcpO1xuICB9IGVsc2Uge1xuICAgIGVsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3RWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbG9hZFVybChocmVmLCBzcmMpIHtcbiAgdmFyIHJldDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cbiAgaHJlZiA9IG5vcm1hbGl6ZVVybChocmVmLCB7XG4gICAgc3RyaXBXV1c6IGZhbHNlXG4gIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyYXktY2FsbGJhY2stcmV0dXJuXG5cbiAgc3JjLnNvbWUoZnVuY3Rpb24gKHVybCkge1xuICAgIGlmIChocmVmLmluZGV4T2Yoc3JjKSA+IC0xKSB7XG4gICAgICByZXQgPSB1cmw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkU3R5bGUoc3JjKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBnZXRSZWxvYWRVcmwoZWwuaHJlZiwgc3JjKTtcblxuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVwZGF0ZUNzcyhlbCwgdXJsKTtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXmh0dHBzPzovaS50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZygnbm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTJyk7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cblxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcblxuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gY3NzIHJlbG9hZCAlcycsIHNyYy5qb2luKCcgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWJvdW5jZSh1cGRhdGUsIDUwKTtcbn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTYwMzk0MTczMTQxNVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvVXNlcnMvcG0xNzRsYy9TaXRlcy9zYWlmLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpO1xudmFyIHB1bnljb2RlID0gcmVxdWlyZSgncHVueWNvZGUnKTtcbnZhciBxdWVyeVN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5LXN0cmluZycpO1xudmFyIHByZXBlbmRIdHRwID0gcmVxdWlyZSgncHJlcGVuZC1odHRwJyk7XG52YXIgc29ydEtleXMgPSByZXF1aXJlKCdzb3J0LWtleXMnKTtcbnZhciBvYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBERUZBVUxUX1BPUlRTID0ge1xuXHQnaHR0cDonOiA4MCxcblx0J2h0dHBzOic6IDQ0Myxcblx0J2Z0cDonOiAyMVxufTtcblxuLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSBgLy9gYCBiaXRcbnZhciBzbGFzaGVkUHJvdG9jb2wgPSB7XG5cdCdodHRwJzogdHJ1ZSxcblx0J2h0dHBzJzogdHJ1ZSxcblx0J2Z0cCc6IHRydWUsXG5cdCdnb3BoZXInOiB0cnVlLFxuXHQnZmlsZSc6IHRydWUsXG5cdCdodHRwOic6IHRydWUsXG5cdCdodHRwczonOiB0cnVlLFxuXHQnZnRwOic6IHRydWUsXG5cdCdnb3BoZXI6JzogdHJ1ZSxcblx0J2ZpbGU6JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gdGVzdFBhcmFtZXRlcihuYW1lLCBmaWx0ZXJzKSB7XG5cdHJldHVybiBmaWx0ZXJzLnNvbWUoZnVuY3Rpb24gKGZpbHRlcikge1xuXHRcdHJldHVybiBmaWx0ZXIgaW5zdGFuY2VvZiBSZWdFeHAgPyBmaWx0ZXIudGVzdChuYW1lKSA6IGZpbHRlciA9PT0gbmFtZTtcblx0fSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuXHRvcHRzID0gb2JqZWN0QXNzaWduKHtcblx0XHRub3JtYWxpemVQcm90b2NvbDogdHJ1ZSxcblx0XHRub3JtYWxpemVIdHRwczogZmFsc2UsXG5cdFx0c3RyaXBGcmFnbWVudDogdHJ1ZSxcblx0XHRzdHJpcFdXVzogdHJ1ZSxcblx0XHRyZW1vdmVRdWVyeVBhcmFtZXRlcnM6IFsvXnV0bV9cXHcrL2ldLFxuXHRcdHJlbW92ZVRyYWlsaW5nU2xhc2g6IHRydWUsXG5cdFx0cmVtb3ZlRGlyZWN0b3J5SW5kZXg6IGZhbHNlXG5cdH0sIG9wdHMpO1xuXG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG5cdH1cblxuXHR2YXIgaGFzUmVsYXRpdmVQcm90b2NvbCA9IHN0ci5pbmRleE9mKCcvLycpID09PSAwO1xuXG5cdC8vIHByZXBlbmQgcHJvdG9jb2xcblx0c3RyID0gcHJlcGVuZEh0dHAoc3RyLnRyaW0oKSkucmVwbGFjZSgvXlxcL1xcLy8sICdodHRwOi8vJyk7XG5cblx0dmFyIHVybE9iaiA9IHVybC5wYXJzZShzdHIpO1xuXG5cdGlmIChvcHRzLm5vcm1hbGl6ZUh0dHBzICYmIHVybE9iai5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcblx0XHR1cmxPYmoucHJvdG9jb2wgPSAnaHR0cDonO1xuXHR9XG5cblx0aWYgKCF1cmxPYmouaG9zdG5hbWUgJiYgIXVybE9iai5wYXRobmFtZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBVUkwnKTtcblx0fVxuXG5cdC8vIHByZXZlbnQgdGhlc2UgZnJvbSBiZWluZyB1c2VkIGJ5IGB1cmwuZm9ybWF0YFxuXHRkZWxldGUgdXJsT2JqLmhvc3Q7XG5cdGRlbGV0ZSB1cmxPYmoucXVlcnk7XG5cblx0Ly8gcmVtb3ZlIGZyYWdtZW50XG5cdGlmIChvcHRzLnN0cmlwRnJhZ21lbnQpIHtcblx0XHRkZWxldGUgdXJsT2JqLmhhc2g7XG5cdH1cblxuXHQvLyByZW1vdmUgZGVmYXVsdCBwb3J0XG5cdHZhciBwb3J0ID0gREVGQVVMVF9QT1JUU1t1cmxPYmoucHJvdG9jb2xdO1xuXHRpZiAoTnVtYmVyKHVybE9iai5wb3J0KSA9PT0gcG9ydCkge1xuXHRcdGRlbGV0ZSB1cmxPYmoucG9ydDtcblx0fVxuXG5cdC8vIHJlbW92ZSBkdXBsaWNhdGUgc2xhc2hlc1xuXHRpZiAodXJsT2JqLnBhdGhuYW1lKSB7XG5cdFx0dXJsT2JqLnBhdGhuYW1lID0gdXJsT2JqLnBhdGhuYW1lLnJlcGxhY2UoL1xcL3syLH0vZywgJy8nKTtcblx0fVxuXG5cdC8vIGRlY29kZSBVUkkgb2N0ZXRzXG5cdGlmICh1cmxPYmoucGF0aG5hbWUpIHtcblx0XHR1cmxPYmoucGF0aG5hbWUgPSBkZWNvZGVVUkkodXJsT2JqLnBhdGhuYW1lKTtcblx0fVxuXG5cdC8vIHJlbW92ZSBkaXJlY3RvcnkgaW5kZXhcblx0aWYgKG9wdHMucmVtb3ZlRGlyZWN0b3J5SW5kZXggPT09IHRydWUpIHtcblx0XHRvcHRzLnJlbW92ZURpcmVjdG9yeUluZGV4ID0gWy9eaW5kZXhcXC5bYS16XSskL107XG5cdH1cblxuXHRpZiAoQXJyYXkuaXNBcnJheShvcHRzLnJlbW92ZURpcmVjdG9yeUluZGV4KSAmJiBvcHRzLnJlbW92ZURpcmVjdG9yeUluZGV4Lmxlbmd0aCkge1xuXHRcdHZhciBwYXRoQ29tcG9uZW50cyA9IHVybE9iai5wYXRobmFtZS5zcGxpdCgnLycpO1xuXHRcdHZhciBsYXN0Q29tcG9uZW50ID0gcGF0aENvbXBvbmVudHNbcGF0aENvbXBvbmVudHMubGVuZ3RoIC0gMV07XG5cblx0XHRpZiAodGVzdFBhcmFtZXRlcihsYXN0Q29tcG9uZW50LCBvcHRzLnJlbW92ZURpcmVjdG9yeUluZGV4KSkge1xuXHRcdFx0cGF0aENvbXBvbmVudHMgPSBwYXRoQ29tcG9uZW50cy5zbGljZSgwLCBwYXRoQ29tcG9uZW50cy5sZW5ndGggLSAxKTtcblx0XHRcdHVybE9iai5wYXRobmFtZSA9IHBhdGhDb21wb25lbnRzLnNsaWNlKDEpLmpvaW4oJy8nKSArICcvJztcblx0XHR9XG5cdH1cblxuXHQvLyByZXNvbHZlIHJlbGF0aXZlIHBhdGhzLCBidXQgb25seSBmb3Igc2xhc2hlZCBwcm90b2NvbHNcblx0aWYgKHNsYXNoZWRQcm90b2NvbFt1cmxPYmoucHJvdG9jb2xdKSB7XG5cdFx0dmFyIGRvbWFpbiA9IHVybE9iai5wcm90b2NvbCArICcvLycgKyB1cmxPYmouaG9zdG5hbWU7XG5cdFx0dmFyIHJlbGF0aXZlID0gdXJsLnJlc29sdmUoZG9tYWluLCB1cmxPYmoucGF0aG5hbWUpO1xuXHRcdHVybE9iai5wYXRobmFtZSA9IHJlbGF0aXZlLnJlcGxhY2UoZG9tYWluLCAnJyk7XG5cdH1cblxuXHRpZiAodXJsT2JqLmhvc3RuYW1lKSB7XG5cdFx0Ly8gSUROIHRvIFVuaWNvZGVcblx0XHR1cmxPYmouaG9zdG5hbWUgPSBwdW55Y29kZS50b1VuaWNvZGUodXJsT2JqLmhvc3RuYW1lKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0Ly8gcmVtb3ZlIHRyYWlsaW5nIGRvdFxuXHRcdHVybE9iai5ob3N0bmFtZSA9IHVybE9iai5ob3N0bmFtZS5yZXBsYWNlKC9cXC4kLywgJycpO1xuXG5cdFx0Ly8gcmVtb3ZlIGB3d3cuYFxuXHRcdGlmIChvcHRzLnN0cmlwV1dXKSB7XG5cdFx0XHR1cmxPYmouaG9zdG5hbWUgPSB1cmxPYmouaG9zdG5hbWUucmVwbGFjZSgvXnd3d1xcLi8sICcnKTtcblx0XHR9XG5cdH1cblxuXHQvLyByZW1vdmUgVVJMIHdpdGggZW1wdHkgcXVlcnkgc3RyaW5nXG5cdGlmICh1cmxPYmouc2VhcmNoID09PSAnPycpIHtcblx0XHRkZWxldGUgdXJsT2JqLnNlYXJjaDtcblx0fVxuXG5cdHZhciBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVN0cmluZy5wYXJzZSh1cmxPYmouc2VhcmNoKTtcblxuXHQvLyByZW1vdmUgcXVlcnkgdW53YW50ZWQgcGFyYW1ldGVyc1xuXHRpZiAoQXJyYXkuaXNBcnJheShvcHRzLnJlbW92ZVF1ZXJ5UGFyYW1ldGVycykpIHtcblx0XHRmb3IgKHZhciBrZXkgaW4gcXVlcnlQYXJhbWV0ZXJzKSB7XG5cdFx0XHRpZiAodGVzdFBhcmFtZXRlcihrZXksIG9wdHMucmVtb3ZlUXVlcnlQYXJhbWV0ZXJzKSkge1xuXHRcdFx0XHRkZWxldGUgcXVlcnlQYXJhbWV0ZXJzW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gc29ydCBxdWVyeSBwYXJhbWV0ZXJzXG5cdHVybE9iai5zZWFyY2ggPSBxdWVyeVN0cmluZy5zdHJpbmdpZnkoc29ydEtleXMocXVlcnlQYXJhbWV0ZXJzKSk7XG5cblx0Ly8gZGVjb2RlIHF1ZXJ5IHBhcmFtZXRlcnNcblx0dXJsT2JqLnNlYXJjaCA9IGRlY29kZVVSSUNvbXBvbmVudCh1cmxPYmouc2VhcmNoKTtcblxuXHQvLyB0YWtlIGFkdmFudGFnZSBvZiBtYW55IG9mIHRoZSBOb2RlIGB1cmxgIG5vcm1hbGl6YXRpb25zXG5cdHN0ciA9IHVybC5mb3JtYXQodXJsT2JqKTtcblxuXHQvLyByZW1vdmUgZW5kaW5nIGAvYFxuXHRpZiAob3B0cy5yZW1vdmVUcmFpbGluZ1NsYXNoIHx8IHVybE9iai5wYXRobmFtZSA9PT0gJy8nKSB7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cdH1cblxuXHQvLyByZXN0b3JlIHJlbGF0aXZlIHByb3RvY29sLCBpZiBhcHBsaWNhYmxlXG5cdGlmIChoYXNSZWxhdGl2ZVByb3RvY29sICYmICFvcHRzLm5vcm1hbGl6ZVByb3RvY29sKSB7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL15odHRwOlxcL1xcLy8sICcvLycpO1xuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn07XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsKSB7XG5cdGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nLCBnb3QgJyArIHR5cGVvZiB1cmwpO1xuXHR9XG5cblx0dXJsID0gdXJsLnRyaW0oKTtcblxuXHRpZiAoL15cXC4qXFwvfF4oPyFsb2NhbGhvc3QpXFx3KzovLnRlc3QodXJsKSkge1xuXHRcdHJldHVybiB1cmw7XG5cdH1cblxuXHRyZXR1cm4gdXJsLnJlcGxhY2UoL14oPyEoPzpcXHcrOik/XFwvXFwvKS8sICdodHRwOi8vJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5jb25zdCBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cbi8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cbmNvbnN0IGJhc2UgPSAzNjtcbmNvbnN0IHRNaW4gPSAxO1xuY29uc3QgdE1heCA9IDI2O1xuY29uc3Qgc2tldyA9IDM4O1xuY29uc3QgZGFtcCA9IDcwMDtcbmNvbnN0IGluaXRpYWxCaWFzID0gNzI7XG5jb25zdCBpbml0aWFsTiA9IDEyODsgLy8gMHg4MFxuY29uc3QgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG5cbi8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5jb25zdCByZWdleFB1bnljb2RlID0gL154bi0tLztcbmNvbnN0IHJlZ2V4Tm9uQVNDSUkgPSAvW15cXDAtXFx4N0VdLzsgLy8gbm9uLUFTQ0lJIGNoYXJzXG5jb25zdCByZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cbi8qKiBFcnJvciBtZXNzYWdlcyAqL1xuY29uc3QgZXJyb3JzID0ge1xuXHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xufTtcblxuLyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuY29uc3QgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xuY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuY29uc3Qgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbi8qKlxuICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcbn1cblxuLyoqXG4gKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG4gKiBpdGVtLlxuICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7XG5cdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRsZXQgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG4gKiBhZGRyZXNzZXMuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuICogY2hhcmFjdGVyLlxuICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRjb25zdCBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRsZXQgcmVzdWx0ID0gJyc7XG5cdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdH1cblx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRjb25zdCBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0Y29uc3QgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZGVjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRjb25zdCBvdXRwdXQgPSBbXTtcblx0bGV0IGNvdW50ZXIgPSAwO1xuXHRjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdGNvbnN0IHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHQvLyBJdCdzIGEgaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyLlxuXHRcdFx0Y29uc3QgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG5cdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuXHRcdFx0XHQvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcbiAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG4gKiBAbmFtZSBlbmNvZGVcbiAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG4gKi9cbmNvbnN0IHVjczJlbmNvZGUgPSBhcnJheSA9PiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5hcnJheSk7XG5cbi8qKlxuICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG4gKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG4gKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cbiAqL1xuY29uc3QgYmFzaWNUb0RpZ2l0ID0gZnVuY3Rpb24oY29kZVBvaW50KSB7XG5cdGlmIChjb2RlUG9pbnQgLSAweDMwIDwgMHgwQSkge1xuXHRcdHJldHVybiBjb2RlUG9pbnQgLSAweDE2O1xuXHR9XG5cdGlmIChjb2RlUG9pbnQgLSAweDQxIDwgMHgxQSkge1xuXHRcdHJldHVybiBjb2RlUG9pbnQgLSAweDQxO1xuXHR9XG5cdGlmIChjb2RlUG9pbnQgLSAweDYxIDwgMHgxQSkge1xuXHRcdHJldHVybiBjb2RlUG9pbnQgLSAweDYxO1xuXHR9XG5cdHJldHVybiBiYXNlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3JcbiAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG4gKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcbiAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG4gKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuICovXG5jb25zdCBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbihkaWdpdCwgZmxhZykge1xuXHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcbn07XG5cbi8qKlxuICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBhZGFwdCA9IGZ1bmN0aW9uKGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRsZXQgayA9IDA7XG5cdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdH1cblx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG4gKiBzeW1ib2xzLlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKi9cbmNvbnN0IGRlY29kZSA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdC8vIERvbid0IHVzZSBVQ1MtMi5cblx0Y29uc3Qgb3V0cHV0ID0gW107XG5cdGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXHRsZXQgaSA9IDA7XG5cdGxldCBuID0gaW5pdGlhbE47XG5cdGxldCBiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdGxldCBiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdGlmIChiYXNpYyA8IDApIHtcblx0XHRiYXNpYyA9IDA7XG5cdH1cblxuXHRmb3IgKGxldCBqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0fVxuXHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHR9XG5cblx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdGZvciAobGV0IGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRsZXQgb2xkaSA9IGk7XG5cdFx0Zm9yIChsZXQgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0Y29uc3QgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdH1cblxuXHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0aSAlPSBvdXQ7XG5cblx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0LlxuXHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHR9XG5cblx0cmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLm91dHB1dCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKi9cbmNvbnN0IGVuY29kZSA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdGNvbnN0IG91dHB1dCA9IFtdO1xuXG5cdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG5cdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0Ly8gQ2FjaGUgdGhlIGxlbmd0aC5cblx0bGV0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlLlxuXHRsZXQgbiA9IGluaXRpYWxOO1xuXHRsZXQgZGVsdGEgPSAwO1xuXHRsZXQgYmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMuXG5cdGZvciAoY29uc3QgY3VycmVudFZhbHVlIG9mIGlucHV0KSB7XG5cdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHR9XG5cdH1cblxuXHRsZXQgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXHRsZXQgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDtcblxuXHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIHdpdGggYSBkZWxpbWl0ZXIgdW5sZXNzIGl0J3MgZW1wdHkuXG5cdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdH1cblxuXHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRsZXQgbSA9IG1heEludDtcblx0XHRmb3IgKGNvbnN0IGN1cnJlbnRWYWx1ZSBvZiBpbnB1dCkge1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cuXG5cdFx0Y29uc3QgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHR9XG5cblx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdG4gPSBtO1xuXG5cdFx0Zm9yIChjb25zdCBjdXJyZW50VmFsdWUgb2YgaW5wdXQpIHtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG5cdFx0XHRcdGxldCBxID0gZGVsdGE7XG5cdFx0XHRcdGZvciAobGV0IGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdGNvbnN0IHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnN0IHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRjb25zdCBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0KytkZWx0YTtcblx0XHQrK247XG5cblx0fVxuXHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG4gKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG4gKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cbiAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG4gKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcbiAqIHN0cmluZy5cbiAqL1xuY29uc3QgdG9Vbmljb2RlID0gZnVuY3Rpb24oaW5wdXQpIHtcblx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdDogc3RyaW5nO1xuXHR9KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG4gKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcbiAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuICogQVNDSUkuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG4gKiBVbmljb2RlIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3JcbiAqIGVtYWlsIGFkZHJlc3MuXG4gKi9cbmNvbnN0IHRvQVNDSUkgPSBmdW5jdGlvbihpbnB1dCkge1xuXHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdDogc3RyaW5nO1xuXHR9KTtcbn07XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4vKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5jb25zdCBwdW55Y29kZSA9IHtcblx0LyoqXG5cdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEB0eXBlIFN0cmluZ1xuXHQgKi9cblx0J3ZlcnNpb24nOiAnMi4xLjAnLFxuXHQvKipcblx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdCd1Y3MyJzoge1xuXHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdH0sXG5cdCdkZWNvZGUnOiBkZWNvZGUsXG5cdCdlbmNvZGUnOiBlbmNvZGUsXG5cdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxufTtcblxuZXhwb3J0IHsgdWNzMmRlY29kZSwgdWNzMmVuY29kZSwgZGVjb2RlLCBlbmNvZGUsIHRvQVNDSUksIHRvVW5pY29kZSB9O1xuZXhwb3J0IGRlZmF1bHQgcHVueWNvZGU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3RyaWN0VXJpRW5jb2RlID0gcmVxdWlyZSgnc3RyaWN0LXVyaS1lbmNvZGUnKTtcbnZhciBvYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbmZ1bmN0aW9uIGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRzKSB7XG5cdHN3aXRjaCAob3B0cy5hcnJheUZvcm1hdCkge1xuXHRcdGNhc2UgJ2luZGV4Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgaW5kZXgpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gW1xuXHRcdFx0XHRcdGVuY29kZShrZXksIG9wdHMpLFxuXHRcdFx0XHRcdCdbJyxcblx0XHRcdFx0XHRpbmRleCxcblx0XHRcdFx0XHQnXSdcblx0XHRcdFx0XS5qb2luKCcnKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnWycsXG5cdFx0XHRcdFx0ZW5jb2RlKGluZGV4LCBvcHRzKSxcblx0XHRcdFx0XHQnXT0nLFxuXHRcdFx0XHRcdGVuY29kZSh2YWx1ZSwgb3B0cylcblx0XHRcdFx0XS5qb2luKCcnKTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgPyBlbmNvZGUoa2V5LCBvcHRzKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnW109Jyxcblx0XHRcdFx0XHRlbmNvZGUodmFsdWUsIG9wdHMpXG5cdFx0XHRcdF0uam9pbignJyk7XG5cdFx0XHR9O1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgPyBlbmNvZGUoa2V5LCBvcHRzKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnPScsXG5cdFx0XHRcdFx0ZW5jb2RlKHZhbHVlLCBvcHRzKVxuXHRcdFx0XHRdLmpvaW4oJycpO1xuXHRcdFx0fTtcblx0fVxufVxuXG5mdW5jdGlvbiBwYXJzZXJGb3JBcnJheUZvcm1hdChvcHRzKSB7XG5cdHZhciByZXN1bHQ7XG5cblx0c3dpdGNoIChvcHRzLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikge1xuXHRcdFx0XHRyZXN1bHQgPSAvXFxbKFxcZCopXFxdJC8uZXhlYyhrZXkpO1xuXG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFtcXGQqXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHt9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XVtyZXN1bHRbMV1dID0gdmFsdWU7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnYnJhY2tldCc6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7XG5cdFx0XHRcdHJlc3VsdCA9IC8oXFxbXFxdKSQvLmV4ZWMoa2V5KTtcblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcXSQvLCAnJyk7XG5cblx0XHRcdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBbdmFsdWVdO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBbXS5jb25jYXQoYWNjdW11bGF0b3Jba2V5XSwgdmFsdWUpO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0cykge1xuXHRpZiAob3B0cy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0cy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24ga2V5c1NvcnRlcihpbnB1dCkge1xuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQuc29ydCgpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4ga2V5c1NvcnRlcihPYmplY3Qua2V5cyhpbnB1dCkpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdHJldHVybiBOdW1iZXIoYSkgLSBOdW1iZXIoYik7XG5cdFx0fSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBpbnB1dFtrZXldO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5leHBvcnRzLmV4dHJhY3QgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiBzdHIuc3BsaXQoJz8nKVsxXSB8fCAnJztcbn07XG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7XG5cdG9wdHMgPSBvYmplY3RBc3NpZ24oe2FycmF5Rm9ybWF0OiAnbm9uZSd9LCBvcHRzKTtcblxuXHR2YXIgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0cyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZy9pc3N1ZXMvNDdcblx0dmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHN0ciA9IHN0ci50cmltKCkucmVwbGFjZSgvXihcXD98I3wmKS8sICcnKTtcblxuXHRpZiAoIXN0cikge1xuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRzdHIuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuXHRcdHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG5cdFx0Ly8gRmlyZWZveCAocHJlIDQwKSBkZWNvZGVzIGAlM0RgIHRvIGA9YFxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nL3B1bGwvMzdcblx0XHR2YXIga2V5ID0gcGFydHMuc2hpZnQoKTtcblx0XHR2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzLmpvaW4oJz0nKSA6IHVuZGVmaW5lZDtcblxuXHRcdC8vIG1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG5cdFx0Ly8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuXHRcdHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuXG5cdFx0Zm9ybWF0dGVyKGRlY29kZVVSSUNvbXBvbmVudChrZXkpLCB2YWwsIHJldCk7XG5cdH0pO1xuXG5cdHJldHVybiBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7XG5cdFx0dmFyIHZhbCA9IHJldFtrZXldO1xuXHRcdGlmIChCb29sZWFuKHZhbCkgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0Ly8gU29ydCBvYmplY3Qga2V5cywgbm90IHZhbHVlc1xuXHRcdFx0cmVzdWx0W2tleV0gPSBrZXlzU29ydGVyKHZhbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufTtcblxuZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG5cdHZhciBkZWZhdWx0cyA9IHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZSdcblx0fTtcblxuXHRvcHRzID0gb2JqZWN0QXNzaWduKGRlZmF1bHRzLCBvcHRzKTtcblxuXHR2YXIgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdHMpO1xuXG5cdHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLnNvcnQoKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciB2YWwgPSBvYmpba2V5XTtcblxuXHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmICh2YWwgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRzKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cblx0XHRcdHZhbC5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcblx0XHRcdFx0aWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGZvcm1hdHRlcihrZXksIHZhbDIsIHJlc3VsdC5sZW5ndGgpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0cykgKyAnPScgKyBlbmNvZGUodmFsLCBvcHRzKTtcblx0fSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG5cdFx0cmV0dXJuIHgubGVuZ3RoID4gMDtcblx0fSkuam9pbignJicpIDogJyc7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBvYmpba10ubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzUGxhaW5PYmogPSByZXF1aXJlKCdpcy1wbGFpbi1vYmonKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG5cdGlmICghaXNQbGFpbk9iaihvYmopKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBwbGFpbiBvYmplY3QnKTtcblx0fVxuXG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXG5cdC8vIERFUFJFQ0FURURcblx0aWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0b3B0cyA9IHtjb21wYXJlOiBvcHRzfTtcblx0fVxuXG5cdHZhciBkZWVwID0gb3B0cy5kZWVwO1xuXHR2YXIgc2VlbklucHV0ID0gW107XG5cdHZhciBzZWVuT3V0cHV0ID0gW107XG5cblx0dmFyIHNvcnRLZXlzID0gZnVuY3Rpb24gKHgpIHtcblx0XHR2YXIgc2VlbkluZGV4ID0gc2VlbklucHV0LmluZGV4T2YoeCk7XG5cblx0XHRpZiAoc2VlbkluZGV4ICE9PSAtMSkge1xuXHRcdFx0cmV0dXJuIHNlZW5PdXRwdXRbc2VlbkluZGV4XTtcblx0XHR9XG5cblx0XHR2YXIgcmV0ID0ge307XG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyh4KS5zb3J0KG9wdHMuY29tcGFyZSk7XG5cblx0XHRzZWVuSW5wdXQucHVzaCh4KTtcblx0XHRzZWVuT3V0cHV0LnB1c2gocmV0KTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGtleSA9IGtleXNbaV07XG5cdFx0XHR2YXIgdmFsID0geFtrZXldO1xuXG5cdFx0XHRyZXRba2V5XSA9IGRlZXAgJiYgaXNQbGFpbk9iaih2YWwpID8gc29ydEtleXModmFsKSA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xuXG5cdHJldHVybiBzb3J0S2V5cyhvYmopO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cikge1xuXHRyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCkqXS9nLCBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdH0pO1xufTtcbiIsIi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuMy4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiZcblx0XHQhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0IW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG5cdH1cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuXHQgKiBpdGVtLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgc2ltcGxlIGBBcnJheSNtYXBgLWxpa2Ugd3JhcHBlciB0byB3b3JrIHdpdGggZG9tYWluIG5hbWUgc3RyaW5ncyBvciBlbWFpbFxuXHQgKiBhZGRyZXNzZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuXHQgKiBjaGFyYWN0ZXIuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrXG5cdCAqIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHtcblx0XHR2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcblx0XHR2YXIgcmVzdWx0ID0gJyc7XG5cdFx0aWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcblx0XHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0XHRyZXN1bHQgPSBwYXJ0c1swXSArICdAJztcblx0XHRcdHN0cmluZyA9IHBhcnRzWzFdO1xuXHRcdH1cblx0XHQvLyBBdm9pZCBgc3BsaXQocmVnZXgpYCBmb3IgSUU4IGNvbXBhdGliaWxpdHkuIFNlZSAjMTcuXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcblx0XHR2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG5cdFx0dmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbignLicpO1xuXHRcdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcblx0ICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuXHQgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuXHQgKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcblx0ICogbWF0Y2hpbmcgVVRGLTE2LlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmVuY29kZWBcblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjMuMicsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHsgLy8gaW4gTm9kZS5qcyBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKGtleSBpbiBwdW55Y29kZSkge1xuXHRcdFx0XHRwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgeyAvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHB1bnljb2RlID0gcmVxdWlyZSgncHVueWNvZGUnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7XG5leHBvcnRzLnJlc29sdmVPYmplY3QgPSB1cmxSZXNvbHZlT2JqZWN0O1xuZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7XG5cbmV4cG9ydHMuVXJsID0gVXJsO1xuXG5mdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGEgc2ltcGxlIHBhdGggVVJMXG4gICAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbiAgICAvLyBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLlxuICAgIGRlbGltcyA9IFsnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCddLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgICB1bndpc2UgPSBbJ3snLCAnfScsICd8JywgJ1xcXFwnLCAnXicsICdgJ10uY29uY2F0KGRlbGltcyksXG5cbiAgICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gICAgYXV0b0VzY2FwZSA9IFsnXFwnJ10uY29uY2F0KHVud2lzZSksXG4gICAgLy8gQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS5cbiAgICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gICAgLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4gICAgLy8gdGhlbS5cbiAgICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgICBob3N0RW5kaW5nQ2hhcnMgPSBbJy8nLCAnPycsICcjJ10sXG4gICAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsXG4gICAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLyxcbiAgICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbiAgICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgICBob3N0bGVzc1Byb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gICAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgICAgJ2h0dHAnOiB0cnVlLFxuICAgICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAgICdmdHAnOiB0cnVlLFxuICAgICAgJ2dvcGhlcic6IHRydWUsXG4gICAgICAnZmlsZSc6IHRydWUsXG4gICAgICAnaHR0cDonOiB0cnVlLFxuICAgICAgJ2h0dHBzOic6IHRydWUsXG4gICAgICAnZnRwOic6IHRydWUsXG4gICAgICAnZ29waGVyOic6IHRydWUsXG4gICAgICAnZmlsZTonOiB0cnVlXG4gICAgfSxcbiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiB1dGlsLmlzT2JqZWN0KHVybCkgJiYgdXJsIGluc3RhbmNlb2YgVXJsKSByZXR1cm4gdXJsO1xuXG4gIHZhciB1ID0gbmV3IFVybDtcbiAgdS5wYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbiAgcmV0dXJuIHU7XG59XG5cblVybC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbih1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICghdXRpbC5pc1N0cmluZyh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhcmFtZXRlciAndXJsJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgXCIgKyB0eXBlb2YgdXJsKTtcbiAgfVxuXG4gIC8vIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLlxuICAvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcbiAgLy8gU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTZcbiAgdmFyIHF1ZXJ5SW5kZXggPSB1cmwuaW5kZXhPZignPycpLFxuICAgICAgc3BsaXR0ZXIgPVxuICAgICAgICAgIChxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSkgPyAnPycgOiAnIycsXG4gICAgICB1U3BsaXQgPSB1cmwuc3BsaXQoc3BsaXR0ZXIpLFxuICAgICAgc2xhc2hSZWdleCA9IC9cXFxcL2c7XG4gIHVTcGxpdFswXSA9IHVTcGxpdFswXS5yZXBsYWNlKHNsYXNoUmVnZXgsICcvJyk7XG4gIHVybCA9IHVTcGxpdC5qb2luKHNwbGl0dGVyKTtcblxuICB2YXIgcmVzdCA9IHVybDtcblxuICAvLyB0cmltIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAvLyBUaGlzIGlzIHRvIHN1cHBvcnQgcGFyc2Ugc3R1ZmYgbGlrZSBcIiAgaHR0cDovL2Zvby5jb20gIFxcblwiXG4gIHJlc3QgPSByZXN0LnRyaW0oKTtcblxuICBpZiAoIXNsYXNoZXNEZW5vdGVIb3N0ICYmIHVybC5zcGxpdCgnIycpLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIFRyeSBmYXN0IHBhdGggcmVnZXhwXG4gICAgdmFyIHNpbXBsZVBhdGggPSBzaW1wbGVQYXRoUGF0dGVybi5leGVjKHJlc3QpO1xuICAgIGlmIChzaW1wbGVQYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSByZXN0O1xuICAgICAgdGhpcy5ocmVmID0gcmVzdDtcbiAgICAgIHRoaXMucGF0aG5hbWUgPSBzaW1wbGVQYXRoWzFdO1xuICAgICAgaWYgKHNpbXBsZVBhdGhbMl0pIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSBzaW1wbGVQYXRoWzJdO1xuICAgICAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSB0aGlzLnNlYXJjaC5zdWJzdHIoMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXTtcbiAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5wcm90b2NvbCA9IGxvd2VyUHJvdG87XG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7XG4gIH1cblxuICAvLyBmaWd1cmUgb3V0IGlmIGl0J3MgZ290IGEgaG9zdFxuICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsXG4gIC8vIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3NcbiAgLy8gaG93IHRoZSBicm93c2VyIHJlc29sdmVzIHJlbGF0aXZlIFVSTHMuXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkge1xuICAgIHZhciBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICcvLyc7XG4gICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHtcbiAgICAgIHJlc3QgPSByZXN0LnN1YnN0cigyKTtcbiAgICAgIHRoaXMuc2xhc2hlcyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJlxuICAgICAgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHtcblxuICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgIC8vXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgIC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgLy8gY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgLy9cbiAgICAvLyBleDpcbiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgIC8vIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcblxuICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAvLyBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIHZhciBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob3N0RW5kaW5nQ2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG5cbiAgICAvLyBhdCB0aGlzIHBvaW50LCBlaXRoZXIgd2UgaGF2ZSBhbiBleHBsaWNpdCBwb2ludCB3aGVyZSB0aGVcbiAgICAvLyBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci5cbiAgICB2YXIgYXV0aCwgYXRTaWduO1xuICAgIGlmIChob3N0RW5kID09PSAtMSkge1xuICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS5cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYXRTaWduIG11c3QgYmUgaW4gYXV0aCBwb3J0aW9uLlxuICAgICAgLy8gaHR0cDovL2FAYi9jQGQgPT4gaG9zdDpiIGF1dGg6YSBwYXRoOi9jQGRcbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnLCBob3N0RW5kKTtcbiAgICB9XG5cbiAgICAvLyBOb3cgd2UgaGF2ZSBhIHBvcnRpb24gd2hpY2ggaXMgZGVmaW5pdGVseSB0aGUgYXV0aC5cbiAgICAvLyBQdWxsIHRoYXQgb2ZmLlxuICAgIGlmIChhdFNpZ24gIT09IC0xKSB7XG4gICAgICBhdXRoID0gcmVzdC5zbGljZSgwLCBhdFNpZ24pO1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7XG4gICAgICB0aGlzLmF1dGggPSBkZWNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhclxuICAgIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihub25Ib3N0Q2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuXG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKVxuICAgICAgaG9zdEVuZCA9IHJlc3QubGVuZ3RoO1xuXG4gICAgdGhpcy5ob3N0ID0gcmVzdC5zbGljZSgwLCBob3N0RW5kKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZShob3N0RW5kKTtcblxuICAgIC8vIHB1bGwgb3V0IHBvcnQuXG4gICAgdGhpcy5wYXJzZUhvc3QoKTtcblxuICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcblxuICAgIC8vIGlmIGhvc3RuYW1lIGJlZ2lucyB3aXRoIFsgYW5kIGVuZHMgd2l0aCBdXG4gICAgLy8gYXNzdW1lIHRoYXQgaXQncyBhbiBJUHY2IGFkZHJlc3MuXG4gICAgdmFyIGlwdjZIb3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVbMF0gPT09ICdbJyAmJlxuICAgICAgICB0aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMV0gPT09ICddJztcblxuICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLlxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB2YXIgaG9zdHBhcnRzID0gdGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGhvc3RwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnQgPSBob3N0cGFydHNbaV07XG4gICAgICAgIGlmICghcGFydCkgY29udGludWU7XG4gICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykge1xuICAgICAgICAgICAgICAvLyB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdFxuICAgICAgICAgICAgICAvLyBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nXG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5XG4gICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChiaXQpIHtcbiAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7XG4gICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSAnLycgKyBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBob3N0bmFtZXMgYXJlIGFsd2F5cyBsb3dlciBjYXNlLlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgLy8gSUROQSBTdXBwb3J0OiBSZXR1cm5zIGEgcHVueWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIFwiZG9tYWluXCIuXG4gICAgICAvLyBJdCBvbmx5IGNvbnZlcnRzIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB0aGF0XG4gICAgICAvLyBoYXZlIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmXG4gICAgICAvLyB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBBU0NJSS1vbmx5LlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5ob3N0bmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHAgPSB0aGlzLnBvcnQgPyAnOicgKyB0aGlzLnBvcnQgOiAnJztcbiAgICB2YXIgaCA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG4gICAgdGhpcy5ob3N0ID0gaCArIHA7XG4gICAgdGhpcy5ocmVmICs9IHRoaXMuaG9zdDtcblxuICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnN1YnN0cigxLCB0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykge1xuICAgICAgICByZXN0ID0gJy8nICsgcmVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBub3cgcmVzdCBpcyBzZXQgdG8gdGhlIHBvc3QtaG9zdCBzdHVmZi5cbiAgLy8gY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLlxuICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7XG5cbiAgICAvLyBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgXCJhdXRvRXNjYXBlXCIgY2hhcnMgZ2V0XG4gICAgLy8gZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5XG4gICAgLy8gbmVlZCB0byBiZS5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGF1dG9Fc2NhcGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYWUgPSBhdXRvRXNjYXBlW2ldO1xuICAgICAgaWYgKHJlc3QuaW5kZXhPZihhZSkgPT09IC0xKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHZhciBlc2MgPSBlbmNvZGVVUklDb21wb25lbnQoYWUpO1xuICAgICAgaWYgKGVzYyA9PT0gYWUpIHtcbiAgICAgICAgZXNjID0gZXNjYXBlKGFlKTtcbiAgICAgIH1cbiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaCAhPT0gLTEpIHtcbiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuXG4gICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7XG4gIH1cbiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTtcbiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTtcbiAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICB0aGlzLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHRoaXMucGF0aG5hbWUgPSByZXN0O1xuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcvJztcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgaWYgKHRoaXMucGF0aG5hbWUgfHwgdGhpcy5zZWFyY2gpIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJztcbiAgICB0aGlzLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmdcbmZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHtcbiAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC5cbiAgLy8gSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC5cbiAgLy8gdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5nc1xuICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLlxuICBpZiAodXRpbC5pc1N0cmluZyhvYmopKSBvYmogPSB1cmxQYXJzZShvYmopO1xuICBpZiAoIShvYmogaW5zdGFuY2VvZiBVcmwpKSByZXR1cm4gVXJsLnByb3RvdHlwZS5mb3JtYXQuY2FsbChvYmopO1xuICByZXR1cm4gb2JqLmZvcm1hdCgpO1xufVxuXG5VcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYXV0aCA9IHRoaXMuYXV0aCB8fCAnJztcbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpO1xuICAgIGF1dGggKz0gJ0AnO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdGhpcy5wcm90b2NvbCB8fCAnJyxcbiAgICAgIHBhdGhuYW1lID0gdGhpcy5wYXRobmFtZSB8fCAnJyxcbiAgICAgIGhhc2ggPSB0aGlzLmhhc2ggfHwgJycsXG4gICAgICBob3N0ID0gZmFsc2UsXG4gICAgICBxdWVyeSA9ICcnO1xuXG4gIGlmICh0aGlzLmhvc3QpIHtcbiAgICBob3N0ID0gYXV0aCArIHRoaXMuaG9zdDtcbiAgfSBlbHNlIGlmICh0aGlzLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAodGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgPT09IC0xID9cbiAgICAgICAgdGhpcy5ob3N0bmFtZSA6XG4gICAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpO1xuICAgIGlmICh0aGlzLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgdGhpcy5wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLnF1ZXJ5ICYmXG4gICAgICB1dGlsLmlzT2JqZWN0KHRoaXMucXVlcnkpICYmXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5KTtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSB0aGlzLnNlYXJjaCB8fCAocXVlcnkgJiYgKCc/JyArIHF1ZXJ5KSkgfHwgJyc7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIC8vIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLlxuICAvLyB1bmxlc3MgdGhleSBoYWQgdGhlbSB0byBiZWdpbiB3aXRoLlxuICBpZiAodGhpcy5zbGFzaGVzIHx8XG4gICAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBzZWFyY2ggPSAnPycgKyBzZWFyY2g7XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlKHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmVPYmplY3Qoc291cmNlLCByZWxhdGl2ZSkge1xuICBpZiAoIXNvdXJjZSkgcmV0dXJuIHJlbGF0aXZlO1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZU9iamVjdChyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIGlmICh1dGlsLmlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykge1xuICAgIHZhciB0a2V5ID0gdGtleXNbdGtdO1xuICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07XG4gIH1cblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIHZhciBya2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICBmb3IgKHZhciByayA9IDA7IHJrIDwgcmtleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTtcbiAgICAgIGlmIChya2V5ICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTtcbiAgICB9XG5cbiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJlxuICAgICAgICByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkge1xuICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuXG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLy8gaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgIC8vIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgIC8vIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgLy8gYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdO1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDtcbiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIgcmVsUGF0aCA9IChyZWxhdGl2ZS5wYXRobmFtZSB8fCAnJykuc3BsaXQoJy8nKTtcbiAgICAgIHdoaWxlIChyZWxQYXRoLmxlbmd0aCAmJiAhKHJlbGF0aXZlLmhvc3QgPSByZWxQYXRoLnNoaWZ0KCkpKTtcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdCkgcmVsYXRpdmUuaG9zdCA9ICcnO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0bmFtZSkgcmVsYXRpdmUuaG9zdG5hbWUgPSAnJztcbiAgICAgIGlmIChyZWxQYXRoWzBdICE9PSAnJykgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIGlmIChyZWxQYXRoLmxlbmd0aCA8IDIpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxQYXRoLmpvaW4oJy8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsYXRpdmUucGF0aG5hbWU7XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8ICcnO1xuICAgIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0O1xuICAgIHJlc3VsdC5wb3J0ID0gcmVsYXRpdmUucG9ydDtcbiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQucGF0aG5hbWUgfHwgcmVzdWx0LnNlYXJjaCkge1xuICAgICAgdmFyIHAgPSByZXN1bHQucGF0aG5hbWUgfHwgJyc7XG4gICAgICB2YXIgcyA9IHJlc3VsdC5zZWFyY2ggfHwgJyc7XG4gICAgICByZXN1bHQucGF0aCA9IHAgKyBzO1xuICAgIH1cbiAgICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhciBpc1NvdXJjZUFicyA9IChyZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSxcbiAgICAgIGlzUmVsQWJzID0gKFxuICAgICAgICAgIHJlbGF0aXZlLmhvc3QgfHxcbiAgICAgICAgICByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJ1xuICAgICAgKSxcbiAgICAgIG11c3RFbmRBYnMgPSAoaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHxcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5ob3N0ICYmIHJlbGF0aXZlLnBhdGhuYW1lKSksXG4gICAgICByZW1vdmVBbGxEb3RzID0gbXVzdEVuZEFicyxcbiAgICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHBzeWNob3RpYyA9IHJlc3VsdC5wcm90b2NvbCAmJiAhc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF07XG5cbiAgLy8gaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZVxuICAvLyBsaW5rcyBsaWtlIC4uLy4uIHNob3VsZCBiZSBhYmxlXG4gIC8vIHRvIGNyYXdsIHVwIHRvIHRoZSBob3N0bmFtZSwgYXMgd2VsbC4gIFRoaXMgaXMgc3RyYW5nZS5cbiAgLy8gcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy5cbiAgLy8gTGF0ZXIgb24sIHB1dCB0aGUgZmlyc3QgcGF0aCBwYXJ0IGludG8gdGhlIGhvc3QgZmllbGQuXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJztcbiAgICByZXN1bHQucG9ydCA9IG51bGw7XG4gICAgaWYgKHJlc3VsdC5ob3N0KSB7XG4gICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHNyY1BhdGhbMF0gPSByZXN1bHQuaG9zdDtcbiAgICAgIGVsc2Ugc3JjUGF0aC51bnNoaWZ0KHJlc3VsdC5ob3N0KTtcbiAgICB9XG4gICAgcmVzdWx0Lmhvc3QgPSAnJztcbiAgICBpZiAocmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lID0gbnVsbDtcbiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsO1xuICAgICAgaWYgKHJlbGF0aXZlLmhvc3QpIHtcbiAgICAgICAgaWYgKHJlbFBhdGhbMF0gPT09ICcnKSByZWxQYXRoWzBdID0gcmVsYXRpdmUuaG9zdDtcbiAgICAgICAgZWxzZSByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7XG4gICAgICB9XG4gICAgICByZWxhdGl2ZS5ob3N0ID0gbnVsbDtcbiAgICB9XG4gICAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgJiYgKHJlbFBhdGhbMF0gPT09ICcnIHx8IHNyY1BhdGhbMF0gPT09ICcnKTtcbiAgfVxuXG4gIGlmIChpc1JlbEFicykge1xuICAgIC8vIGl0J3MgYWJzb2x1dGUuXG4gICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0O1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IChyZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHNyY1BhdGggPSByZWxQYXRoO1xuICAgIC8vIGZhbGwgdGhyb3VnaCB0byB0aGUgZG90LWhhbmRsaW5nIGJlbG93LlxuICB9IGVsc2UgaWYgKHJlbFBhdGgubGVuZ3RoKSB7XG4gICAgLy8gaXQncyByZWxhdGl2ZVxuICAgIC8vIHRocm93IGF3YXkgdGhlIGV4aXN0aW5nIGZpbGUsIGFuZCB0YWtlIHRoZSBuZXcgcGF0aCBpbnN0ZWFkLlxuICAgIGlmICghc3JjUGF0aCkgc3JjUGF0aCA9IFtdO1xuICAgIHNyY1BhdGgucG9wKCk7XG4gICAgc3JjUGF0aCA9IHNyY1BhdGguY29uY2F0KHJlbFBhdGgpO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkge1xuICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLlxuICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChcbiAgICAgIChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0IHx8IHNyY1BhdGgubGVuZ3RoID4gMSkgJiZcbiAgICAgIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgfHwgbGFzdCA9PT0gJycpO1xuXG4gIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmICghbXVzdEVuZEFicyAmJiAhcmVtb3ZlQWxsRG90cykge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdXN0RW5kQWJzICYmIHNyY1BhdGhbMF0gIT09ICcnICYmXG4gICAgICAoIXNyY1BhdGhbMF0gfHwgc3JjUGF0aFswXS5jaGFyQXQoMCkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnB1c2goJycpO1xuICB9XG5cbiAgdmFyIGlzQWJzb2x1dGUgPSBzcmNQYXRoWzBdID09PSAnJyB8fFxuICAgICAgKHNyY1BhdGhbMF0gJiYgc3JjUGF0aFswXS5jaGFyQXQoMCkgPT09ICcvJyk7XG5cbiAgLy8gcHV0IHRoZSBob3N0IGJhY2tcbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gaXNBYnNvbHV0ZSA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1BhdGgubGVuZ3RoID8gc3JjUGF0aC5zaGlmdCgpIDogJyc7XG4gICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gIHZhciBwb3J0ID0gcG9ydFBhdHRlcm4uZXhlYyhob3N0KTtcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXTtcbiAgICBpZiAocG9ydCAhPT0gJzonKSB7XG4gICAgICB0aGlzLnBvcnQgPSBwb3J0LnN1YnN0cigxKTtcbiAgICB9XG4gICAgaG9zdCA9IGhvc3Quc3Vic3RyKDAsIGhvc3QubGVuZ3RoIC0gcG9ydC5sZW5ndGgpO1xuICB9XG4gIGlmIChob3N0KSB0aGlzLmhvc3RuYW1lID0gaG9zdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1N0cmluZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnc3RyaW5nJztcbiAgfSxcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuICB9LFxuICBpc051bGw6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09IG51bGw7XG4gIH1cbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uaS5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHsgaGFuZGxlcihleGVjT3B0aW9ucyk7IH0pO1xuXHRtb2R1bGUgPSBleGVjT3B0aW9ucy5tb2R1bGU7XG5cdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBleGVjdXRpb24gaW50ZXJjZXB0b3Jcbl9fd2VicGFja19yZXF1aXJlX18uaSA9IFtdO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiY29tcG9uZW50cy9cIiArIGNodW5rSWQgKyBcIi9pbmRleC5jc3NcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gXCJcIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gXCJkY2Q2NmI5MGUxZjdhZjI2NGU1Y1wiIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXM7XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdHZhciBtb2R1bGUgPSBvcHRpb25zLm1vZHVsZTtcblx0dmFyIHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKG9wdGlvbnMucmVxdWlyZSwgb3B0aW9ucy5pZCk7XG5cdG1vZHVsZS5ob3QgPSBjcmVhdGVNb2R1bGVIb3RPYmplY3Qob3B0aW9ucy5pZCwgbW9kdWxlKTtcblx0bW9kdWxlLnBhcmVudHMgPSBjdXJyZW50UGFyZW50cztcblx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdG9wdGlvbnMucmVxdWlyZSA9IHJlcXVpcmU7XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZShyZXF1aXJlLCBtb2R1bGVJZCkge1xuXHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblx0aWYgKCFtZSkgcmV0dXJuIHJlcXVpcmU7XG5cdHZhciBmbiA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcblx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRzID0gaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzO1xuXHRcdFx0XHRpZiAocGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRwYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG5cdFx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcblx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG5cdFx0XHRcdFx0cmVxdWVzdCArXG5cdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcblx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0KTtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXF1aXJlKHJlcXVlc3QpO1xuXHR9O1xuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVxdWlyZVtuYW1lXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXF1aXJlW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0Zm9yICh2YXIgbmFtZSBpbiByZXF1aXJlKSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpO1xuXHRcdH1cblx0fVxuXHRmbi5lID0gZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQpKTtcblx0fTtcblx0cmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7XG5cdHZhciBob3QgPSB7XG5cdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuXHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG5cdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcblx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcblx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcblx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblx0XHRfbWFpbjogY3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblx0XHRfcmVxdWlyZVNlbGY6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gbWUucGFyZW50cy5zbGljZSgpO1xuXHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gbW9kdWxlSWQ7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcblx0XHR9LFxuXG5cdFx0Ly8gTW9kdWxlIEFQSVxuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdH0sXG5cdFx0ZGVjbGluZTogZnVuY3Rpb24gKGRlcCkge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcblx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcblx0XHR9LFxuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJpZGxlXCI6XG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuXHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcblx0XHRcdFx0XHQocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIHx8IFtdKS5wdXNoKFxuXHRcdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlbWVudCBBUElcblx0XHRjaGVjazogaG90Q2hlY2ssXG5cdFx0YXBwbHk6IGhvdEFwcGx5LFxuXHRcdHN0YXR1czogZnVuY3Rpb24gKGwpIHtcblx0XHRcdGlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHR2YXIgaWR4ID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG5cdFx0XHRpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXG5cdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG5cdFx0ZGF0YTogY3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG5cdH07XG5cdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGhvdDtcbn1cblxuZnVuY3Rpb24gc2V0U3RhdHVzKG5ld1N0YXR1cykge1xuXHRjdXJyZW50U3RhdHVzID0gbmV3U3RhdHVzO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xufVxuXG5mdW5jdGlvbiB0cmFja0Jsb2NraW5nUHJvbWlzZShwcm9taXNlKSB7XG5cdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pIHtcblx0aWYgKGJsb2NraW5nUHJvbWlzZXMubGVuZ3RoID09PSAwKSByZXR1cm4gZm4oKTtcblx0dmFyIGJsb2NrZXIgPSBibG9ja2luZ1Byb21pc2VzO1xuXHRibG9ja2luZ1Byb21pc2VzID0gW107XG5cdHJldHVybiBQcm9taXNlLmFsbChibG9ja2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRzZXRTdGF0dXMoXCJjaGVja1wiKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaG1yTSgpLnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdGlmICghdXBkYXRlKSB7XG5cdFx0XHRzZXRTdGF0dXMoYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cblx0XHR2YXIgdXBkYXRlZE1vZHVsZXMgPSBbXTtcblx0XHRibG9ja2luZ1Byb21pc2VzID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblxuXHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1yQykucmVkdWNlKGZ1bmN0aW9uIChcblx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdGtleVxuXHRcdFx0KSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yQ1trZXldKFxuXHRcdFx0XHRcdHVwZGF0ZS5jLFxuXHRcdFx0XHRcdHVwZGF0ZS5yLFxuXHRcdFx0XHRcdHVwZGF0ZS5tLFxuXHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLFxuXHRcdFx0XHRcdHVwZGF0ZWRNb2R1bGVzXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybiBwcm9taXNlcztcblx0XHRcdH0sXG5cdFx0XHRbXSlcblx0XHQpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKGFwcGx5T25VcGRhdGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShhcHBseU9uVXBkYXRlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblxuXHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcInJlYWR5XCIpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQXBwbHkob3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRhcHBseUludmFsaWRhdGVkTW9kdWxlcygpO1xuXG5cdHZhciByZXN1bHRzID0gY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdFx0cmV0dXJuIGhhbmRsZXIob3B0aW9ucyk7XG5cdH0pO1xuXHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IHVuZGVmaW5lZDtcblxuXHR2YXIgZXJyb3JzID0gcmVzdWx0c1xuXHRcdC5tYXAoZnVuY3Rpb24gKHIpIHtcblx0XHRcdHJldHVybiByLmVycm9yO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcblx0XHRzZXRTdGF0dXMoXCJhYm9ydFwiKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcnNbMF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcblx0c2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcblxuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuZGlzcG9zZSkgcmVzdWx0LmRpc3Bvc2UoKTtcblx0fSk7XG5cblx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuXHRzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdGlmIChlcnJvcikge1xuXHRcdHNldFN0YXR1cyhcImZhaWxcIik7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucykudGhlbihmdW5jdGlvbiAobGlzdCkge1xuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxpc3Q7XG5cdFx0fSk7XG5cdH1cblxuXHRzZXRTdGF0dXMoXCJpZGxlXCIpO1xuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkge1xuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0aWYgKCFjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycykgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdFwiYXV0b2NvbXBsZXRlXCI6IDBcbn07XG5cblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGVzYWlmX2NvbXBvbmVudHNcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0gJiZcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZCAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IV9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdHZhciBhY2NlcHRDYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIG8gPSAwOyBvIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgbysrKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW29dO1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpdGVtLnJlcXVpcmUobW9kdWxlSWQpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSk7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yTSA9ICgpID0+IHtcblx0aWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0OiBuZWVkIGZldGNoIEFQSVwiKTtcblx0cmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuXHRcdGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSByZXR1cm47IC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcblx0XHRpZighcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHR9KTtcbn07XG5cbi8vIG5vIGRlZmVycmVkIHN0YXJ0dXBcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9jb21wb25lbnRzL2F1dG9jb21wbGV0ZS9pbmRleC5qc1wiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=