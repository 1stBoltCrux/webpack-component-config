/*! For license information please see index.js.LICENSE.txt */
(()=>{var e,t,r,n,o,s,i,a={"./components/label/index.js":(e,t,r)=>{"use strict";r.r(t);r("./components/label/index.scss")},"./node_modules/is-plain-obj/index.js":e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var r;return"[object Object]"===t.call(e)&&(null===(r=Object.getPrototypeOf(e))||r===Object.getPrototypeOf({}))}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var n=r("./node_modules/mini-css-extract-plugin/node_modules/normalize-url/index.js"),o=Object.create(null),s="undefined"==typeof document,i=Array.prototype.forEach;function a(){}function c(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(h(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.addEventListener("error",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){var t=document.querySelectorAll("link"),r=!1;return i.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);h(o)&&!0!==t.visited&&o&&(c(t,o),r=!0)}})),r}function l(){var e=document.querySelectorAll("link");i.call(e,(function(e){!0!==e.visited&&c(e)}))}function h(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(s)return console.log("no window.document found, will not HMR CSS"),a;var r,i,c,h=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),s=r[r.length-1];s&&(t=s.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")),{stripWWW:!1})})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void l();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),l())},i=50,c=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(c),c=setTimeout(n,i)}}},"./components/label/index.scss":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},"./node_modules/mini-css-extract-plugin/node_modules/normalize-url/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/url.js"),o=r("./node_modules/punycode/punycode.es6.js"),s=r("./node_modules/query-string/index.js"),i=r("./node_modules/prepend-http/index.js"),a=r("./node_modules/sort-keys/index.js"),c=r("./node_modules/object-assign/index.js"),u={"http:":80,"https:":443,"ftp:":21},l={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function h(e,t){return t.some((function(t){return t instanceof RegExp?t.test(e):t===e}))}e.exports=function(e,t){if(t=c({normalizeProtocol:!0,normalizeHttps:!1,stripFragment:!0,stripWWW:!0,removeQueryParameters:[/^utm_\w+/i],removeTrailingSlash:!0,removeDirectoryIndex:!1},t),"string"!=typeof e)throw new TypeError("Expected a string");var r=0===e.indexOf("//");e=i(e.trim()).replace(/^\/\//,"http://");var d=n.parse(e);if(t.normalizeHttps&&"https:"===d.protocol&&(d.protocol="http:"),!d.hostname&&!d.pathname)throw new Error("Invalid URL");delete d.host,delete d.query,t.stripFragment&&delete d.hash;var p=u[d.protocol];if(Number(d.port)===p&&delete d.port,d.pathname&&(d.pathname=d.pathname.replace(/\/{2,}/g,"/")),d.pathname&&(d.pathname=decodeURI(d.pathname)),!0===t.removeDirectoryIndex&&(t.removeDirectoryIndex=[/^index\.[a-z]+$/]),Array.isArray(t.removeDirectoryIndex)&&t.removeDirectoryIndex.length){var f=d.pathname.split("/");h(f[f.length-1],t.removeDirectoryIndex)&&(f=f.slice(0,f.length-1),d.pathname=f.slice(1).join("/")+"/")}if(l[d.protocol]){var m=d.protocol+"//"+d.hostname,v=n.resolve(m,d.pathname);d.pathname=v.replace(m,"")}d.hostname&&(d.hostname=o.toUnicode(d.hostname).toLowerCase(),d.hostname=d.hostname.replace(/\.$/,""),t.stripWWW&&(d.hostname=d.hostname.replace(/^www\./,""))),"?"===d.search&&delete d.search;var g=s.parse(d.search);if(Array.isArray(t.removeQueryParameters))for(var y in g)h(y,t.removeQueryParameters)&&delete g[y];return d.search=s.stringify(a(g)),d.search=decodeURIComponent(d.search),e=n.format(d),(t.removeTrailingSlash||"/"===d.pathname)&&(e=e.replace(/\/$/,"")),r&&!t.normalizeProtocol&&(e=e.replace(/^http:\/\//,"//")),e}},"./node_modules/object-assign/index.js":e=>{"use strict";var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,s){for(var i,a,c=o(e),u=1;u<arguments.length;u++){for(var l in i=Object(arguments[u]))r.call(i,l)&&(c[l]=i[l]);if(t){a=t(i);for(var h=0;h<a.length;h++)n.call(i,a[h])&&(c[a[h]]=i[a[h]])}}return c}},"./node_modules/prepend-http/index.js":e=>{"use strict";e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected a string, got "+typeof e);return e=e.trim(),/^\.*\/|^(?!localhost)\w+:/.test(e)?e:e.replace(/^(?!(?:\w+:)?\/\/)/,"http://")}},"./node_modules/punycode/punycode.es6.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ucs2decode:()=>p,ucs2encode:()=>f,decode:()=>g,encode:()=>y,toASCII:()=>j,toUnicode:()=>b,default:()=>x});const n=2147483647,o=36,s=/^xn--/,i=/[^\0-\x7E]/,a=/[\x2E\u3002\uFF0E\uFF61]/g,c={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},u=Math.floor,l=String.fromCharCode;function h(e){throw new RangeError(c[e])}function d(e,t){const r=e.split("@");let n="";r.length>1&&(n=r[0]+"@",e=r[1]);const o=function(e,t){const r=[];let n=e.length;for(;n--;)r[n]=t(e[n]);return r}((e=e.replace(a,".")).split("."),t).join(".");return n+o}function p(e){const t=[];let r=0;const n=e.length;for(;r<n;){const o=e.charCodeAt(r++);if(o>=55296&&o<=56319&&r<n){const n=e.charCodeAt(r++);56320==(64512&n)?t.push(((1023&o)<<10)+(1023&n)+65536):(t.push(o),r--)}else t.push(o)}return t}const f=e=>String.fromCodePoint(...e),m=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},v=function(e,t,r){let n=0;for(e=r?u(e/700):e>>1,e+=u(e/t);e>455;n+=o)e=u(e/35);return u(n+36*e/(e+38))},g=function(e){const t=[],r=e.length;let s=0,i=128,a=72,c=e.lastIndexOf("-");c<0&&(c=0);for(let r=0;r<c;++r)e.charCodeAt(r)>=128&&h("not-basic"),t.push(e.charCodeAt(r));for(let d=c>0?c+1:0;d<r;){let c=s;for(let t=1,i=o;;i+=o){d>=r&&h("invalid-input");const c=(l=e.charCodeAt(d++))-48<10?l-22:l-65<26?l-65:l-97<26?l-97:o;(c>=o||c>u((n-s)/t))&&h("overflow"),s+=c*t;const p=i<=a?1:i>=a+26?26:i-a;if(c<p)break;const f=o-p;t>u(n/f)&&h("overflow"),t*=f}const p=t.length+1;a=v(s-c,p,0==c),u(s/p)>n-i&&h("overflow"),i+=u(s/p),s%=p,t.splice(s++,0,i)}var l;return String.fromCodePoint(...t)},y=function(e){const t=[];let r=(e=p(e)).length,s=128,i=0,a=72;for(const r of e)r<128&&t.push(l(r));let c=t.length,d=c;for(c&&t.push("-");d<r;){let r=n;for(const t of e)t>=s&&t<r&&(r=t);const p=d+1;r-s>u((n-i)/p)&&h("overflow"),i+=(r-s)*p,s=r;for(const r of e)if(r<s&&++i>n&&h("overflow"),r==s){let e=i;for(let r=o;;r+=o){const n=r<=a?1:r>=a+26?26:r-a;if(e<n)break;const s=e-n,i=o-n;t.push(l(m(n+s%i,0))),e=u(s/i)}t.push(l(m(e,0))),a=v(i,p,d==c),i=0,++d}++i,++s}return t.join("")},b=function(e){return d(e,(function(e){return s.test(e)?g(e.slice(4).toLowerCase()):e}))},j=function(e){return d(e,(function(e){return i.test(e)?"xn--"+y(e):e}))},x={version:"2.1.0",ucs2:{decode:p,encode:f},decode:g,encode:y,toASCII:j,toUnicode:b}},"./node_modules/query-string/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/strict-uri-encode/index.js"),o=r("./node_modules/object-assign/index.js");function s(e,t){return t.encode?t.strict?n(e):encodeURIComponent(e):e}function i(e){return Array.isArray(e)?e.sort():"object"==typeof e?i(Object.keys(e)).sort((function(e,t){return Number(e)-Number(t)})).map((function(t){return e[t]})):e}t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e,t){var r=function(e){var t;switch(e.arrayFormat){case"index":return function(e,r,n){t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===n[e]&&(n[e]={}),n[e][t[1]]=r):n[e]=r};case"bracket":return function(e,r,n){t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==n[e]?n[e]=[].concat(n[e],r):n[e]=[r]:n[e]=r};default:return function(e,t,r){void 0!==r[e]?r[e]=[].concat(r[e],t):r[e]=t}}}(t=o({arrayFormat:"none"},t)),n=Object.create(null);return"string"!=typeof e?n:(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=t.shift(),s=t.length>0?t.join("="):void 0;s=void 0===s?null:decodeURIComponent(s),r(decodeURIComponent(o),s,n)})),Object.keys(n).sort().reduce((function(e,t){var r=n[t];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?e[t]=i(r):e[t]=r,e}),Object.create(null))):n},t.stringify=function(e,t){var r=function(e){switch(e.arrayFormat){case"index":return function(t,r,n){return null===r?[s(t,e),"[",n,"]"].join(""):[s(t,e),"[",s(n,e),"]=",s(r,e)].join("")};case"bracket":return function(t,r){return null===r?s(t,e):[s(t,e),"[]=",s(r,e)].join("")};default:return function(t,r){return null===r?s(t,e):[s(t,e),"=",s(r,e)].join("")}}}(t=o({encode:!0,strict:!0,arrayFormat:"none"},t));return e?Object.keys(e).sort().map((function(n){var o=e[n];if(void 0===o)return"";if(null===o)return s(n,t);if(Array.isArray(o)){var i=[];return o.slice().forEach((function(e){void 0!==e&&i.push(r(n,e,i.length))})),i.join("&")}return s(n,t)+"="+s(o,t)})).filter((function(e){return e.length>0})).join("&"):""}},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,o){r=r||"&",n=n||"=";var s={};if("string"!=typeof e||0===e.length)return s;var i=/\+/g;e=e.split(r);var a=1e3;o&&"number"==typeof o.maxKeys&&(a=o.maxKeys);var c=e.length;a>0&&c>a&&(c=a);for(var u=0;u<c;++u){var l,h,d,p,f=e[u].replace(i,"%20"),m=f.indexOf(n);m>=0?(l=f.substr(0,m),h=f.substr(m+1)):(l=f,h=""),d=decodeURIComponent(l),p=decodeURIComponent(h),t(s,d)?Array.isArray(s[d])?s[d].push(p):s[d]=[s[d],p]:s[d]=p}return s}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,o){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(o){var s=encodeURIComponent(t(o))+n;return Array.isArray(e[o])?e[o].map((function(e){return s+encodeURIComponent(t(e))})).join(r):s+encodeURIComponent(t(e[o]))})).join(r):o?encodeURIComponent(t(o))+n+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,r)=>{"use strict";t.decode=t.parse=r("./node_modules/querystring/decode.js"),t.encode=t.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/sort-keys/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/is-plain-obj/index.js");e.exports=function(e,t){if(!n(e))throw new TypeError("Expected a plain object");"function"==typeof(t=t||{})&&(t={compare:t});var r=t.deep,o=[],s=[],i=function(e){var a=o.indexOf(e);if(-1!==a)return s[a];var c={},u=Object.keys(e).sort(t.compare);o.push(e),s.push(c);for(var l=0;l<u.length;l++){var h=u[l],d=e[h];c[h]=r&&n(d)?i(d):d}return c};return i(e)}},"./node_modules/strict-uri-encode/index.js":e=>{"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(o){t&&t.nodeType,e&&e.nodeType;var s="object"==typeof r.g&&r.g;s.global!==s&&s.window!==s&&s.self;var i,a=2147483647,c=36,u=/^xn--/,l=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(e){throw RangeError(d[e])}function v(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function g(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+v((e=e.replace(h,".")).split("."),t).join(".")}function y(e){for(var t,r,n=[],o=0,s=e.length;o<s;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<s?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function b(e){return v(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function j(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=c)e=p(e/35);return p(n+36*e/(e+38))}function w(e){var t,r,n,o,s,i,u,l,h,d,f,v=[],g=e.length,y=0,j=128,w=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&m("not-basic"),v.push(e.charCodeAt(n));for(o=r>0?r+1:0;o<g;){for(s=y,i=1,u=c;o>=g&&m("invalid-input"),((l=(f=e.charCodeAt(o++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:c)>=c||l>p((a-y)/i))&&m("overflow"),y+=l*i,!(l<(h=u<=w?1:u>=w+26?26:u-w));u+=c)i>p(a/(d=c-h))&&m("overflow"),i*=d;w=x(y-s,t=v.length+1,0==s),p(y/t)>a-j&&m("overflow"),j+=p(y/t),y%=t,v.splice(y++,0,j)}return b(v)}function O(e){var t,r,n,o,s,i,u,l,h,d,v,g,b,w,O,_=[];for(g=(e=y(e)).length,t=128,r=0,s=72,i=0;i<g;++i)(v=e[i])<128&&_.push(f(v));for(n=o=_.length,o&&_.push("-");n<g;){for(u=a,i=0;i<g;++i)(v=e[i])>=t&&v<u&&(u=v);for(u-t>p((a-r)/(b=n+1))&&m("overflow"),r+=(u-t)*b,t=u,i=0;i<g;++i)if((v=e[i])<t&&++r>a&&m("overflow"),v==t){for(l=r,h=c;!(l<(d=h<=s?1:h>=s+26?26:h-s));h+=c)O=l-d,w=c-d,_.push(f(j(d+O%w,0))),l=p(O/w);_.push(f(j(l,0))),s=x(r,b,n==o),r=0,++n}++r,++t}return _.join("")}i={version:"1.3.2",ucs2:{decode:y,encode:b},decode:w,encode:O,toASCII:function(e){return g(e,(function(e){return l.test(e)?"xn--"+O(e):e}))},toUnicode:function(e){return g(e,(function(e){return u.test(e)?w(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return i}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/url/url.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/node_modules/punycode/punycode.js"),o=r("./node_modules/url/util.js");function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=b,t.resolve=function(e,t){return b(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?b(e,!1,!0).resolveObject(t):t},t.format=function(e){o.isString(e)&&(e=b(e));return e instanceof s?e.format():s.prototype.format.call(e)},t.Url=s;var i=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(u),h=["%","/","?",";","#"].concat(l),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},v={javascript:!0,"javascript:":!0},g={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=r("./node_modules/querystring/index.js");function b(e,t,r){if(e&&o.isObject(e)&&e instanceof s)return e;var n=new s;return n.parse(e,t,r),n}s.prototype.parse=function(e,t,r){if(!o.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var s=e.indexOf("?"),a=-1!==s&&s<e.indexOf("#")?"?":"#",u=e.split(a);u[0]=u[0].replace(/\\/g,"/");var b=e=u.join(a);if(b=b.trim(),!r&&1===e.split("#").length){var j=c.exec(b);if(j)return this.path=b,this.href=b,this.pathname=j[1],j[2]?(this.search=j[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=i.exec(b);if(x){var w=(x=x[0]).toLowerCase();this.protocol=w,b=b.substr(x.length)}if(r||x||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var O="//"===b.substr(0,2);!O||x&&v[x]||(b=b.substr(2),this.slashes=!0)}if(!v[x]&&(O||x&&!g[x])){for(var _,I,C=-1,E=0;E<d.length;E++){-1!==(A=b.indexOf(d[E]))&&(-1===C||A<C)&&(C=A)}-1!==(I=-1===C?b.lastIndexOf("@"):b.lastIndexOf("@",C))&&(_=b.slice(0,I),b=b.slice(I+1),this.auth=decodeURIComponent(_)),C=-1;for(E=0;E<h.length;E++){var A;-1!==(A=b.indexOf(h[E]))&&(-1===C||A<C)&&(C=A)}-1===C&&(C=b.length),this.host=b.slice(0,C),b=b.slice(C),this.parseHost(),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k)for(var q=this.hostname.split(/\./),S=(E=0,q.length);E<S;E++){var D=q[E];if(D&&!D.match(p)){for(var U="",R=0,N=D.length;R<N;R++)D.charCodeAt(R)>127?U+="x":U+=D[R];if(!U.match(p)){var P=q.slice(0,E),H=q.slice(E+1),T=D.match(f);T&&(P.push(T[1]),H.unshift(T[2])),H.length&&(b="/"+H.join(".")+b),this.hostname=P.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),k||(this.hostname=n.toASCII(this.hostname));var F=this.port?":"+this.port:"",L=this.hostname||"";this.host=L+F,this.href+=this.host,k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!m[w])for(E=0,S=l.length;E<S;E++){var M=l[E];if(-1!==b.indexOf(M)){var $=encodeURIComponent(M);$===M&&($=escape(M)),b=b.split(M).join($)}}var W=b.indexOf("#");-1!==W&&(this.hash=b.substr(W),b=b.slice(0,W));var z=b.indexOf("?");if(-1!==z?(this.search=b.substr(z),this.query=b.substr(z+1),t&&(this.query=y.parse(this.query)),b=b.slice(0,z)):t&&(this.search="",this.query={}),b&&(this.pathname=b),g[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){F=this.pathname||"";var B=this.search||"";this.path=F+B}return this.href=this.format(),this},s.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",s=!1,i="";this.host?s=e+this.host:this.hostname&&(s=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(i=y.stringify(this.query));var a=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||g[t])&&!1!==s?(s="//"+(s||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):s||(s=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+s+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},s.prototype.resolve=function(e){return this.resolveObject(b(e,!1,!0)).format()},s.prototype.resolveObject=function(e){if(o.isString(e)){var t=new s;t.parse(e,!1,!0),e=t}for(var r=new s,n=Object.keys(this),i=0;i<n.length;i++){var a=n[i];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),u=0;u<c.length;u++){var l=c[u];"protocol"!==l&&(r[l]=e[l])}return g[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!g[e.protocol]){for(var h=Object.keys(e),d=0;d<h.length;d++){var p=h[d];r[p]=e[p]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||v[e.protocol])r.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||"",y=r.search||"";r.path=m+y}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var b=r.pathname&&"/"===r.pathname.charAt(0),j=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=j||b||r.host&&e.pathname,w=x,O=r.pathname&&r.pathname.split("/")||[],_=(f=e.pathname&&e.pathname.split("/")||[],r.protocol&&!g[r.protocol]);if(_&&(r.hostname="",r.port=null,r.host&&(""===O[0]?O[0]=r.host:O.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),x=x&&(""===f[0]||""===O[0])),j)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,O=f;else if(f.length)O||(O=[]),O.pop(),O=O.concat(f),r.search=e.search,r.query=e.query;else if(!o.isNullOrUndefined(e.search)){if(_)r.hostname=r.host=O.shift(),(k=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=k.shift(),r.host=r.hostname=k.shift());return r.search=e.search,r.query=e.query,o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!O.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var I=O.slice(-1)[0],C=(r.host||e.host||O.length>1)&&("."===I||".."===I)||""===I,E=0,A=O.length;A>=0;A--)"."===(I=O[A])?O.splice(A,1):".."===I?(O.splice(A,1),E++):E&&(O.splice(A,1),E--);if(!x&&!w)for(;E--;E)O.unshift("..");!x||""===O[0]||O[0]&&"/"===O[0].charAt(0)||O.unshift(""),C&&"/"!==O.join("/").substr(-1)&&O.push("");var k,q=""===O[0]||O[0]&&"/"===O[0].charAt(0);_&&(r.hostname=r.host=q?"":O.length?O.shift():"",(k=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=k.shift(),r.host=r.hostname=k.shift()));return(x=x||r.host&&O.length)&&!q&&O.unshift(""),O.length?r.pathname=O.join("/"):(r.pathname=null,r.path=null),o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},s.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}}},c={};function u(e){if(c[e])return c[e].exports;var t=c[e]={id:e,loaded:!1,exports:{}},r={id:e,module:t,factory:a[e],require:u};return u.i.forEach((function(e){e(r)})),t=r.module,r.factory.call(t.exports,t,t.exports,r.require),t.loaded=!0,t.exports}u.m=a,u.c=c,u.i=[],u.d=(e,t)=>{for(var r in t)u.o(t,r)&&!u.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},u.hu=e=>e+"."+u.h()+".hot-update.js",u.miniCssF=e=>"components/"+e+"/index.css",u.hmrF=()=>u.h()+".hot-update.json",u.h=()=>"dcd66b90e1f7af264e5c",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="saif-components:",u.l=(r,n,o)=>{if(e[r])e[r].push(n);else{var s,i;if(void 0!==o)for(var a=document.getElementsByTagName("script"),c=0;c<a.length;c++){var l=a[c];if(l.getAttribute("src")==r||l.getAttribute("data-webpack")==t+o){s=l;break}}s||(i=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,u.nc&&s.setAttribute("nonce",u.nc),s.setAttribute("data-webpack",t+o),s.src=r),e[r]=[n];var h=(t,n)=>{s.onerror=s.onload=null,clearTimeout(d);var o=e[r];if(delete e[r],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(n))),t)return t(n)},d=setTimeout(h.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=h.bind(null,s.onerror),s.onload=h.bind(null,s.onload),i&&document.head.appendChild(s)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,n,o={},s=u.c,i=[],a=[],c="idle";function l(e){c=e;for(var t=0;t<a.length;t++)a[t].call(null,e)}function h(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return h(e)}))}function d(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return l("check"),u.hmrM().then((function(n){if(!n)return l(m()?"ready":"idle"),null;l("prepare");var o=[];return t=[],r=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,t){return u.hmrC[t](n.c,n.r,n.m,e,r,o),e}),[])).then((function(){return h((function(){return e?f(e):(l("ready"),o)}))}))}))}function p(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):f(e)}function f(e){e=e||{},m();var t=r.map((function(t){return t(e)}));r=void 0;var o,s=t.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return l("abort"),Promise.resolve().then((function(){throw s[0]}));l("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var i=function(e){o||(o=e)},a=[];return t.forEach((function(e){if(e.apply){var t=e.apply(i);if(t)for(var r=0;r<t.length;r++)a.push(t[r])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):n?f(e).then((function(e){return a.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(l("idle"),Promise.resolve(a))}function m(){if(n)return r||(r=[]),Object.keys(u.hmrI).forEach((function(e){n.forEach((function(t){u.hmrI[e](t,r)}))})),n=void 0,!0}u.hmrD=o,u.i.push((function(f){var m,v,g,y=f.module,b=function(r,n){var o=s[n];if(!o)return r;var a=function(t){if(o.hot.active){if(s[t]){var a=s[t].parents;-1===a.indexOf(n)&&a.push(n)}else i=[n],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),i=[];return r(t)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var d in r)Object.prototype.hasOwnProperty.call(r,d)&&"e"!==d&&Object.defineProperty(a,d,u(d));return a.e=function(e){return function(e){switch(c){case"ready":return l("prepare"),t.push(e),h((function(){l("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},a}(f.require,f.id);y.hot=(m=f.id,v=y,g={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==m,_requireSelf:function(){i=v.parents.slice(),e=m,u(m)},active:!0,accept:function(e,t){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._acceptedDependencies[e[r]]=t||function(){};else g._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._declinedDependencies[e[t]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=g._disposeHandlers.indexOf(e);t>=0&&g._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":r=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,r)})),l("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:d,apply:p,status:function(e){if(!e)return c;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:o[m]},e=void 0,g),y.parents=i,y.children=[],i=[],f.require=b})),u.hmrC={},u.hmrI={}})(),u.p="",r=(e,t,r)=>{var n=document.createElement("link");return n.rel="stylesheet",n.type="text/css",n.onload=t,n.onerror=function(t){var o=t&&t.target&&t.target.src||e,s=new Error("Loading CSS chunk "+chunkId+" failed.\n("+o+")");s.code="CSS_CHUNK_LOAD_FAILED",s.request=o,n.parentNode.removeChild(n),r(s)},n.href=e,document.getElementsByTagName("head")[0].appendChild(n),n},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(i=r[n]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var s=document.getElementsByTagName("style");for(n=0;n<s.length;n++){var i;if((o=(i=s[n]).getAttribute("data-href"))===e||o===t)return i}},o=[],s=[],i=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<s.length;e++)s[e].rel="stylesheet";s.length=0}}),u.hmrC.miniCss=(e,t,a,c,l,h)=>{l.push(i),e.forEach((e=>{var t=u.miniCssF(e),i=u.p+t;const a=n(t,i);a&&c.push(new Promise(((e,t)=>{var n=r(i,(()=>{n.as="style",n.rel="preload",e()}),t);o.push(a),s.push(n)})))}))},(()=>{var e,t,r,n,o={label:0},s={};function i(e){return new Promise(((t,r)=>{s[e]=t;var n=u.p+u.hu(e),o=new Error;u.l(n,(t=>{if(s[e]){s[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,r(o)}}))}))}function a(s){function i(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),s=o.id,i=o.chain,c=u.c[s];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var l=0;l<c.parents.length;l++){var h=c.parents[l],d=u.c[h];if(d){if(d.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([h]),moduleId:s,parentId:h};-1===t.indexOf(h)&&(d.hot._acceptedDependencies[s]?(r[h]||(r[h]=[]),a(r[h],[s])):(delete r[h],t.push(h),n.push({chain:i.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}u.f&&delete u.f.jsonpHmr,e=void 0;var c={},l=[],h={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(u.o(t,p)){var f,m=t[p],v=!1,g=!1,y=!1,b="";switch((f=m?i(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":s.onDeclined&&s.onDeclined(f),s.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+b));break;case"declined":s.onDeclined&&s.onDeclined(f),s.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+b));break;case"unaccepted":s.onUnaccepted&&s.onUnaccepted(f),s.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":s.onAccepted&&s.onAccepted(f),g=!0;break;case"disposed":s.onDisposed&&s.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(g)for(p in h[p]=m,a(l,f.outdatedModules),f.outdatedDependencies)u.o(f.outdatedDependencies,p)&&(c[p]||(c[p]=[]),a(c[p],f.outdatedDependencies[p]));y&&(a(l,[f.moduleId]),h[p]=d)}t=void 0;for(var j,x=[],w=0;w<l.length;w++){var O=l[w];u.c[O]&&u.c[O].hot._selfAccepted&&h[O]!==d&&!u.c[O].hot._selfInvalidated&&x.push({module:O,require:u.c[O].hot._requireSelf,errorHandler:u.c[O].hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var s=n.pop(),i=u.c[s];if(i){var a={},h=i.hot._disposeHandlers;for(w=0;w<h.length;w++)h[w].call(null,a);for(u.hmrD[s]=a,i.hot.active=!1,delete u.c[s],delete c[s],w=0;w<i.children.length;w++){var d=u.c[i.children[w]];d&&((e=d.parents.indexOf(s))>=0&&d.parents.splice(e,1))}}}for(var p in c)if(u.o(c,p)&&(i=u.c[p]))for(j=c[p],w=0;w<j.length;w++)t=j[w],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(e){for(var t in h)u.o(h,t)&&(u.m[t]=h[t]);for(var r=0;r<n.length;r++)n[r](u);for(var o in c)if(u.o(c,o)){var i=u.c[o];if(i){j=c[o];for(var a=[],d=[],p=0;p<j.length;p++){var f=j[p],m=i.hot._acceptedDependencies[f];if(m){if(-1!==a.indexOf(m))continue;a.push(m),d.push(f)}}for(var v=0;v<a.length;v++)try{a[v].call(null,j)}catch(t){s.onErrored&&s.onErrored({type:"accept-errored",moduleId:o,dependencyId:d[v],error:t}),s.ignoreErrored||e(t)}}}for(var g=0;g<x.length;g++){var y=x[g],b=y.module;try{y.require(b)}catch(t){if("function"==typeof y.errorHandler)try{y.errorHandler(t)}catch(r){s.onErrored&&s.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:r,originalError:t}),s.ignoreErrored||e(r),e(t)}else s.onErrored&&s.onErrored({type:"self-accept-errored",moduleId:b,error:t}),s.ignoreErrored||e(t)}}return l}}}self.webpackHotUpdatesaif_components=(e,r,o)=>{for(var i in r)u.o(r,i)&&(t[i]=r[i]);o&&n.push(o),s[e]&&(s[e](),s[e]=void 0)},u.hmrI.jsonp=function(e,o){t||(t={},n=[],r=[],o.push(a)),u.o(t,e)||(t[e]=u.m[e])},u.hmrC.jsonp=function(s,c,l,h,d,p){d.push(a),e={},r=c,t=l.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],s.forEach((function(t){u.o(o,t)&&void 0!==o[t]&&(h.push(i(t)),e[t]=!0)})),u.f&&(u.f.jsonpHmr=function(t,r){e&&!u.o(e,t)&&u.o(o,t)&&void 0!==o[t]&&(r.push(i(t)),e[t]=!0)})},u.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),u("./components/label/index.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,